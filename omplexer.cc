#line 2 "omplexer.cc"

#line 4 "omplexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer openmp__create_buffer
#define yy_delete_buffer openmp__delete_buffer
#define yy_scan_buffer openmp__scan_buffer
#define yy_scan_string openmp__scan_string
#define yy_scan_bytes openmp__scan_bytes
#define yy_init_buffer openmp__init_buffer
#define yy_flush_buffer openmp__flush_buffer
#define yy_load_buffer_state openmp__load_buffer_state
#define yy_switch_to_buffer openmp__switch_to_buffer
#define yypush_buffer_state openmp_push_buffer_state
#define yypop_buffer_state openmp_pop_buffer_state
#define yyensure_buffer_stack openmp_ensure_buffer_stack
#define yy_flex_debug openmp__flex_debug
#define yyin openmp_in
#define yyleng openmp_leng
#define yylex openmp_lex
#define yylineno openmp_lineno
#define yyout openmp_out
#define yyrestart openmp_restart
#define yytext openmp_text
#define yywrap openmp_wrap
#define yyalloc openmp_alloc
#define yyrealloc openmp_realloc
#define yyfree openmp_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define openmp__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer openmp__create_buffer
#endif

#ifdef yy_delete_buffer
#define openmp__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer openmp__delete_buffer
#endif

#ifdef yy_scan_buffer
#define openmp__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer openmp__scan_buffer
#endif

#ifdef yy_scan_string
#define openmp__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string openmp__scan_string
#endif

#ifdef yy_scan_bytes
#define openmp__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes openmp__scan_bytes
#endif

#ifdef yy_init_buffer
#define openmp__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer openmp__init_buffer
#endif

#ifdef yy_flush_buffer
#define openmp__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer openmp__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define openmp__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state openmp__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define openmp__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer openmp__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define openmp_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state openmp_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define openmp_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state openmp_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define openmp_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack openmp_ensure_buffer_stack
#endif

#ifdef yylex
#define openmp_lex_ALREADY_DEFINED
#else
#define yylex openmp_lex
#endif

#ifdef yyrestart
#define openmp_restart_ALREADY_DEFINED
#else
#define yyrestart openmp_restart
#endif

#ifdef yylex_init
#define openmp_lex_init_ALREADY_DEFINED
#else
#define yylex_init openmp_lex_init
#endif

#ifdef yylex_init_extra
#define openmp_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra openmp_lex_init_extra
#endif

#ifdef yylex_destroy
#define openmp_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy openmp_lex_destroy
#endif

#ifdef yyget_debug
#define openmp_get_debug_ALREADY_DEFINED
#else
#define yyget_debug openmp_get_debug
#endif

#ifdef yyset_debug
#define openmp_set_debug_ALREADY_DEFINED
#else
#define yyset_debug openmp_set_debug
#endif

#ifdef yyget_extra
#define openmp_get_extra_ALREADY_DEFINED
#else
#define yyget_extra openmp_get_extra
#endif

#ifdef yyset_extra
#define openmp_set_extra_ALREADY_DEFINED
#else
#define yyset_extra openmp_set_extra
#endif

#ifdef yyget_in
#define openmp_get_in_ALREADY_DEFINED
#else
#define yyget_in openmp_get_in
#endif

#ifdef yyset_in
#define openmp_set_in_ALREADY_DEFINED
#else
#define yyset_in openmp_set_in
#endif

#ifdef yyget_out
#define openmp_get_out_ALREADY_DEFINED
#else
#define yyget_out openmp_get_out
#endif

#ifdef yyset_out
#define openmp_set_out_ALREADY_DEFINED
#else
#define yyset_out openmp_set_out
#endif

#ifdef yyget_leng
#define openmp_get_leng_ALREADY_DEFINED
#else
#define yyget_leng openmp_get_leng
#endif

#ifdef yyget_text
#define openmp_get_text_ALREADY_DEFINED
#else
#define yyget_text openmp_get_text
#endif

#ifdef yyget_lineno
#define openmp_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno openmp_get_lineno
#endif

#ifdef yyset_lineno
#define openmp_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno openmp_set_lineno
#endif

#ifdef yywrap
#define openmp_wrap_ALREADY_DEFINED
#else
#define yywrap openmp_wrap
#endif

#ifdef yyalloc
#define openmp_alloc_ALREADY_DEFINED
#else
#define yyalloc openmp_alloc
#endif

#ifdef yyrealloc
#define openmp_realloc_ALREADY_DEFINED
#else
#define yyrealloc openmp_realloc
#endif

#ifdef yyfree
#define openmp_free_ALREADY_DEFINED
#else
#define yyfree openmp_free
#endif

#ifdef yytext
#define openmp_text_ALREADY_DEFINED
#else
#define yytext openmp_text
#endif

#ifdef yyleng
#define openmp_leng_ALREADY_DEFINED
#else
#define yyleng openmp_leng
#endif

#ifdef yyin
#define openmp_in_ALREADY_DEFINED
#else
#define yyin openmp_in
#endif

#ifdef yyout
#define openmp_out_ALREADY_DEFINED
#else
#define yyout openmp_out
#endif

#ifdef yy_flex_debug
#define openmp__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug openmp__flex_debug
#endif

#ifdef yylineno
#define openmp_lineno_ALREADY_DEFINED
#else
#define yylineno openmp_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 643
#define YY_END_OF_BUFFER 644
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2597] =
    {   0,
      641,  641,    0,    0,  166,  166,  196,  196,  181,  181,
      188,  188,  220,  220,  252,  252,  260,  260,  274,  274,
      278,  278,  282,  282,  298,  298,  304,  304,  311,  311,
      321,  321,  327,  327,  333,  333,    0,    0,  349,  349,
      371,  371,  376,  376,  388,  388,  392,  392,  397,  397,
      382,  382,  413,  413,  429,  429,  444,  444,  465,  465,
        0,    0,  479,  479,  483,  483,  490,  490,  496,  496,
      512,  512,  451,  451,    0,    0,  518,  518,    0,    0,
      528,  528,    0,    0,  545,  545,    0,    0,  555,  555,
      570,  570,    0,    0,  589,  589,  359,  359,  600,  600,

      230,  230,  234,  234,  285,  285,  289,  289,  293,  293,
      224,  224,  227,  227,  238,  238,  246,  246,  242,  242,
      201,  201,    0,    0,  604,  604,  608,  608,  621,  621,
      628,  628,  635,  635,  614,  614,    0,    0,  644,  642,
      154,  641,  642,  642,  147,  148,  151,  153,  149,  152,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  150,  638,  643,  167,  166,  163,  164,  165,  167,
      197,  196,  194,  195,  197,  197,  197,  197,  182,  181,
      178,  179,  180,  182,  182,  182,  182,  182,  182,  182,

      189,  188,  186,  187,  189,  189,  189,  221,  220,  213,
      206,  207,  212,  210,  208,  211,  209,  215,  221,  221,
      221,  221,  214,  253,  252,  249,  250,  251,  253,  261,
      260,  254,  255,  259,  261,  261,  261,  275,  274,  272,
      273,  270,  271,  275,  275,  275,  275,  275,  275,  275,
      279,  278,  276,  277,  282,  280,  281,  299,  298,  295,
      297,  296,  305,  304,  301,  303,  302,  305,  312,  311,
      309,  310,  312,  312,  324,  321,  322,  323,  324,  330,
      327,  328,  329,  326,  330,  336,  333,  334,  335,  332,
      336,  337,  350,  349,  338,  340,  344,  339,  341,  350,

      350,  350,  350,  342,  343,  372,  371,  361,  363,  362,
      364,  372,  372,  372,  372,  365,  366,  378,  376,  374,
      375,  378,  388,  385,  386,  387,  394,  392,  390,  391,
      394,  397,  395,  396,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  384,  382,  380,  381,  384,
      414,  413,  411,  412,  430,  429,  422,  415,  416,  421,
      419,  417,  420,  418,  424,  430,  423,  445,  444,  431,
      432,  433,  435,  434,  445,  445,  445,  445,  445,  466,
      465,  460,  461,  462,  463,  466,  473,  469,  467,  468,
      470,  472,  471,  480,  479,  474,  478,  477,  476,  475,

      484,  483,  481,  482,  490,  488,  489,  643,  643,  643,
      497,  496,  493,  494,  495,  497,  497,  512,  509,  510,
      511,  643,  643,  643,  643,  643,  643,  643,  452,  451,
      446,  450,  448,  449,  447,  459,  456,  453,  454,  455,
      458,  457,  519,  518,  513,  514,  515,  516,  519,  522,
      520,  521,  529,  528,  523,  524,  525,  526,  529,  532,
      530,  531,  546,  545,  533,  536,  534,  546,  549,  547,
      548,  556,  555,  553,  554,  556,  556,  556,  571,  570,
      560,  561,  562,  563,  571,  571,  571,  571,  571,  571,
      571,  574,  572,  573,  590,  589,  582,  575,  576,  581,

      579,  577,  580,  578,  584,  590,  583,  360,  359,  351,
      353,  352,  354,  360,  360,  355,  356,  601,  600,  591,
      592,  601,  601,  601,  601,  601,  231,  230,  228,  229,
      235,  234,  232,  233,  286,  285,  283,  284,  290,  289,
      287,  288,  294,  293,  291,  292,  224,  222,  223,  227,
      225,  226,  239,  238,  236,  237,  247,  246,  244,  245,
      243,  242,  240,  241,  202,  201,  199,  200,  202,  639,
      605,  604,  602,  603,  609,  608,  606,  607,  623,  621,
      617,  618,  619,  620,  623,  630,  628,  624,  625,  626,
      627,  630,  637,  635,  631,  632,  633,  634,  637,  616,

      614,  610,  611,  612,  613,  616,  641,    0,    0,  153,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  116,    0,
        0,    0,    0,    0,    0,    0,    0,  166,    0,  196,
        0,    0,    0,    0,  181,    0,    0,    0,    0,    0,
        0,    0,    0,  188,    0,    0,    0,  220,  216,    0,

        0,    0,    0,    0,  217,  252,    0,  260,    0,    0,
        0,  274,    0,    0,    0,    0,    0,    0,    0,    0,
      278,  282,  298,  304,    0,  311,    0,    0,    0,  321,
        0,  327,    0,  333,    0,  349,    0,    0,    0,    0,
      371,    0,    0,    0,    0,  376,    0,    0,  388,  385,
      392,    0,    0,  397,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  382,    0,    0,
      413,  429,  425,    0,    0,  426,  444,    0,  437,    0,
        0,    0,    0,    0,  465,    0,    0,  468,  467,  479,
      483,  490,    0,    0,    0,  496,    0,    0,  512,    0,

        0,    0,    0,    0,    0,    0,    0,  499,  451,    0,
      454,  453,  518,    0,  528,    0,  545,    0,  535,    0,
      555,    0,    0,    0,  570,    0,    0,    0,    0,    0,
        0,    0,  589,  585,    0,    0,  586,  359,    0,    0,
      600,    0,  594,    0,    0,    0,    0,  230,  234,  285,
      289,  293,  224,  227,  238,  246,  242,  201,    0,  604,
      608,  621,    0,  628,    0,  635,    0,  614,    0,    0,
        0,    0,    0,    0,    0,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,

        0,    0,    0,    0,    0,    0,    0,    0,   27,    0,
        0,    0,   77,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   79,    0,    0,    0,    0,  121,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  257,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  408,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  438,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  499,    0,    0,    0,    0,
      552,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  564,    0,    0,    0,    0,    0,    0,    0,    0,
      595,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,
       48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      106,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  111,  640,  122,    0,    0,    0,    0,   78,
      117,    0,    0,  145,    0,  133,   73,    0,    0,    0,
        0,    0,   72,    0,    0,  119,   47,    0,    0,    0,
        0,    0,    0,    0,   18,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  130,    0,    0,    0,    0,
        0,    0,   49,    0,    0,    0,    0,    0,    0,   10,
        0,    0,    0,    6,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   65,    0,    0,    0,    0,  191,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  219,    0,  218,    0,
        0,  257,  258,    0,  256,  268,    0,    0,    0,    0,
        0,  264,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  345,    0,    0,    0,  367,    0,    0,
        0,    0,    0,  398,    0,  399,    0,  400,    0,    0,
        0,  403,    0,  404,    0,    0,    0,  407,    0,    0,
        0,    0,    0,  428,    0,  427,    0,    0,    0,    0,
      443,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  500,  503,    0,    0,    0,    0,    0,    0,
      550,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  588,    0,  587,    0,    0,    0,    0,    0,  599,
        0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
        0,   40,    0,  140,    0,    0,    0,  141,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  110,    0,    0,
       83,    0,  126,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   66,    0,    0,    0,    0,
        0,    0,    0,    0,   36,    0,   63,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   70,    0,
        0,    0,    0,    9,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   25,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  131,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  174,    0,    0,    0,
        0,    0,  169,    0,    0,  170,    0,    0,  184,    0,
        0,    0,    0,    0,  204,    0,  258,    0,    0,    0,
        0,    0,    0,    0,    0,  306,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  401,    0,    0,    0,

      406,    0,    0,    0,    0,    0,  439,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  498,    0,    0,
      500,  503,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  565,
        0,    0,    0,    0,    0,    0,  596,    0,    0,    0,
      622,  629,  636,  615,    0,    0,    0,    0,    0,    0,
        0,    0,  129,    0,   56,    0,    0,    0,    0,   20,
        0,    0,    0,    0,   87,  135,    0,   90,  107,    0,
        0,    0,    0,    0,    0,  143,    0,    0,    0,    0,
        0,    0,    0,    0,   30,   68,   26,    0,    0,    0,

       74,    0,    0,   35,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   17,    0,   54,   24,  105,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,  115,    0,    0,
        0,   81,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  190,    0,    0,    0,    0,    0,    0,
        0,    0,  183,  185,    0,    0,    0,    0,  267,    0,
        0,    0,  265,  300,    0,  308,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  347,    0,    0,
      369,    0,    0,    0,  377,    0,    0,  393,    0,    0,

      405,    0,  410,    0,    0,    0,  383,  441,    0,    0,
      442,    0,    0,    0,    0,    0,    0,    0,  498,    0,
        0,    0,    0,  505,  501,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  551,    0,  567,    0,    0,
      558,  569,    0,    0,    0,    0,    0,  598,    0,  593,
        0,  622,  629,  636,  615,    2,  103,  128,    0,   39,
        0,    0,    0,    0,  123,    0,  132,  138,    0,    0,
        0,    0,   41,   14,  136,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,    0,    0,    0,    0,    0,   34,    0,

        0,   15,    0,    0,  104,  127,    0,    0,   37,  142,
        0,   53,  102,    8,    0,    0,    0,    0,    0,    0,
        0,    0,  137,    0,   42,    0,    0,   64,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  193,    0,
      172,    0,    0,    0,    0,  173,    0,    0,  177,    0,
        0,  203,    0,  266,    0,    0,  269,  300,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  331,    0,
        0,    0,    0,    0,  373,    0,  389,    0,    0,    0,
      379,    0,    0,    0,  486,  487,  485,    0,    0,    0,
        0,  504,    0,  507,  505,  501,    0,  517,    0,  527,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  557,
        0,  559,    0,    0,  566,    0,    0,  357,    0,    0,
       89,    0,   22,    0,    0,    0,    0,   32,    0,    0,
      134,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   33,    4,   88,    0,    0,
       96,    0,   31,   52,    0,    0,    0,   91,  124,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  176,    0,    0,    0,
      205,    0,    0,    0,  307,    0,    0,    0,    0,    0,

        0,    0,    0,  325,    0,    0,    0,    0,    0,  402,
        0,  409,    0,    0,    0,    0,    0,    0,    0,  504,
        0,  507,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  568,    0,    0,    0,  144,   59,    0,    0,    0,
       71,    0,    0,    0,    0,    0,    0,   51,   82,    0,
       93,    0,    0,   50,    0,    0,    0,   85,    0,    0,
        0,   94,   12,    0,   21,   19,    0,    0,    0,   58,
       92,    0,    0,    0,    0,    0,    0,   57,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  175,    0,  168,
        0,  171,    0,  262,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  346,    0,  368,    0,    0,  436,    0,
        0,  464,    0,  491,    0,  506,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  114,    0,    0,   45,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  139,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      506,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  358,    0,  198,    0,    0,    0,   55,  120,

        0,    0,    0,    0,    0,   67,    0,   29,    0,   38,
       44,   11,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  492,  508,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  146,    0,   62,    0,    0,
       16,    0,   86,    0,    0,    0,    0,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  192,    0,  248,  263,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  508,  502,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,  112,    5,    0,    0,   61,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      440,  502,    0,    0,    0,    0,    0,    0,    0,    0,
      597,    0,    0,    0,    0,  125,    0,   60,    0,    0,
        0,  108,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  348,
      370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  113,   97,   98,    0,  109,  118,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  101,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  315,    0,    0,
        0,    0,  319,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  318,    0,    0,    0,    0,  320,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      157,    0,    0,    0,    0,    0,  161,    0,  313,  316,
        0,  317,    0,    0,  539,    0,    0,    0,    0,    0,
      543,    0,    0,   99,    0,  160,    0,    0,    0,    0,
        0,  162,    0,    0,  542,    0,    0,    0,    0,    0,
      544,    0,    0,  155,    0,  158,    0,    0,  159,  314,
        0,  537,    0,  540,    0,    0,  541,    0,    0,    0,
      100,    0,  156,    0,  538,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    1,    5,    6,    1,    7,    1,    8,
        9,   10,   11,   12,   13,    1,   14,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   15,    1,    1,
       16,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   17,    1,   18,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[49] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    1,    3,
        1,    1,    3,    3,    1,    1,    1,    3,    1,    1,
        1,    1,    3,    1,    3,    1,    3,    1,    3,    3,
        1,    1,    3,    1,    1,    3,    1,    3
    } ;

static const flex_int16_t yy_base[2660] =
    {   0,
        0,    0, 3297, 3296,   47,   49,   82,  119,  156,  195,
       57,   65,  234,  280,   90,  116,  326,  366,  406,  443,
       67,   69,   93,  101,  127,  131,  164,  212,  147,  166,
      204,  220,  262,  297,  307,  330, 3295, 3294,  480,  527,
      574,  621,  223,  266,  184,  334,  348,  352,  667,    0,
      356,  374,  181,  277,  706,  752,  798,  835,  376,  408,
      425,  445,  462,  482,  315,  390,  393,  496,  498,  538,
      871,    0,  554,  576,  591,  623,  639,  650,  139,  251,
      671,  720,  312,  338,  734,  769,  515,  523,  578,  607,
      909,  947,  536,  563,  985, 1031, 1077, 1124, 1171, 1208,

      610,  682,  731,  742,  771,  780,  783,  809,  820,  831,
      105,  416,  459,  506,  846,  857,  868,  879,  881,  890,
      905,  917, 3293, 3292,  934,  949,  972,  974,  999, 1007,
     1045, 1053, 1088, 1135, 1173, 1175,    0,    0, 3293, 3300,
     3300, 3289, 3285, 3255, 3300, 3300, 3300,    0, 3300, 3300,
      765,  123,  993,  676,   20,  629,  352,   60,  269, 3261,
      422,   62,   66,   79,  517, 3264, 1049,  920,  362,  157,
      221, 3300, 3300, 3300, 3300, 3284, 3300, 3300, 3300, 3254,
     3300, 3282, 3300, 3300, 3256, 3249, 3245, 3254, 3300, 3277,
     3300, 3300, 3300, 3259, 3258,  120, 3257, 3248, 3255, 3239,

     3300, 3270, 3300, 3300, 3241, 3251, 3235, 3300, 3266, 3261,
     3300, 3300, 3300, 3300, 3300, 3300, 3300, 3300, 3243, 3233,
      117, 3245, 3217, 3300, 3260, 3300, 3300, 3300, 3228, 3300,
     3258, 3300, 3300, 3300, 3236, 3218, 3238, 3300, 3254, 3300,
     3300, 3300, 3300, 3216, 3211, 3214, 3219, 3218, 3211,  172,
     3300, 3247, 3300, 3300, 3246, 3300, 3300, 3300, 3245, 3300,
     3300, 3300, 3300, 3244, 3300, 3300, 3300, 3207, 3300, 3242,
     3300, 3300, 3224,   99, 3300, 3240, 3300, 3300, 3210, 3300,
     3238, 3300, 3300, 3300, 3208, 3300, 3236, 3300, 3300, 3300,
     3214, 3300, 3300, 3234, 3300, 3300, 3300, 3300, 3300, 3202,

     3211, 3202, 3195, 3300, 3300, 3300, 3229, 3300, 3300, 3300,
     3300, 3197, 3206, 3197, 3190, 3300, 3300, 3300, 3224, 3188,
     3300, 3203, 3221, 3220, 3300, 3300, 3300, 3219, 3183, 3300,
     3198, 3216, 3300, 3300,  219, 3198, 3180, 3176, 3182,  206,
     3183, 3187, 3190, 3183, 3177, 3300, 3206, 3170, 3300, 3185,
     3300, 3203, 3300, 3300, 3300, 3202, 3197, 3300, 3300, 3300,
     3300, 3300, 3300, 3300, 3300,  142, 3156, 3300, 3199, 3300,
     3300, 3300, 3300, 3300, 3177,  440, 3160, 3159,  459, 3300,
     3195, 3300, 3300, 3300, 3300, 3158, 3300,  565, 3193, 3300,
     3300, 3300, 3300, 3300, 3192, 3300, 3300, 3300, 3300, 3300,

     3300, 3191, 3300, 3300, 3190, 3300, 3300, 3170, 3167, 3166,
     3300, 3186, 3300, 3300, 3300, 3155, 3163, 3183, 3300, 3300,
     3300,  241, 3161,  334, 3150, 3149, 3160, 3147, 3300, 3177,
     3300, 3300, 3300, 3300, 3300, 3300,  592, 3176, 3300, 3300,
     3300, 3300, 3300, 3175, 3300, 3300, 3300, 3300, 3157, 3300,
     3300, 3300, 3300, 3173, 3300, 3300, 3300, 3300, 3155, 3300,
     3300, 3300, 3300, 3171, 3300,  647, 3300, 3141, 3300, 3300,
     3300, 3300, 3169, 3300, 3300, 3138, 3136, 3135, 3300, 3165,
     3300, 3300, 3300, 3300, 3136, 3135, 3141, 3127, 3143, 3138,
     3127, 3300, 3300, 3300, 3300, 3157, 3152, 3300, 3300, 3300,

     3300, 3300, 3300, 3300, 3300,  188, 3111, 3300, 3154, 3300,
     3300, 3300, 3300, 3113, 3131, 3300, 3300, 3300, 3151, 3300,
     3300, 3129, 3119, 3111, 3110,  644, 3300, 3146, 3300, 3300,
     3300, 3145, 3300, 3300, 3300, 3144, 3300, 3300, 3300, 3143,
     3300, 3300, 3300, 3142, 3300, 3300, 3141, 3300, 3300, 3140,
     3300, 3300, 3300, 3139, 3300, 3300, 3300, 3138, 3300, 3300,
     3300, 3137, 3300, 3300, 3300, 3136, 3300, 3300, 3104, 3300,
     3300, 3134, 3300, 3300, 3300, 3133, 3300, 3300, 3300, 3132,
     3300, 3300, 3300, 3300, 3107, 3300, 3130, 3300, 3300, 3300,
     3300, 3105, 3300, 3128, 3300, 3300, 3300, 3300, 3103, 3300,

     3126, 3300, 3300, 3300, 3300, 3101, 3124, 3092, 3088,    0,
     3088, 3098,  157, 3078, 3099, 3086, 3082, 3085, 3083,  477,
      691,  666, 3076, 3087, 3075, 1070, 3075, 3300, 3079,  313,
     1059,  264, 3071, 3073, 3083, 3074, 3068, 3066, 3085,   23,
     3071, 3065, 3300, 1085,  257, 3069, 3063, 3067, 3065,  770,
      710, 1089, 3066, 3062, 3073, 3058, 3066,  741, 1122, 3068,
      841,  289, 3072,  527, 3054,  608, 3070, 3052, 3300,  483,
     3065, 3063, 3049, 3052, 3060, 3046, 3054, 3078, 3045, 3076,
     3041, 3044, 3048, 3055, 3071, 3040, 3033, 3032, 3042, 3032,
     3036,  674, 3044, 3063, 3031, 3026, 3026, 3059, 3300, 3036,

     3022, 3016, 3025, 3019, 3300, 3053, 3022, 3051, 3028, 3032,
     3020, 3047, 3010, 3015, 3019, 3013, 3012, 3011, 3011, 3022,
     3038, 3037, 3036, 3035, 3017, 3033, 2998, 3014, 2996, 3029,
     2996, 3027, 2994, 3025, 3002, 3023, 2992, 2983, 2988, 2998,
     3018, 2987, 2978, 2983, 2993, 3013, 2993, 2980, 3010, 3009,
     3008, 2988, 2975, 3005, 2984, 2974, 2967, 2984, 2974, 2962,
     2969, 2961, 2958, 2970, 2963,  816, 2966, 2992, 2972, 2959,
     2989, 2988, 3300, 2947, 2956, 3300, 2985, 2952, 2952, 2961,
     2945, 2944, 2949, 2941, 2977, 2955,  832, 3300, 2975, 2974,
     2973, 2972, 2938, 2942, 2936, 2968, 2948, 2928, 2965, 2941,

     2935, 2940, 2927, 2929, 2929, 2933, 2940,  323, 2956,  843,
     3300, 2955, 2954, 2921, 2952, 2919, 2950,  853, 3300, 2917,
     2948, 2906, 2911, 2921, 2944,  586, 2912, 2914, 2910, 2908,
     2911,  913, 2938, 3300, 2897, 2906, 3300, 2935, 2898, 2903,
     2932, 2899, 2899, 2893, 2892, 2897, 2889, 2925, 2924, 2923,
     2922, 2921, 2920, 2919, 2918, 2917, 2916, 2915, 2884, 2913,
     2912, 2911, 2873, 2909, 2871, 2907, 2869, 2905, 2867, 2874,
     2885,  244, 2876, 2877,  790, 3300, 2875, 2869, 2863, 2876,
     2878, 2875, 2857, 2857, 2856, 2862, 2869, 2847, 3300, 2851,
     2869, 2857, 2867,  346, 2847, 2865, 2856, 2844, 2862, 3300,

     2857, 2849, 2840, 2841,  796, 2857, 2838, 2837, 3300, 2854,
     2841, 2845, 3300, 2843, 2836, 2850, 2829, 2828, 2829, 2828,
     2833, 2824, 2839, 3300, 2838, 2821,  848, 2824, 2823, 2818,
     2834, 2829, 2834, 2816, 2818,  702, 2823, 2830, 2830, 3300,
     2824, 2827, 2813,  823, 2823, 2821, 2803,  528, 2802, 2817,
     2816,  862, 2815, 2801, 2798, 2817, 2798, 2811, 2807, 2808,
     2805, 2800, 2797, 2804, 2802, 2798, 2805,  738, 2796, 2800,
     2789, 2791, 2781, 2800, 2780, 2793, 2775, 2778, 2792, 2793,
     2788, 2772, 2790, 2786, 2782, 2776, 2600, 2581, 2578, 2592,
     2594, 2590,  618,  882,  102,  138,  206,  209,  897,  310,

      353,  382,  388,  403,  410,  436,  433,  447,  499,  495,
      540,  585,  589,  635,  630,  649,  650,  657,  689,  702,
      717,  719,  724,  729,  759,  757,  957,  962,  982,  751,
      769, 1003, 1017,  807,  810, 1022,  808, 1042, 3300,  820,
      868,  866,  920,  930,  881,  882,  893,  929, 3300,  931,
      926,  927,  949,  953,  959,  965,  962,  967,  971,  998,
      985, 1003, 1012, 1004, 1019, 1049, 1021, 1024, 1029, 1047,
     3300, 1031, 1038, 1040, 1062, 1045, 1064, 1067, 1067, 1088,
     1114, 3300, 1077, 1131, 1136, 1095, 1097, 1087, 1084, 1106,
     3300, 1105, 1104, 1127, 1119, 1121, 1122, 1123, 1124, 1134,

     1124, 1134, 1131, 1133, 1147, 1146, 1145, 3300, 1143, 1158,
     3300, 1166, 1167, 1152, 1169, 1157, 1178, 1172, 1173, 1174,
     3300, 1184, 1166, 1174, 1191, 1176, 1192, 1193, 1200, 1186,
     1183, 1181, 3300, 3300, 3300, 1189, 1192, 1185, 1198, 3300,
     3300, 1202, 1194, 3300, 1205, 3300, 3300, 1205, 1210, 1192,
     1205, 1210, 3300, 1200, 1218, 3300, 3300, 1215, 1217, 1216,
     1220, 1222, 1213, 1210, 3300, 1225, 1217, 1223, 1213, 1216,
     1223, 1216, 1219, 1237, 1239, 3300, 1237, 1217, 1241, 1234,
     1226, 1233, 3300, 1226, 1243, 1243, 1240, 1247, 1246, 1268,
     1241, 1253, 1250, 1256, 1239, 1258, 1251, 1256, 1242, 1260,

     1265, 1266, 1254, 3300, 1251, 1266, 1270, 1252, 3300, 1274,
     1271, 1272, 1299, 1266, 1301, 1275, 1304, 1284, 1307, 1272,
     1288, 1289, 1295, 1276, 1297, 1315, 3300, 1317, 3300, 1322,
     1293, 1320, 1323, 1325, 3300, 3300, 1295, 1305, 1292, 1301,
     1308, 3300, 1309, 1311, 1309, 1303, 1322, 1321, 1310, 1306,
     1308, 1327, 1326, 3300, 1312, 1331, 1330, 3300, 1318, 1333,
     1321, 1335, 1358, 3300, 1359, 3300, 1360, 3300, 1361, 1326,
     1363, 3300, 1368, 3300, 1342, 1371, 1372, 3300, 1352, 1344,
     1342, 1358, 1380, 3300, 1381, 3300, 1364, 1347, 1367, 1345,
     3300, 1367, 1370, 1354, 1349, 1371, 1356, 1375, 1374, 1377,

     1360, 1362, 1399, 1400, 1365, 1385, 1372, 1383, 1384, 1387,
     3300, 1373, 1390, 1369, 1391, 1377, 1414, 1395, 1400, 1387,
     1420, 3300, 1421, 3300, 1392, 1393, 1407, 1391, 1388, 3300,
     1410, 1393, 1404, 1407, 1408, 1409, 3300, 1408, 1417, 1405,
     1415, 1420, 1406, 1426, 1424, 1426, 1425, 3300, 1419, 1414,
     3300, 1428, 1418, 1415, 1422, 1419, 1435, 1421, 1428, 1437,
     1432, 1428, 1436, 1440, 1427, 1438, 1439, 3300, 1430, 1431,
     3300, 1435, 3300, 1434, 1434, 1449, 1451, 1442, 1438, 1457,
     1437, 1442, 1443, 1444, 1445, 3300, 1463, 1456, 1445, 1447,
     1455, 1467, 1450, 1470, 1467, 1461, 3300, 1465, 1456, 1475,

     1459, 1475, 1462, 1464, 1464, 1479, 1480, 1465, 3300, 1472,
     1469, 1485, 1506, 3300, 1486, 1487, 1489, 1474, 1495, 1479,
     1483, 1498, 1491, 3300, 1497, 1497, 1485, 1500, 1500, 1501,
     1506, 1494, 1491, 1502, 3300, 1504, 1507, 1505, 1514, 1496,
     1509, 1502, 1500, 1517, 1510, 1539, 3300, 1540, 1541, 1525,
     1515, 1544, 3300, 1510, 1547, 3300, 1517, 1528, 3300, 1516,
     1532, 1525, 1524, 1555, 3300, 1521, 1558, 1537, 1543, 1534,
     1536, 1538, 1549, 1550, 1542, 3300, 1551, 1549, 1552, 1549,
     1558, 1540, 1553, 1544, 1551, 1547, 1561, 1554, 1550, 1564,
     1557, 1566, 1588, 1569, 1591, 1592, 3300, 1559, 1595, 1597,

     3300, 1599, 1561, 1581, 1605, 1580, 3300, 1571, 1583, 1588,
     1575, 1591, 1592, 1579, 1579, 1595, 1594, 1618, 1591, 1588,
     1621, 1622, 1602, 1590, 1596, 1592, 1593, 1605, 1608, 1605,
     1614, 1596, 1609, 1598, 1637, 1603, 1639, 1619, 1641, 3300,
     1608, 1608, 1615, 1611, 1613, 1624, 3300, 1626, 1631, 1620,
     1655, 1656, 1657, 1658, 1642, 1632, 1640, 1626, 1643, 1640,
     1629, 1629, 1651, 1634, 1641, 1649, 1637, 1637, 1648, 3300,
     1649, 1658, 1655, 1641, 3300, 3300, 1637, 3300, 1663, 1661,
     1663, 1663, 1658, 1659, 1651, 3300, 1661, 1649, 1651, 1670,
     1665, 1663, 1667, 1668, 3300, 3300, 3300, 1676, 1661, 1664,

     3300, 1665, 1664, 3300, 1664, 1683, 1667, 1682, 1682, 1668,
     1684, 1681, 1682, 1688, 1688, 1689, 1690, 1682, 1679, 1686,
     1685, 1680, 3300, 1687, 3300, 3300, 3300, 1683, 1698, 1689,
     1690, 1697, 1702, 1708, 1705, 1697, 3300, 3300, 1689, 1700,
     1693, 3300, 1713, 1697, 1702, 1711, 1711, 1701, 1697, 1716,
     1704, 1705, 1720, 3300, 1742, 1744, 1728, 1710, 1726, 1748,
     1718, 1750, 3300, 3300, 1715, 1752, 1728, 1736, 3300, 1726,
     1726, 1737, 3300, 1759, 1739, 3300, 1729, 1735, 1744, 1744,
     1734, 1730, 1749, 1737, 1747, 1737, 1737, 3300, 1754, 1739,
     3300, 1756, 1778, 1779, 3300, 1780, 1781, 3300, 1745, 1787,

     3300, 1789, 3300, 1758, 1790, 1791, 3300, 3300, 1761, 1767,
     3300, 1767, 1771, 1780, 1765, 1771, 1787, 1787, 1805, 1770,
     1771, 1774, 1775, 1810, 1811, 1812, 1813, 1780, 1785, 1794,
     1796, 1786, 1782, 1801, 1789, 3300, 1824, 3300, 1825, 1826,
     3300, 3300, 1827, 1807, 1829, 1805, 1833, 3300, 1801, 3300,
     1803, 1839, 1840, 1842, 1843, 3300, 3300, 3300, 1803, 3300,
     1824, 1825, 1828, 1828, 3300, 1832, 3300, 3300, 1829, 1820,
     1814, 1825, 3300, 1825, 3300, 1819, 1833, 1821, 1843, 1822,
     1830, 1837, 1821, 1839, 1846, 1842, 1829, 1843, 1850, 1832,
     1843, 1851, 3300, 1842, 1857, 1848, 1847, 1856, 1878, 1851,

     1839, 3300, 1851, 1851, 3300, 3300, 1849, 1869, 3300, 3300,
     1865, 1852, 3300, 3300, 1847, 1869, 1853, 1859, 1856, 1865,
     1866, 1861, 3300, 1880, 3300, 1872, 1870, 3300, 1865, 1869,
     1866, 1885, 1879, 1881, 1889, 1889, 1886, 1883, 3300, 1909,
     3300, 1874, 1894, 1884, 1913, 3300, 1882, 1915, 3300, 1916,
     1917, 3300, 1887, 3300, 1894, 1884, 3300, 1922, 1895, 1893,
     1893, 1912, 1906, 1908, 1916, 1916, 1913, 1897, 3300, 1917,
     1907, 1919, 1909, 1940, 3300, 1941, 3300, 1942, 1943, 1947,
     3300, 1910, 1919, 1917, 3300, 3300, 3300, 1919, 1924, 1919,
     1939, 1957, 1933, 1959, 1960, 1961, 1962, 3300, 1963, 3300,

     1933, 1930, 1949, 1945, 1947, 1955, 1955, 1952, 1974, 3300,
     1975, 3300, 1976, 1977, 3300, 1947, 1979, 3300, 1950, 1961,
     3300, 1951, 3300, 1952, 1951, 1969, 1955, 3300, 1962, 1976,
     3300, 1977, 1954, 1975, 1961, 1981, 1978, 1970, 1963, 1981,
     1984, 1968, 3300, 1984, 1964, 1986, 1991, 1988, 1991, 1977,
     1982, 1978, 1979, 1998, 2016, 3300, 3300, 3300, 1997, 1988,
     3300, 1988, 3300, 3300, 1990, 1985, 1991, 3300, 3300, 2004,
     2000, 2001, 2010, 2009, 1998, 2009, 1994, 1996, 1996, 2018,
     2014, 2008, 2008, 2021, 2001, 2023, 3300, 2041, 2042, 2043,
     3300, 2014, 2027, 2016, 3300, 2011, 2013, 2013, 2035, 2034,

     2028, 2028, 2041, 3300, 2023, 2024, 2025, 2026, 2063, 3300,
     2064, 3300, 2066, 2028, 2067, 2068, 2036, 2053, 2057, 2076,
     2039, 2078, 2042, 2045, 2045, 2067, 2063, 2057, 2057, 2070,
     2088, 3300, 2059, 2053, 2061, 3300, 3300, 2067, 2071, 2069,
     3300, 2059, 2064, 2065, 2078, 2078, 2073, 3300, 3300, 2085,
     3300, 2082, 2079, 3300, 2084, 2090, 2071, 3300, 2072, 2092,
     2091, 3300, 3300, 2091, 3300, 3300, 2090, 2094, 2095, 3300,
     3300, 2086, 2078, 2097, 2094, 2098, 2101, 3300, 2089, 2106,
     2095, 2106, 2109, 2109, 2111, 2108, 2112, 3300, 2130, 3300,
     2131, 3300, 2115, 3300, 2103, 2102, 2119, 2108, 2119, 2122,

     2122, 2124, 2121, 3300, 2127, 3300, 2128, 2146, 3300, 2111,
     2148, 3300, 2149, 3300, 2121, 2152, 2126, 2138, 2124, 2141,
     2130, 2141, 2144, 2145, 2147, 2144, 2165, 2130, 2131, 2137,
     2152, 2140, 2151, 3300, 2152, 2137, 3300, 2147, 2140, 2161,
     2147, 2145, 2148, 2160, 2157, 2155, 2160, 2150, 2164, 3300,
     2151, 2163, 2172, 2170, 2174, 2176, 2176, 2178, 2166, 2160,
     2158, 2179, 2163, 2171, 2185, 2166, 2175, 2179, 2189, 2177,
     2171, 2169, 2190, 2174, 2182, 2196, 2177, 2178, 2180, 2216,
     2217, 2197, 2183, 2204, 2192, 2186, 2184, 2205, 2189, 2197,
     2211, 2229, 3300, 2195, 3300, 2201, 2195, 2203, 3300, 3300,

     2207, 2205, 2216, 2221, 2209, 3300, 2204, 3300, 2203, 3300,
     3300, 3300, 2214, 2218, 2208, 2209, 2212, 2213, 2231, 2213,
     2221, 2230, 2236, 2237, 2237, 2239, 2235, 2228, 2237, 2259,
     2241, 2232, 2241, 2248, 2249, 2249, 2251, 2247, 2240, 2245,
     2247, 2252, 2274, 3300, 2275, 2255, 2248, 2257, 2263, 2264,
     2264, 2266, 2262, 2255, 2264, 3300, 2259, 3300, 2267, 2270,
     3300, 2270, 3300, 2257, 2271, 2262, 2263, 3300, 2274, 2275,
     2276, 2278, 2263, 2269, 2280, 2273, 2274, 2275, 2273, 2277,
     2278, 2287, 3300, 2309, 3300, 3300, 2289, 2282, 2283, 2284,
     2282, 2286, 2287, 2296, 2287, 2288, 2284, 2322, 2323, 2303,

     2296, 2297, 2298, 2296, 2300, 2301, 2310, 2296, 2297, 3300,
     2317, 2315, 3300, 3300, 2319, 2307, 2338, 2304, 2320, 2321,
     2308, 2310, 2316, 2330, 2326, 2327, 2333, 2329, 2335, 2323,
     2324, 2338, 2334, 2335, 2341, 2337, 2343, 2331, 2331, 2332,
     3300, 2363, 2335, 2349, 2345, 2346, 2352, 2348, 2354, 2342,
     3300, 2356, 2337, 2340, 2355, 3300, 2376, 3300, 2342, 2362,
     2345, 3300, 2345, 2366, 2366, 2355, 2356, 2357, 2358, 2371,
     2373, 2374, 2374, 2363, 2364, 2365, 2366, 2379, 2381, 3300,
     3300, 2382, 2382, 2371, 2372, 2373, 2374, 2387, 2389, 2377,
     2376, 3300, 3300, 3300, 2379, 3300, 3300, 2392, 2382, 2395,

     2396, 2392, 2398, 2387, 2399, 2400, 2390, 2403, 2404, 2400,
     2406, 2395, 2407, 2408, 2398, 2411, 2412, 2408, 2414, 2403,
     2415, 2412, 2400, 2414, 2408, 2409, 2421, 2422, 2411, 2424,
     2414, 2415, 2416, 2417, 2429, 2430, 2419, 2432, 2422, 2423,
     2424, 2425, 2437, 2438, 2427, 2440, 2430, 2431, 2431, 2426,
     2433, 2435, 2433, 2437, 2438, 2451, 2440, 2438, 2442, 2443,
     2441, 2445, 2446, 2459, 2448, 2446, 2450, 2451, 2449, 2453,
     2454, 2467, 2456, 2454, 2458, 2471, 3300, 2457, 2458, 2471,
     2463, 2464, 2476, 2466, 2476, 2465, 2478, 3300, 2467, 2468,
     2472, 2470, 3300, 2483, 2472, 2485, 2477, 2478, 2490, 2480,

     2490, 2479, 2480, 2478, 2494, 2514, 2484, 2485, 2489, 2487,
     2519, 2501, 3300, 2502, 2503, 2495, 2505, 3300, 2506, 2527,
     2497, 2498, 2502, 2502, 2534, 2516, 2502, 2496, 2538, 2540,
     3300, 2522, 2523, 2515, 2525, 2545, 3300, 2546, 3300, 3300,
     2516, 3300, 2548, 2549, 3300, 2532, 2536, 2528, 2540, 2560,
     3300, 2561, 2542, 3300, 2563, 3300, 2564, 2567, 2537, 2569,
     2570, 3300, 2552, 2572, 3300, 2573, 2580, 2543, 2583, 2584,
     3300, 2565, 2587, 3300, 2590, 3300, 2572, 2592, 3300, 3300,
     2593, 3300, 2595, 3300, 2575, 2596, 3300, 2563, 2603, 2605,
     3300, 2606, 3300, 2607, 3300, 3300, 2621, 2624, 2627, 2630,

     2633, 2636, 2639, 2642, 2645, 2648, 2651, 2654, 2657, 2660,
     2663, 2666, 2669, 2672, 2675, 2678, 2681, 2684, 2687, 2690,
     2693, 2696, 2699, 2702, 2705, 2708, 2711, 2714, 2717, 2720,
     2723, 2726, 2729, 2732, 2735, 2738, 2741, 2744, 2747, 2750,
     2753, 2756, 2759, 2762, 2765, 2768, 2771, 2774, 2777, 2780,
     2783, 2786, 2789, 2792, 2795, 2798, 2801, 2804, 2608
    } ;

static const flex_int16_t yy_def[2660] =
    {   0,
     2596,    1, 2597, 2597, 2598, 2598, 2599, 2599, 2600, 2600,
     2601, 2601, 2602, 2602, 2603, 2603, 2604, 2604, 2605, 2605,
     2606, 2606, 2607, 2607, 2608, 2608, 2609, 2609, 2610, 2610,
     2611, 2611, 2612, 2612, 2613, 2613, 2614, 2614, 2615, 2615,
     2616, 2616, 2617, 2617, 2607, 2607, 2618, 2618, 2607,   49,
     2619, 2619, 2620, 2620, 2621, 2621, 2622, 2622, 2623, 2623,
     2624, 2624, 2625, 2625, 2626, 2626, 2607, 2607, 2627, 2627,
     2607,   71, 2628, 2628, 2629, 2629, 2630, 2630, 2631, 2631,
     2632, 2632, 2633, 2633, 2634, 2634, 2635, 2635, 2636, 2636,
     2637, 2637, 2638, 2638, 2639, 2639, 2640, 2640, 2641, 2641,

     2642, 2642, 2643, 2643, 2644, 2644, 2645, 2645, 2646, 2646,
     2607, 2607, 2607, 2607, 2647, 2647, 2648, 2648, 2649, 2649,
     2650, 2650, 2651, 2651, 2652, 2652, 2653, 2653, 2654, 2654,
     2655, 2655, 2656, 2656, 2657, 2657, 2607, 2607, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2658, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2658,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2659,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2659, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596,    0, 2596, 2596, 2596, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596
    } ;

static const flex_int16_t yy_nxt[3349] =
    {   0,
      140,  141,  142,  143,  144,  140,  140,  145,  146,  143,
      140,  147,  140,  148,  149,  140,  150,  140,  140,  151,
      152,  153,  154,  155,  156,  157,  158,  159,  140,  160,
      161,  162,  163,  164,  165,  140,  166,  167,  168,  169,
      170,  171,  140,  140,  140,  140,  140,  172,  174,  176,
      174,  176,  630,  915,  177,  178,  177,  178,  174,  202,
      916,  179,  631,  179,  203,  204,  174,  202,  174,  252,
      174,  252,  203,  204,  253,  254,  253,  254,  205,  640,
      180,  650,  180,  174,  182,  651,  205,  641,  206,  183,
      184,  174,  225,  642,  207,  255,  206,  226,  227,  652,

      256,  257,  207,  255,  228,  653,  185,  547,  256,  257,
      654,  229,  548,  549,  186,  655,  187,  174,  225,  188,
      174,  182,  728,  226,  227,  729,  183,  184,  174,  259,
      228, 1230,  174,  259,  260,  261,  702,  229,  260,  261,
      174,  262,  617,  185,  703,  262,  451,  452,  174,  270,
      618,  186,  688,  187,  271,  272,  188,  174,  190,  619,
     1231,  774,  689,  191,  192,  174,  264,  174,  270,  775,
      193,  265,  266,  271,  272,  267,  673,  194,  195,  196,
      674,  273,  174,  352,  874,  274,  323,  875,  353,  354,
      197,  324,  325,  198,  199,  200,  174,  190,  326,  719,

      273,  268,  191,  192,  274,  174,  276,  835, 1232,  193,
      720,  277,  278,  174,  264,  836,  194,  195,  196,  265,
      266,  174,  276,  267,  174,  319,  761,  277,  278,  197,
      320,  321,  198,  199,  200,  174,  209,  279,  762, 1233,
      210,  211,  212,  213,  214,  215,  216,  675,  217,  268,
      755,  218,  174,  279,  676,  756,  219,  677,  451,  452,
      322,  220, 1101,  174,  281,  221,  800,  174,  319,  282,
      283,  801,  222,  320,  321,  923,  924,  284,  174,  352,
      223,  174,  209, 1102,  353,  354,  210,  211,  212,  213,
      214,  215,  216,  643,  217,  285,  906,  218,  174,  281,

      907,  644,  219,  322,  282,  283,  645,  220,  174,  287,
      955,  221,  284,  174,  288,  289,  174,  402,  222,  461,
      462,  290,  403,  404,  956, 1066,  223,  174,  231,  291,
      285,  174,  287,  232,  233,  900,  323,  288,  289,  174,
      234,  324,  325, 1236,  290,  461,  462, 1067,  326,  174,
      328,  901,  291,  174,  328,  329,  330,  174,  347,  329,
      330,  803,  235,  348,  349,  236,  237,  174,  231, 1124,
      804,  637, 1237,  232,  233,  174,  347,  174,  381, 1125,
      234,  348,  349,  382,  383,  331,  638,  384,  639,  331,
      385,  174,  402,  350,  670,  405,  671,  403,  404,  672,

      406,  407,  235,  386, 1238,  236,  237,  174,  239,  174,
      381,  350,  408,  240,  241,  382,  383,  242,  547,  384,
      243, 1239,  385,  548,  549,  244,  174,  388,  245,  409,
      410,  246,  389,  390, 1240,  386,  391,  247,  248,  392,
      393,  647,  249,  250,  174,  239,  174,  388, 1241,  648,
      240,  241,  389,  390,  242,  649,  391,  243, 1242,  392,
      393,  550,  244,  174,  395,  245,  551,  552,  246,  396,
      397, 1243,  779,  398,  247,  248,  399,  400,  780,  249,
      250,  174,  294,  174,  395, 1244,  783,  295,  296,  396,
      397,  297,  784,  398,  298,  299,  399,  400,  405,  174,

      412,  300,  301,  406,  407,  413,  414,  302,  550,  882,
      965,  883,  415,  551,  552,  408,  174,  416, 1245,  303,
      417,  966,  470,  471,  174,  304, 1246,  305,  174,  294,
      470,  471,  409,  410,  295,  296,  656,  174,  297,  174,
      412,  298,  299,  493,  494,  413,  414, 1178,  300,  301,
      657, 1179,  415,  658,  302,  174,  430,  416,  958,  959,
      417,  431,  432, 1247,  174,  433,  303,  787,  434,  435,
      493,  494,  304,  788,  305,  174,  307,  174,  430,  174,
      473,  308,  309,  431,  432,  474,  475,  433,  310,  311,
      434,  435,  174,  437,  810,  312,  313,  476,  438,  439,

      811,  314,  440, 1248,  477,  441,  442, 1249,  174,  473,
      478,  174,  528,  315,  474,  475, 1074,  529,  530,  316,
     1226,  317,  174,  307,  174,  437,  476, 1075,  308,  309,
      438,  439, 1227,  477,  440,  310,  311,  441,  442,  478,
      174,  444,  312,  313,  961,  962,  445,  446,  314,  818,
      447,  174,  444,  448, 1250,  819,  632,  445,  446,  633,
      315,  447,  634,  635,  448,  636,  316, 1251,  317,  332,
      449,  846,  174,  454,  333,  334, 1252,  847,  455,  456,
     1253,  449,  457,  174,  528,  458,  335,  336,  337,  529,
      530,  338,  339, 1254,  340,  625,  886,  341,  887,  626,

      888,  342,  459,  627,  343,  344,  345,  174,  356,  628,
      985,  986,  357,  358,  359,  360,  361,  362,  363,  629,
      364,  174,  454,  365,  884, 1165, 1255,  455,  456, 1256,
      885,  457,  174,  532,  458,  174,  464,  366,  533,  534,
     1166,  465,  466,  174,  532,  467,  932, 1257,  933,  533,
      534,  459,  367,  174,  356, 1258, 1200, 1259,  357,  358,
      359,  360,  361,  362,  363, 1260,  364,  468,  944,  365,
      174,  464,  174,  536,  945, 1201,  465,  466,  537,  538,
      467,  174,  536,  366,  174,  540,  611,  537,  538,  612,
      541,  542, 1261, 1262, 1269,  613, 1270,  614,  367,  174,

      369,  615,  468,  616,  929,  370,  371,  930,  931,  372,
      174,  540,  373,  374, 1135, 1105,  541,  542, 1038, 1136,
      375,  174,  544, 1106, 1039,  376, 1107,  545,  546,  377,
     1275,  378,  174,  544,  787,  379,  174,  369,  545,  546,
      788, 1276,  370,  371, 1279,  810,  372,  174,  554,  373,
      374,  811, 1280,  555,  556,  818, 1173,  375,  174,  554,
      952,  819,  376, 1174,  555,  556,  377,  953,  378,  174,
      558, 1155,  379,  418,  954,  559,  560, 1156,  419,  420,
      174,  558,  174,  562, 1228,  421,  559,  560,  563,  564,
      422,  174,  562,  423, 1183,  424, 1229,  563,  564, 1234,

     1184, 1281, 1282,  425, 1235,  426,  174,  566,  427,  428,
      174,  480,  567,  568, 1287, 1081,  481,  482,  174,  566,
      483, 1288, 1283,  484,  567,  568,  569, 1082,  485, 1289,
      486,  487, 1285,  488, 1284,  174,  572, 1083,  569,  666,
      489,  573,  574,  667, 1286,  490,  668,  491,  174,  480,
      174,  572, 1290,  669,  481,  482,  573,  574,  483, 1263,
     1291,  484, 1292, 1293, 1265, 1264,  485, 1294,  486,  487,
     1266,  488, 1295,  174,  576,  174,  576, 1296,  489,  577,
      578,  577,  578,  490, 1267,  491,  174,  496, 1297, 1298,
     1268,  497,  498,  499,  500,  501,  502,  503,  608,  504,

      174,  580,  505, 1299, 1300, 1271,  581,  582,  174,  580,
      583, 1272,  620,  584,  581,  582,  506, 1301,  583, 1273,
      585,  584, 1302,  621, 1277, 1274,  622,  623,  585,  624,
     1278,  507,  174,  496, 1303, 1304, 1305,  497,  498,  499,
      500,  501,  502,  503, 1038,  504,  174,  587,  505, 1306,
     1039, 1066,  588,  589,  174,  587,  590, 1307, 1308,  591,
      588,  589,  506, 1309,  590, 1310,  592,  591,  660, 1311,
      661, 1312,  662, 1313,  592,  663,  664,  507,  174,  509,
      902, 1314, 1315,  665,  510,  511,  903, 1316,  512,  174,
      594,  892,  513,  904,  893,  595,  596,  905, 1317,  597,

      514, 1318,  598,  919,  894,  920,  921,  895,  896,  599,
      897, 1319,  922, 1320,  934,  935, 1081,  515, 1325, 1326,
     1327,  936,  516, 1328,  517,  174,  509,  937, 1082, 1329,
      938,  510,  511, 1321, 1330,  512,  174,  594, 1323,  513,
     1331,  946,  595,  596,  947, 1322,  597,  514, 1332,  598,
     1324, 1333,  948, 1334, 1335, 1336,  599,  949, 1337, 1338,
     1339, 1340,  950, 1341,  515, 1342, 1343, 1344, 1345,  516,
     1346,  517,  174,  519,  174,  601,  174,  601,  520,  521,
      602,  603,  602,  603,  604, 1347,  604,  605, 1348,  605,
     1349, 1350, 1351,  522,  606, 1352,  606, 1353,  523, 1354,

     1355, 1357,  524, 1358,  525, 1359, 1360, 1356,  526,  174,
      519, 1361, 1362, 1363, 1364,  520,  521, 1367, 1365, 1368,
     1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
      522, 1379, 1380, 1381, 1382,  523, 1366, 1383, 1384,  524,
     1385,  525, 1386, 1387, 1388,  526, 1389, 1390, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1416, 1417, 1418, 1419, 1414, 1424, 1425, 1426, 1428,
     1429, 1420, 1430, 1431, 1427, 1432, 1421, 1433, 1434, 1435,
     1442, 1436, 1437, 1443, 1444, 1445, 1438, 1422, 1415, 1423,

     1439, 1446, 1448, 1449, 1440, 1451, 1452, 1454, 1441, 1455,
     1458, 1459, 1460, 1447, 1461, 1462, 1463, 1226, 1453, 1228,
     1466, 1456, 1232, 1450, 1464, 1467, 1468, 1234, 1469, 1227,
     1470, 1229, 1235, 1465, 1471, 1472, 1473, 1457, 1474, 1475,
     1476, 1477, 1478, 1479, 1484, 1485, 1486, 1480, 1487, 1488,
     1489, 1481, 1490, 1491, 1492, 1482, 1493, 1494, 1495, 1483,
     1263, 1265, 1267, 1496, 1498, 1271, 1264, 1266, 1268, 1497,
     1273, 1272, 1499, 1500, 1277, 1502, 1274, 1503, 1504, 1501,
     1278, 1505, 1283, 1285, 1506, 1507, 1508, 1509, 1510, 1511,
     1512, 1513, 1514, 1515, 1284, 1286, 1516, 1517, 1518, 1519,

     1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
     1534, 1535, 1536, 1530, 1537, 1538, 1539, 1531, 1541, 1542,
     1543, 1532, 1321, 1323, 1544, 1533, 1545, 1546, 1540, 1547,
     1548, 1549, 1550, 1551, 1322, 1324, 1552, 1553, 1554, 1555,
     1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
     1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
     1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
     1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
     1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
     1608, 1609, 1610, 1606, 1611, 1612, 1607, 1613, 1614, 1615,

     1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1413, 1624,
     1625, 1626, 1627, 1414, 1628, 1630, 1631, 1632, 1633, 1634,
     1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
     1646, 1629, 1647, 1648, 1650, 1651, 1652, 1645, 1653, 1654,
     1655, 1446, 1656, 1449, 1658, 1659, 1452, 1649, 1660, 1455,
     1661, 1662, 1663, 1447, 1664, 1665, 1666, 1464, 1453, 1667,
     1467, 1456, 1657, 1450, 1668, 1669, 1465, 1670, 1671, 1672,
     1673, 1674, 1675, 1676, 1677, 1679, 1680, 1681, 1683, 1684,
     1685, 1686, 1678, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
     1694, 1682, 1696, 1697, 1496, 1695, 1699, 1700, 1698, 1500,

     1497, 1702, 1704, 1701, 1705, 1501, 1703, 1706, 1708, 1709,
     1710, 1711, 1707, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
     1719, 1721, 1722, 1521, 1522, 1723, 1724, 1725, 1726, 1727,
     1728, 1730, 1731, 1732, 1734, 1735, 1736, 1720, 1729, 1737,
     1739, 1740, 1742, 1539, 1743, 1744, 1745, 1733, 1746, 1747,
     1741, 1738, 1748, 1749, 1750, 1540, 1751, 1752, 1753, 1754,
     1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
     1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
     1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
     1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,

     1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
     1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
     1815, 1816, 1817, 1818, 1819, 1820, 1821, 1824, 1825, 1826,
     1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
     1837, 1838, 1822, 1839, 1840, 1823, 1656, 1842, 1843, 1844,
     1845, 1847, 1848, 1850, 1851, 1853, 1841, 1854, 1855, 1856,
     1857, 1858, 1859, 1852, 1849, 1860, 1657, 1861, 1862, 1863,
     1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
     1874, 1694, 1876, 1697, 1878, 1875, 1695, 1877, 1698, 1700,
     1879, 1702, 1880, 1706, 1882, 1701, 1703, 1881, 1707, 1883,

     1884, 1885, 1886, 1887, 1888, 1889, 1890, 1719, 1891, 1892,
     1893, 1894, 1895, 1896, 1897, 1899, 1901, 1902, 1903, 1898,
     1900, 1904, 1905, 1906, 1907, 1908, 1737, 1909, 1740, 1911,
     1913, 1914, 1916, 1919, 1912, 1917, 1910, 1741, 1738, 1920,
     1918, 1752, 1753, 1915, 1754, 1755, 1921, 1922, 1923, 1925,
     1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1924, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
     1955, 1957, 1958, 1959, 1960, 1956, 1961, 1962, 1963, 1964,
     1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,

     1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
     1985, 1840, 1986, 1987, 1988, 1845, 1989, 1848, 1990, 1851,
     1992, 1993, 1994, 1841, 1858, 1995, 1996, 1991, 1852, 1849,
     1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
     2007, 2008, 1874, 1876, 2009, 2011, 2013, 1875, 1877, 1880,
     2010, 2012, 2014, 2015, 1881, 2016, 2017, 2018, 2019, 2020,
     2021, 2022, 1895, 1896, 1897, 1899, 2023, 2024, 2025, 1898,
     1900, 2026, 2027, 2028, 2029, 2030, 1909, 1911, 2031, 1914,
     2033, 1917, 1912, 2034, 2035, 1910, 1918, 2036, 2037, 2038,
     2032, 1915, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,

     2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
     2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 1955, 2065,
     2066, 2067, 2068, 1956, 2069, 2070, 2071, 2072, 2073, 2074,
     2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
     2086, 2087, 2088, 2089, 2091, 1990, 2093, 2075, 2094, 2095,
     2096, 2097, 2098, 2099, 1991, 2090, 2092, 2100, 2101, 2102,
     2103, 2104, 2105, 2106, 2107, 2009, 2011, 2110, 2108, 2111,
     2113, 2010, 2012, 2109, 2112, 2115, 2116, 2117, 2020, 2118,
     2022, 2119, 2114, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2031, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,

     2136, 2137, 2032, 2138, 2139, 2140, 2141, 2142, 2143, 2144,
     2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154,
     2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164,
     2165, 2166, 2089, 2091, 2167, 2168, 2169, 2170, 2171, 2172,
     2173, 2174, 2175, 2176, 2090, 2092, 2177, 2178, 2108, 2179,
     2111, 2113, 2180, 2109, 2181, 2112, 2182, 2183, 2184, 2185,
     2186, 2187, 2188, 2114, 2189, 2190, 2191, 2192, 2194, 2195,
     2196, 2197, 2193, 2198, 2199, 2200, 2201, 2202, 2203, 2204,
     2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214,
     2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224,

     2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234,
     2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2181,
     2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,
     2244, 2192, 2255, 2256, 2257, 2258, 2193, 2259, 2260, 2261,
     2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271,
     2272, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282,
     2283, 2284, 2286, 2287, 2288, 2273, 2289, 2290, 2291, 2292,
     2293, 2294, 2295, 2285, 2296, 2297, 2243, 2298, 2299, 2300,
     2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2244, 2309,
     2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319,

     2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329,
     2330, 2284, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338,
     2339, 2340, 2341, 2285, 2298, 2342, 2343, 2344, 2345, 2346,
     2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356,
     2357, 2359, 2360, 2361, 2362, 2358, 2363, 2364, 2365, 2366,
     2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376,
     2377, 2378, 2379, 2380, 2381, 2342, 2382, 2383, 2384, 2385,
     2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2357, 2394,
     2395, 2396, 2397, 2358, 2398, 2399, 2400, 2401, 2402, 2403,
     2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413,

     2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423,
     2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433,
     2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443,
     2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453,
     2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463,
     2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473,
     2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483,
     2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493,
     2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503,
     2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513,

     2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523,
     2524, 2525, 2526, 2527, 2528, 2529, 2530, 2532, 2533, 2534,
     2535, 2536, 2538, 2539, 2540, 2541, 2542, 2543, 2531, 2544,
     2546, 2547, 2548, 2537, 2545, 2549, 2550, 2552, 2553, 2554,
     2555, 2551, 2530, 2557, 2558, 2559, 2560, 2536, 2561, 2563,
     2564, 2544, 2556, 2566, 2531, 2565, 2545, 2567, 2568, 2537,
     2562, 2569, 2550, 2570, 2572, 2555, 2573, 2551, 2571, 2575,
     2577, 2578, 2561, 2580, 2564, 2581, 2585, 2556, 2574, 2565,
     2582, 2576, 2583, 2579, 2562, 2586, 2570, 2584, 2588, 2573,
     2587, 2571, 2575, 2589, 2578, 2581, 2590, 2583, 2586, 2591,

     2582, 2574, 2584, 2587, 2576, 2592, 2579, 2594, 2592, 2594,
     1846, 1225, 2595, 1224, 2595, 1223, 1222, 2593, 1221, 1220,
     2593,  173,  173,  173,  175,  175,  175,  181,  181,  181,
      189,  189,  189,  201,  201,  201,  208,  208,  208,  224,
      224,  224,  230,  230,  230,  238,  238,  238,  251,  251,
      251,  174,  174,  174,  258,  258,  258,  263,  263,  263,
      269,  269,  269,  275,  275,  275,  280,  280,  280,  286,
      286,  286,  292,  292,  292,  293,  293,  293,  306,  306,
      306,  318,  318,  318,  327,  327,  327,  346,  346,  346,
      351,  351,  351,  355,  355,  355,  368,  368,  368,  380,

      380,  380,  387,  387,  387,  394,  394,  394,  401,  401,
      401,  411,  411,  411,  429,  429,  429,  436,  436,  436,
      443,  443,  443,  450,  450,  450,  453,  453,  453,  460,
      460,  460,  463,  463,  463,  469,  469,  469,  472,  472,
      472,  479,  479,  479,  492,  492,  492,  495,  495,  495,
      508,  508,  508,  518,  518,  518,  527,  527,  527,  531,
      531,  531,  535,  535,  535,  539,  539,  539,  543,  543,
      543,  553,  553,  553,  557,  557,  557,  561,  561,  561,
      565,  565,  565,  570,  570,  570,  571,  571,  571,  575,
      575,  575,  579,  579,  579,  586,  586,  586,  593,  593,

      593,  600,  600,  600,  610, 1219,  610, 1218, 1217, 1216,
     1215, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206,
     1205, 1204, 1203, 1202, 1199, 1198, 1197, 1196, 1195, 1194,
     1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1182,
     1181, 1180, 1177, 1176, 1175, 1172, 1171, 1170, 1169, 1168,
     1167, 1164, 1163, 1162, 1161, 1160, 1159, 1158, 1157, 1154,
     1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144,
     1143, 1142, 1141, 1140, 1139, 1138, 1137, 1134, 1133, 1132,
     1131, 1130, 1129, 1128, 1127, 1126, 1123, 1122, 1121, 1120,
     1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110,

     1109, 1108, 1104, 1103, 1100, 1099, 1098,  868, 1097,  866,
     1096,  864, 1095,  862,  861,  860, 1094,  858,  857,  856,
      855,  854,  853,  852,  851,  850,  849,  848, 1093, 1092,
     1091, 1090, 1089, 1088,  841, 1087, 1086,  838, 1085, 1084,
      833, 1080, 1079, 1078, 1077, 1076,  825, 1073, 1072, 1071,
      821, 1070,  817, 1069,  815, 1068,  813,  812,  809, 1065,
     1064, 1063, 1062, 1061, 1060, 1059, 1058,  799, 1057, 1056,
      796, 1055, 1054, 1053,  792,  791,  790,  789, 1052,  785,
     1051, 1050, 1049, 1048, 1047, 1046, 1045,  777, 1044, 1043,
      772,  771, 1042, 1041,  768, 1040, 1037, 1036, 1035, 1034,

     1033, 1032, 1031, 1030, 1029, 1028, 1027,  754, 1026, 1025,
      751,  750,  749, 1024, 1023,  746, 1022, 1021, 1020, 1019,
      741, 1018, 1017, 1016, 1015,  736, 1014,  734, 1013,  732,
     1012,  730, 1011, 1010, 1009,  726, 1008,  724,  723,  722,
      721, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000,  712,
      999,  998,  997,  708,  996,  706,  995,  994,  993,  992,
      991,  698,  990,  989,  988,  694,  987,  984,  983,  982,
      981,  980,  979,  685,  978,  977,  976,  975,  680,  974,
      678,  973,  972,  971,  970,  969,  968,  967,  964,  963,
      960,  957,  951,  943,  942,  941,  940,  939,  928,  927,

      926,  925,  918,  917,  914,  913,  912,  911,  910,  909,
      908,  899,  898,  891,  890,  889,  881,  880,  879,  878,
      877,  876,  873,  872,  871,  870,  607,  869,  868,  867,
      866,  865,  864,  863,  862,  861,  860,  859,  858,  857,
      856,  855,  854,  853,  852,  851,  850,  849,  848,  845,
      844,  843,  842,  841,  840,  839,  838,  837,  834,  833,
      832,  831,  830,  829,  828,  827,  826,  825,  824,  823,
      822,  821,  820,  817,  816,  815,  814,  813,  812,  809,
      808,  807,  806,  805,  802,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  790,  789,  786,  785,  782,  781,

      778,  777,  776,  773,  772,  771,  770,  769,  768,  767,
      766,  765,  764,  763,  760,  759,  758,  757,  754,  753,
      752,  751,  750,  749,  748,  747,  746,  745,  744,  743,
      742,  741,  740,  739,  738,  737,  736,  735,  734,  733,
      732,  731,  730,  727,  726,  725,  724,  723,  722,  721,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  701,  700,  699,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  659,  646,  609,
      608,  607, 2596,  174,  174,  174,  174,  174,  174,  139,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596
    } ;

static const flex_int16_t yy_chk[3349] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        6,    6,  155,  640,    5,    5,    6,    6,   11,   11,
      640,    5,  155,    6,   11,   11,   12,   12,   21,   21,
       22,   22,   12,   12,   21,   21,   22,   22,   11,  158,
        5,  162,    6,    7,    7,  162,   12,  158,   11,    7,
        7,   15,   15,  158,   11,   23,   12,   15,   15,  163,

       23,   23,   12,   24,   15,  163,    7,  111,   24,   24,
      164,   15,  111,  111,    7,  164,    7,   16,   16,    7,
        8,    8,  274,   16,   16,  274,    8,    8,   25,   25,
       16,  995,   26,   26,   25,   25,  221,   16,   26,   26,
       79,   25,  152,    8,  221,   26,   79,   79,   29,   29,
      152,    8,  196,    8,   29,   29,    8,    9,    9,  152,
      996,  366,  196,    9,    9,   27,   27,   30,   30,  366,
        9,   27,   27,   30,   30,   27,  170,    9,    9,    9,
      170,   29,   53,   53,  613,   29,   45,  613,   53,   53,
        9,   45,   45,    9,    9,    9,   10,   10,   45,  250,

       30,   27,   10,   10,   30,   31,   31,  506,  997,   10,
      250,   31,   31,   28,   28,  506,   10,   10,   10,   28,
       28,   32,   32,   28,   43,   43,  340,   32,   32,   10,
       43,   43,   10,   10,   10,   13,   13,   31,  340,  998,
       13,   13,   13,   13,   13,   13,   13,  171,   13,   28,
      335,   13,   80,   32,  171,  335,   13,  171,   80,   80,
       43,   13,  872,   33,   33,   13,  422,   44,   44,   33,
       33,  422,   13,   44,   44,  645,  645,   33,   54,   54,
       13,   14,   14,  872,   54,   54,   14,   14,   14,   14,
       14,   14,   14,  159,   14,   33,  632,   14,   34,   34,

      632,  159,   14,   44,   34,   34,  159,   14,   35,   35,
      662,   14,   34,   83,   35,   35,   65,   65,   14,   83,
       83,   35,   65,   65,  662,  808,   14,   17,   17,   35,
       34,   36,   36,   17,   17,  630,   46,   36,   36,   84,
       17,   46,   46, 1000,   36,   84,   84,  808,   46,   47,
       47,  630,   36,   48,   48,   47,   47,   51,   51,   48,
       48,  424,   17,   51,   51,   17,   17,   18,   18,  894,
      424,  157, 1001,   18,   18,   52,   52,   59,   59,  894,
       18,   52,   52,   59,   59,   47,  157,   59,  157,   48,
       59,   66,   66,   51,  169,   67,  169,   66,   66,  169,

       67,   67,   18,   59, 1002,   18,   18,   19,   19,   60,
       60,   52,   67,   19,   19,   60,   60,   19,  112,   60,
       19, 1003,   60,  112,  112,   19,   61,   61,   19,   67,
       67,   19,   61,   61, 1004,   60,   61,   19,   19,   61,
       61,  161,   19,   19,   20,   20,   62,   62, 1005,  161,
       20,   20,   62,   62,   20,  161,   62,   20, 1006,   62,
       62,  113,   20,   63,   63,   20,  113,  113,   20,   63,
       63, 1007,  376,   63,   20,   20,   63,   63,  376,   20,
       20,   39,   39,   64,   64, 1008,  379,   39,   39,   64,
       64,   39,  379,   64,   39,   39,   64,   64,   68,   69,

       69,   39,   39,   68,   68,   69,   69,   39,  114,  620,
      670,  620,   69,  114,  114,   68,   87,   69, 1009,   39,
       69,  670,   87,   87,   88,   39, 1010,   39,   40,   40,
       88,   88,   68,   68,   40,   40,  165,   93,   40,   70,
       70,   40,   40,   93,   93,   70,   70,  948,   40,   40,
      165,  948,   70,  165,   40,   73,   73,   70,  664,  664,
       70,   73,   73, 1011,   94,   73,   40,  388,   73,   73,
       94,   94,   40,  388,   40,   41,   41,   74,   74,   89,
       89,   41,   41,   74,   74,   89,   89,   74,   41,   41,
       74,   74,   75,   75,  437,   41,   41,   89,   75,   75,

      437,   41,   75, 1012,   89,   75,   75, 1013,   90,   90,
       89,  101,  101,   41,   90,   90,  826,  101,  101,   41,
      993,   41,   42,   42,   76,   76,   90,  826,   42,   42,
       76,   76,  993,   90,   76,   42,   42,   76,   76,   90,
       77,   77,   42,   42,  666,  666,   77,   77,   42,  466,
       77,   78,   78,   77, 1014,  466,  156,   78,   78,  156,
       42,   78,  156,  156,   78,  156,   42, 1015,   42,   49,
       77,  526,   81,   81,   49,   49, 1016,  526,   81,   81,
     1017,   78,   81,  102,  102,   81,   49,   49,   49,  102,
      102,   49,   49, 1018,   49,  154,  622,   49,  622,  154,

      622,   49,   81,  154,   49,   49,   49,   55,   55,  154,
      692,  692,   55,   55,   55,   55,   55,   55,   55,  154,
       55,   82,   82,   55,  621,  936, 1019,   82,   82, 1020,
      621,   82,  103,  103,   82,   85,   85,   55,  103,  103,
      936,   85,   85,  104,  104,   85,  651, 1021,  651,  104,
      104,   82,   55,   56,   56, 1022,  968, 1023,   56,   56,
       56,   56,   56,   56,   56, 1024,   56,   85,  658,   56,
       86,   86,  105,  105,  658,  968,   86,   86,  105,  105,
       86,  106,  106,   56,  107,  107,  151,  106,  106,  151,
      107,  107, 1025, 1026, 1030,  151, 1031,  151,   56,   57,

       57,  151,   86,  151,  650,   57,   57,  650,  650,   57,
      108,  108,   57,   57,  905,  875,  108,  108,  766,  905,
       57,  109,  109,  875,  766,   57,  875,  109,  109,   57,
     1034,   57,  110,  110,  787,   57,   58,   58,  110,  110,
      787, 1035,   58,   58, 1037,  810,   58,  115,  115,   58,
       58,  810, 1040,  115,  115,  818,  944,   58,  116,  116,
      661,  818,   58,  944,  116,  116,   58,  661,   58,  117,
      117,  927,   58,   71,  661,  117,  117,  927,   71,   71,
      118,  118,  119,  119,  994,   71,  118,  118,  119,  119,
       71,  120,  120,   71,  952,   71,  994,  120,  120,  999,

      952, 1041, 1042,   71,  999,   71,  121,  121,   71,   71,
       91,   91,  121,  121, 1045,  832,   91,   91,  122,  122,
       91, 1046, 1043,   91,  122,  122,  121,  832,   91, 1047,
       91,   91, 1044,   91, 1043,  125,  125,  832,  122,  168,
       91,  125,  125,  168, 1044,   91,  168,   91,   92,   92,
      126,  126, 1048,  168,   92,   92,  126,  126,   92, 1027,
     1050,   92, 1051, 1052, 1028, 1027,   92, 1053,   92,   92,
     1028,   92, 1054,  127,  127,  128,  128, 1055,   92,  127,
      127,  128,  128,   92, 1029,   92,   95,   95, 1056, 1057,
     1029,   95,   95,   95,   95,   95,   95,   95,  153,   95,

      129,  129,   95, 1058, 1059, 1032,  129,  129,  130,  130,
      129, 1032,  153,  129,  130,  130,   95, 1060,  130, 1033,
      129,  130, 1061,  153, 1036, 1033,  153,  153,  130,  153,
     1036,   95,   96,   96, 1062, 1063, 1064,   96,   96,   96,
       96,   96,   96,   96, 1038,   96,  131,  131,   96, 1065,
     1038, 1066,  131,  131,  132,  132,  131, 1067, 1068,  131,
      132,  132,   96, 1069,  132, 1070,  131,  132,  167, 1072,
      167, 1073,  167, 1074,  132,  167,  167,   96,   97,   97,
      631, 1075, 1076,  167,   97,   97,  631, 1077,   97,  133,
      133,  626,   97,  631,  626,  133,  133,  631, 1078,  133,

       97, 1079,  133,  644,  626,  644,  644,  626,  626,  133,
      626, 1080,  644, 1083,  652,  652, 1081,   97, 1086, 1087,
     1088,  652,   97, 1089,   97,   98,   98,  652, 1081, 1090,
      652,   98,   98, 1084, 1092,   98,  134,  134, 1085,   98,
     1093,  659,  134,  134,  659, 1084,  134,   98, 1094,  134,
     1085, 1095,  659, 1096, 1097, 1098,  134,  659, 1099, 1100,
     1101, 1102,  659, 1103,   98, 1104, 1105, 1106, 1107,   98,
     1109,   98,   99,   99,  135,  135,  136,  136,   99,   99,
      135,  135,  136,  136,  135, 1110,  136,  135, 1112,  136,
     1113, 1114, 1115,   99,  135, 1116,  136, 1117,   99, 1118,

     1119, 1120,   99, 1122,   99, 1123, 1124, 1119,   99,  100,
      100, 1125, 1126, 1127, 1128,  100,  100, 1130, 1129, 1131,
     1132, 1136, 1137, 1138, 1139, 1142, 1143, 1145, 1148, 1149,
      100, 1150, 1151, 1152, 1154,  100, 1129, 1155, 1158,  100,
     1159,  100, 1160, 1161, 1162,  100, 1163, 1164, 1166, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178,
     1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1190, 1195, 1196, 1197, 1198,
     1199, 1194, 1200, 1201, 1197, 1202, 1194, 1203, 1205, 1206,
     1208, 1207, 1207, 1210, 1211, 1212, 1207, 1194, 1190, 1194,

     1207, 1213, 1214, 1215, 1207, 1216, 1217, 1218, 1207, 1219,
     1220, 1221, 1222, 1213, 1223, 1224, 1225, 1226, 1217, 1228,
     1231, 1219, 1232, 1215, 1230, 1233, 1237, 1234, 1238, 1226,
     1239, 1228, 1234, 1230, 1240, 1241, 1243, 1219, 1244, 1245,
     1246, 1247, 1248, 1248, 1249, 1250, 1251, 1248, 1252, 1253,
     1255, 1248, 1256, 1257, 1259, 1248, 1260, 1261, 1262, 1248,
     1263, 1265, 1267, 1269, 1270, 1271, 1263, 1265, 1267, 1269,
     1273, 1271, 1275, 1276, 1277, 1279, 1273, 1280, 1281, 1276,
     1277, 1282, 1283, 1285, 1287, 1288, 1289, 1290, 1292, 1293,
     1294, 1295, 1296, 1297, 1283, 1285, 1298, 1299, 1300, 1301,

     1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1310,
     1312, 1313, 1314, 1310, 1315, 1316, 1317, 1310, 1318, 1319,
     1320, 1310, 1321, 1323, 1325, 1310, 1326, 1327, 1317, 1328,
     1329, 1331, 1332, 1333, 1321, 1323, 1334, 1335, 1336, 1338,
     1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349,
     1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
     1361, 1362, 1363, 1364, 1365, 1366, 1367, 1369, 1370, 1372,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1396, 1398, 1394, 1399, 1400, 1394, 1401, 1402, 1403,

     1404, 1405, 1406, 1407, 1408, 1410, 1411, 1412, 1413, 1415,
     1416, 1417, 1418, 1413, 1419, 1420, 1421, 1422, 1423, 1425,
     1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1436,
     1437, 1419, 1438, 1439, 1440, 1441, 1442, 1436, 1443, 1444,
     1445, 1446, 1448, 1449, 1450, 1451, 1452, 1439, 1454, 1455,
     1457, 1458, 1460, 1446, 1461, 1462, 1463, 1464, 1452, 1466,
     1467, 1455, 1448, 1449, 1468, 1469, 1464, 1470, 1471, 1472,
     1473, 1474, 1475, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
     1484, 1485, 1478, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
     1493, 1481, 1494, 1495, 1496, 1493, 1498, 1499, 1495, 1500,

     1496, 1502, 1503, 1499, 1504, 1500, 1502, 1505, 1506, 1508,
     1509, 1510, 1505, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1518, 1528, 1535,
     1536, 1537, 1538, 1539, 1541, 1542, 1543, 1531, 1544, 1545,
     1537, 1535, 1546, 1548, 1549, 1539, 1550, 1551, 1552, 1553,
     1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
     1564, 1565, 1566, 1567, 1568, 1569, 1571, 1572, 1573, 1574,
     1577, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1587, 1588,
     1589, 1590, 1591, 1592, 1593, 1594, 1598, 1599, 1600, 1602,

     1603, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
     1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1624,
     1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1639,
     1640, 1641, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
     1651, 1652, 1634, 1653, 1655, 1634, 1656, 1657, 1658, 1659,
     1660, 1661, 1662, 1665, 1666, 1667, 1655, 1668, 1670, 1671,
     1672, 1674, 1675, 1666, 1662, 1677, 1656, 1678, 1679, 1680,
     1681, 1682, 1683, 1684, 1685, 1686, 1687, 1689, 1690, 1692,
     1693, 1694, 1696, 1697, 1699, 1693, 1694, 1696, 1697, 1700,
     1704, 1702, 1705, 1706, 1709, 1700, 1702, 1705, 1706, 1710,

     1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
     1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1726,
     1727, 1731, 1732, 1733, 1734, 1735, 1737, 1739, 1740, 1743,
     1744, 1745, 1746, 1749, 1743, 1747, 1739, 1740, 1737, 1751,
     1747, 1752, 1753, 1745, 1754, 1755, 1759, 1761, 1762, 1763,
     1764, 1766, 1769, 1770, 1771, 1772, 1774, 1776, 1762, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
     1788, 1789, 1790, 1791, 1792, 1794, 1795, 1796, 1797, 1798,
     1799, 1800, 1801, 1803, 1804, 1799, 1807, 1808, 1811, 1812,
     1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1824, 1826,

     1827, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
     1838, 1840, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851,
     1853, 1855, 1856, 1840, 1858, 1859, 1860, 1850, 1851, 1848,
     1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1870, 1871,
     1872, 1873, 1874, 1876, 1878, 1879, 1882, 1874, 1876, 1880,
     1878, 1879, 1883, 1884, 1880, 1888, 1889, 1890, 1891, 1892,
     1893, 1894, 1895, 1896, 1897, 1899, 1901, 1902, 1903, 1897,
     1899, 1904, 1905, 1906, 1907, 1908, 1909, 1911, 1913, 1914,
     1916, 1917, 1911, 1919, 1920, 1909, 1917, 1922, 1924, 1925,
     1913, 1914, 1926, 1927, 1929, 1930, 1932, 1933, 1934, 1935,

     1936, 1937, 1938, 1939, 1940, 1941, 1942, 1944, 1945, 1946,
     1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1959,
     1960, 1962, 1965, 1955, 1966, 1967, 1970, 1971, 1972, 1973,
     1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
     1984, 1985, 1986, 1988, 1989, 1990, 1992, 1973, 1993, 1994,
     1996, 1997, 1998, 1999, 1990, 1988, 1989, 2000, 2001, 2002,
     2003, 2005, 2006, 2007, 2008, 2009, 2011, 2014, 2013, 2015,
     2016, 2009, 2011, 2013, 2015, 2017, 2018, 2019, 2020, 2021,
     2022, 2023, 2016, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 2033, 2034, 2035, 2038, 2039, 2040, 2042, 2043, 2044,

     2045, 2046, 2031, 2047, 2050, 2052, 2053, 2055, 2056, 2057,
     2059, 2060, 2061, 2064, 2067, 2068, 2069, 2072, 2073, 2074,
     2075, 2076, 2077, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
     2086, 2087, 2089, 2091, 2093, 2095, 2096, 2097, 2098, 2099,
     2100, 2101, 2102, 2103, 2089, 2091, 2105, 2107, 2108, 2110,
     2111, 2113, 2115, 2108, 2116, 2111, 2117, 2118, 2119, 2120,
     2121, 2122, 2123, 2113, 2124, 2125, 2126, 2127, 2128, 2129,
     2130, 2131, 2127, 2132, 2133, 2135, 2136, 2138, 2139, 2140,
     2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2151,
     2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,

     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
     2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
     2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
     2180, 2192, 2194, 2196, 2197, 2198, 2192, 2201, 2202, 2203,
     2204, 2205, 2207, 2209, 2213, 2214, 2215, 2216, 2217, 2218,
     2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228,
     2229, 2230, 2231, 2232, 2233, 2219, 2234, 2235, 2236, 2237,
     2238, 2239, 2240, 2230, 2241, 2242, 2243, 2245, 2246, 2247,
     2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2243, 2257,
     2259, 2260, 2262, 2264, 2265, 2266, 2267, 2269, 2270, 2271,

     2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
     2282, 2284, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294,
     2295, 2296, 2297, 2284, 2298, 2299, 2300, 2301, 2302, 2303,
     2304, 2305, 2306, 2307, 2308, 2309, 2311, 2312, 2315, 2316,
     2317, 2318, 2319, 2320, 2321, 2317, 2322, 2323, 2324, 2325,
     2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335,
     2336, 2337, 2338, 2339, 2340, 2342, 2343, 2344, 2345, 2346,
     2347, 2348, 2349, 2350, 2352, 2353, 2354, 2355, 2357, 2359,
     2360, 2361, 2363, 2357, 2364, 2365, 2366, 2367, 2368, 2369,
     2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379,

     2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391,
     2395, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406,
     2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416,
     2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426,
     2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436,
     2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446,
     2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456,
     2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466,
     2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476,
     2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487,

     2489, 2490, 2491, 2492, 2494, 2495, 2496, 2497, 2498, 2499,
     2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509,
     2510, 2511, 2512, 2514, 2515, 2516, 2517, 2519, 2506, 2520,
     2521, 2522, 2523, 2511, 2520, 2524, 2525, 2526, 2527, 2528,
     2529, 2525, 2530, 2532, 2533, 2534, 2535, 2536, 2538, 2541,
     2543, 2544, 2529, 2546, 2530, 2543, 2544, 2547, 2548, 2536,
     2538, 2549, 2550, 2552, 2553, 2555, 2557, 2550, 2552, 2558,
     2559, 2560, 2561, 2563, 2564, 2566, 2568, 2555, 2557, 2564,
     2566, 2558, 2567, 2560, 2561, 2569, 2570, 2567, 2572, 2573,
     2569, 2570, 2575, 2577, 2578, 2581, 2585, 2583, 2586, 2588,

     2581, 2573, 2583, 2586, 2575, 2589, 2578, 2590, 2592, 2594,
     2659,  992, 2590,  991, 2594,  990,  989, 2589,  988,  987,
     2592, 2597, 2597, 2597, 2598, 2598, 2598, 2599, 2599, 2599,
     2600, 2600, 2600, 2601, 2601, 2601, 2602, 2602, 2602, 2603,
     2603, 2603, 2604, 2604, 2604, 2605, 2605, 2605, 2606, 2606,
     2606, 2607, 2607, 2607, 2608, 2608, 2608, 2609, 2609, 2609,
     2610, 2610, 2610, 2611, 2611, 2611, 2612, 2612, 2612, 2613,
     2613, 2613, 2614, 2614, 2614, 2615, 2615, 2615, 2616, 2616,
     2616, 2617, 2617, 2617, 2618, 2618, 2618, 2619, 2619, 2619,
     2620, 2620, 2620, 2621, 2621, 2621, 2622, 2622, 2622, 2623,

     2623, 2623, 2624, 2624, 2624, 2625, 2625, 2625, 2626, 2626,
     2626, 2627, 2627, 2627, 2628, 2628, 2628, 2629, 2629, 2629,
     2630, 2630, 2630, 2631, 2631, 2631, 2632, 2632, 2632, 2633,
     2633, 2633, 2634, 2634, 2634, 2635, 2635, 2635, 2636, 2636,
     2636, 2637, 2637, 2637, 2638, 2638, 2638, 2639, 2639, 2639,
     2640, 2640, 2640, 2641, 2641, 2641, 2642, 2642, 2642, 2643,
     2643, 2643, 2644, 2644, 2644, 2645, 2645, 2645, 2646, 2646,
     2646, 2647, 2647, 2647, 2648, 2648, 2648, 2649, 2649, 2649,
     2650, 2650, 2650, 2651, 2651, 2651, 2652, 2652, 2652, 2653,
     2653, 2653, 2654, 2654, 2654, 2655, 2655, 2655, 2656, 2656,

     2656, 2657, 2657, 2657, 2658,  986, 2658,  985,  984,  983,
      982,  981,  980,  979,  978,  977,  976,  975,  974,  973,
      972,  971,  970,  969,  967,  966,  965,  964,  963,  962,
      961,  960,  959,  958,  957,  956,  955,  954,  953,  951,
      950,  949,  947,  946,  945,  943,  942,  941,  939,  938,
      937,  935,  934,  933,  932,  931,  930,  929,  928,  926,
      925,  923,  922,  921,  920,  919,  918,  917,  916,  915,
      914,  912,  911,  910,  908,  907,  906,  904,  903,  902,
      901,  899,  898,  897,  896,  895,  893,  892,  891,  890,
      888,  887,  886,  885,  884,  883,  882,  881,  880,  879,

      878,  877,  874,  873,  871,  870,  869,  868,  867,  866,
      865,  864,  863,  862,  861,  860,  859,  858,  857,  856,
      855,  854,  853,  852,  851,  850,  849,  848,  847,  846,
      845,  844,  843,  842,  841,  840,  839,  838,  836,  835,
      833,  831,  830,  829,  828,  827,  825,  824,  823,  822,
      821,  820,  817,  816,  815,  814,  813,  812,  809,  807,
      806,  805,  804,  803,  802,  801,  800,  799,  798,  797,
      796,  795,  794,  793,  792,  791,  790,  789,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  775,  774,
      772,  771,  770,  769,  768,  767,  765,  764,  763,  762,

      761,  760,  759,  758,  757,  756,  755,  754,  753,  752,
      751,  750,  749,  748,  747,  746,  745,  744,  743,  742,
      741,  740,  739,  738,  737,  736,  735,  734,  733,  732,
      731,  730,  729,  728,  727,  726,  725,  724,  723,  722,
      721,  720,  719,  718,  717,  716,  715,  714,  713,  712,
      711,  710,  709,  708,  707,  706,  704,  703,  702,  701,
      700,  698,  697,  696,  695,  694,  693,  691,  690,  689,
      688,  687,  686,  685,  684,  683,  682,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  668,  667,
      665,  663,  660,  657,  656,  655,  654,  653,  649,  648,

      647,  646,  642,  641,  639,  638,  637,  636,  635,  634,
      633,  629,  627,  625,  624,  623,  619,  618,  617,  616,
      615,  614,  612,  611,  609,  608,  607,  606,  601,  599,
      594,  592,  587,  585,  580,  576,  572,  569,  566,  562,
      558,  554,  550,  547,  544,  540,  536,  532,  528,  525,
      524,  523,  522,  519,  515,  514,  509,  507,  497,  496,
      491,  490,  489,  488,  487,  486,  485,  480,  478,  477,
      476,  473,  468,  464,  459,  454,  449,  444,  438,  430,
      428,  427,  426,  425,  423,  418,  417,  416,  412,  410,
      409,  408,  405,  402,  395,  389,  386,  381,  378,  377,

      375,  369,  367,  357,  356,  352,  350,  348,  347,  345,
      344,  343,  342,  341,  339,  338,  337,  336,  332,  331,
      329,  328,  324,  323,  322,  320,  319,  315,  314,  313,
      312,  307,  303,  302,  301,  300,  294,  291,  287,  285,
      281,  279,  276,  273,  270,  268,  264,  259,  255,  252,
      249,  248,  247,  246,  245,  244,  239,  237,  236,  235,
      231,  229,  225,  223,  222,  220,  219,  210,  209,  207,
      206,  205,  202,  200,  199,  198,  197,  195,  194,  190,
      188,  187,  186,  185,  182,  180,  176,  166,  160,  144,
      143,  142,  139,  124,  123,   38,   37,    4,    3, 2596,

     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "omplexer.ll"
/*
 * Copyright (c) 2018-2020, High Performance Computing Architecture and System
 * research laboratory at University of North Carolina at Charlotte (HPCAS@UNCC)
 * and Lawrence Livermore National Security, LLC.
 *
 * SPDX-License-Identifier: (BSD-3-Clause)
 */



































































	
#line 85 "omplexer.ll"

/* DQ (12/10/2016): This is a technique to suppress warnings in generated code that we want to be an error elsewhere in ROSE. 
   See https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html for more detail.
 */
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
#pragma GCC diagnostic ignored "-Wsign-compare"
#endif

/* lex requires me to use extern "C" here */
extern "C" int openmp_wrap() { return 1; }

extern int openmp_lex();
extern void * (*exprParse)(const char*);

#include <stdio.h>
#include <string>
#include <string.h>
#include "ompparser.hh"

/* Moved from Makefile.am to the source file to work with --with-pch 
Liao 12/10/2009 */
#define YY_NO_TOP_STATE
#define YY_NO_POP_STATE

static const char* ompparserinput = NULL;
static std::string current_string;
static int parenthesis_local_count=0, parenthesis_global_count = 1, bracket_count;
static int brace_count = 0;
static char current_char;

/* Liao 6/11/2010,
OpenMP does not preclude the use of clause names as regular variable names.
For example, num_threads could be a clause name or a variable in the variable list.

We introduce a flag to indicate the context: within a variable list like (a,y,y) or outside of it
  We check '(' or ')' to set it to true or false as parsing proceed */
extern bool b_within_variable_list ; /* = false; */

/* pass user specified string to buf, indicate the size using 'result', 
   and shift the current position pointer of user input afterwards 
   to prepare next round of token recognition!!
*/
#define YY_INPUT(buf, result, max_size) { \
                if (*ompparserinput == '\0') result = 0; \
                else { strncpy(buf, ompparserinput, max_size); \
                        buf[max_size] = 0; \
                        result = strlen(buf); \
                        ompparserinput += result; \
                } \
                }

#line 2433 "omplexer.cc"
#line 2434 "omplexer.cc"

#define INITIAL 0
#define EXPR_STATE 1
#define ALLOCATE_STATE 2
#define DEFAULT_STATE 3
#define IF_STATE 4
#define PROC_BIND_STATE 5
#define REDUCTION_STATE 6
#define LASTPRIVATE_STATE 7
#define LINEAR_STATE 8
#define SCHEDULE_STATE 9
#define COLLAPSE_STATE 10
#define ORDERED_STATE 11
#define ALIGNED_STATE 12
#define DIST_SCHEDULE_STATE 13
#define BIND_STATE 14
#define ALLOCATOR_STATE 15
#define INITIALIZER_STATE 16
#define MAPPER_STATE 17
#define TYPE_STR_STATE 18
#define WHEN_STATE 19
#define MATCH_STATE 20
#define ISA_STATE 21
#define SCORE_STATE 22
#define CONDITION_STATE 23
#define VENDOR_STATE 24
#define ARCH_STATE 25
#define EXTENSION_STATE 26
#define IN_REDUCTION_STATE 27
#define DEPEND_STATE 28
#define AFFINITY_STATE 29
#define AFFINITY_EXPR_STATE 30
#define AFFINITY_ITERATOR_STATE 31
#define FINAL_STATE 32
#define ATOMIC_DEFAULT_MEM_ORDER_STATE 33
#define DEVICE_STATE 34
#define DEFAULTMAP_STATE 35
#define DEPEND_ITERATOR_STATE 36
#define DEPEND_EXPR_STATE 37
#define TO_STATE 38
#define TO_MAPPER_STATE 39
#define FROM_STATE 40
#define FROM_MAPPER_STATE 41
#define USES_ALLOCATORS_STATE 42
#define ALLOC_EXPR_STATE 43
#define DEVICE_TYPE_STATE 44
#define MAP_STATE 45
#define MAP_MAPPER_STATE 46
#define TASK_REDUCTION_STATE 47
#define IMPLEMENTATION_STATE 48
#define UPDATE_STATE 49
#define PRIVATE_STATE 50
#define FIRSTPRIVATE_STATE 51
#define SIMDLEN_STATE 52
#define SAFELEN_STATE 53
#define NONTEMPORAL_STATE 54
#define SIMD_STATE 55
#define THREADPRIVATE_STATE 56
#define SHARED_STATE 57
#define COPYIN_STATE 58
#define COPYPRIVATE_STATE 59
#define ORDER_STATE 60
#define ID_EXPR_STATE 61
#define ALLOC_STATE 62
#define BROAD_STATE 63
#define SCATTER_STATE 64
#define GATHER_STATE 65
#define ALLGATHER_STATE 66
#define HALO_STATE 67
#define ALLREDUCTION_STATE 68

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 142 "omplexer.ll"


#line 2730 "omplexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2597 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3300 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 144 "omplexer.ll"
{ ; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 145 "omplexer.ll"
{ ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 146 "omplexer.ll"
{ ; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 147 "omplexer.ll"
{ return PARALLEL; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 148 "omplexer.ll"
{ return METADIRECTIVE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 149 "omplexer.ll"
{ return TASK; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 150 "omplexer.ll"
{ yy_push_state(IF_STATE); return IF; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 151 "omplexer.ll"
{ yy_push_state(SIMDLEN_STATE); return SIMDLEN; }
	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 152 "omplexer.ll"
{ yy_push_state(SIMD_STATE); return SIMD; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 153 "omplexer.ll"
{ return SIMD; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 154 "omplexer.ll"
{ return NUM_THREADS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 155 "omplexer.ll"
{ return NUM_TEAMS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 156 "omplexer.ll"
{ return THREAD_LIMIT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 157 "omplexer.ll"
{ yy_push_state(DEFAULT_STATE); return DEFAULT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 158 "omplexer.ll"
{ yy_push_state(PRIVATE_STATE); return PRIVATE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 159 "omplexer.ll"
{ yy_push_state(FIRSTPRIVATE_STATE); return FIRSTPRIVATE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 160 "omplexer.ll"
{ yy_push_state(SHARED_STATE); return SHARED; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 161 "omplexer.ll"
{ return NONE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 162 "omplexer.ll"
{ yy_push_state(REDUCTION_STATE); return REDUCTION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 163 "omplexer.ll"
{ yy_push_state(COPYIN_STATE); return COPYIN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 164 "omplexer.ll"
{ yy_push_state(PROC_BIND_STATE); return PROC_BIND; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 165 "omplexer.ll"
{ yy_push_state(ALLOCATE_STATE); return ALLOCATE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 166 "omplexer.ll"
{ return CLOSE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 167 "omplexer.ll"
{ return SPREAD; } /* master should already be recognized */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 168 "omplexer.ll"
{ return TEAMS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 169 "omplexer.ll"
{ return MASTER; } /*YAYING */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 170 "omplexer.ll"
{ return FOR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 171 "omplexer.ll"
{ return DO; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 172 "omplexer.ll"
{ yy_push_state(LASTPRIVATE_STATE); return LASTPRIVATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 173 "omplexer.ll"
{ yy_push_state(LINEAR_STATE); return LINEAR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 174 "omplexer.ll"
{ yy_push_state(SCHEDULE_STATE); return SCHEDULE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 175 "omplexer.ll"
{ yy_push_state(COLLAPSE_STATE); return COLLAPSE; }
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "omplexer.ll"
{ yy_push_state(ORDERED_STATE); return ORDERED; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 177 "omplexer.ll"
{ return ORDERED; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 178 "omplexer.ll"
{ return NOWAIT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 179 "omplexer.ll"
{ yy_push_state(ORDER_STATE); return ORDER; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 180 "omplexer.ll"
{ yy_push_state(SAFELEN_STATE); return SAFELEN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 181 "omplexer.ll"
{ yy_push_state(NONTEMPORAL_STATE); return NONTEMPORAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 182 "omplexer.ll"
{ yy_push_state(ALIGNED_STATE); return ALIGNED; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 183 "omplexer.ll"
{ return ALIGN; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 184 "omplexer.ll"
{ return DECLARE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 185 "omplexer.ll"
{ return UNIFORM; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 186 "omplexer.ll"
{ return INBRANCH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 187 "omplexer.ll"
{ return NOTINBRANCH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 188 "omplexer.ll"
{ return DISTRIBUTE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 189 "omplexer.ll"
{ yy_push_state(DIST_SCHEDULE_STATE); return DIST_SCHEDULE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 190 "omplexer.ll"
{ return LOOP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 191 "omplexer.ll"
{ yy_push_state(BIND_STATE); return BIND; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 192 "omplexer.ll"
{ return SCAN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 193 "omplexer.ll"
{ return INCLUSIVE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 194 "omplexer.ll"
{ return EXCLUSIVE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 195 "omplexer.ll"
{ return SECTIONS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 196 "omplexer.ll"
{ return SECTION; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 197 "omplexer.ll"
{ return SINGLE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 198 "omplexer.ll"
{ yy_push_state(COPYPRIVATE_STATE); return COPYPRIVATE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 199 "omplexer.ll"
{ return CANCEL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 200 "omplexer.ll"
{ return WORKSHARE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 201 "omplexer.ll"
{ return TASKGROUP; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 202 "omplexer.ll"
{ yy_push_state(ALLOCATOR_STATE); return ALLOCATOR; }
	YY_BREAK
case 60:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 13;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 203 "omplexer.ll"
{ yy_push_state(THREADPRIVATE_STATE); return THREADPRIVATE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 204 "omplexer.ll"
{ return THREADPRIVATE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 205 "omplexer.ll"
{ return CANCELLATION; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 206 "omplexer.ll"
{ return POINT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 207 "omplexer.ll"
{ return VARIANT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 208 "omplexer.ll"
{ yy_push_state(WHEN_STATE); return WHEN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 209 "omplexer.ll"
{ yy_push_state(MATCH_STATE); return MATCH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 210 "omplexer.ll"
{ yy_push_state(INITIALIZER_STATE); return INITIALIZER; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 211 "omplexer.ll"
{ yy_push_state(MAPPER_STATE); return MAPPER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 213 "omplexer.ll"
{ return END; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 214 "omplexer.ll"
{ return SCORE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 215 "omplexer.ll"
{ yy_push_state(CONDITION_STATE); return CONDITION; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 216 "omplexer.ll"
{ return KIND; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "omplexer.ll"
{ return HOST; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 218 "omplexer.ll"
{ return NOHOST; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 219 "omplexer.ll"
{ return ANY; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 220 "omplexer.ll"
{ return CPU; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 221 "omplexer.ll"
{ return GPU; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 222 "omplexer.ll"
{ return FPGA; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 223 "omplexer.ll"
{ yy_push_state(ISA_STATE); return ISA; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 224 "omplexer.ll"
{ yy_push_state(ARCH_STATE); return ARCH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 225 "omplexer.ll"
{ yy_push_state(VENDOR_STATE); return VENDOR; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 226 "omplexer.ll"
{ yy_push_state(EXTENSION_STATE); return EXTENSION; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 228 "omplexer.ll"
{ yy_push_state(FINAL_STATE); return FINAL; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 229 "omplexer.ll"
{ return UNTIED; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 230 "omplexer.ll"
{ return MERGEABLE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 231 "omplexer.ll"
{ yy_push_state(IN_REDUCTION_STATE); return IN_REDUCTION; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 232 "omplexer.ll"
{ yy_push_state(DEPEND_STATE); return DEPEND; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 233 "omplexer.ll"
{ return PRIORITY; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 234 "omplexer.ll"
{ yy_push_state(AFFINITY_STATE); return AFFINITY; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 235 "omplexer.ll"
{ return DETACH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 237 "omplexer.ll"
{ return TASKLOOP; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 238 "omplexer.ll"
{ return TASKYIELD; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 239 "omplexer.ll"
{ return GRAINSIZE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 240 "omplexer.ll"
{ return NUM_TASKS; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 241 "omplexer.ll"
{ return NOGROUP; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 243 "omplexer.ll"
{ return REQUIRES; } 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 244 "omplexer.ll"
{ return REVERSE_OFFLOAD; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 245 "omplexer.ll"
{ return UNIFIED_ADDRESS; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 246 "omplexer.ll"
{ return UNIFIED_SHARED_MEMORY; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 247 "omplexer.ll"
{ yy_push_state(ATOMIC_DEFAULT_MEM_ORDER_STATE); return ATOMIC_DEFAULT_MEM_ORDER; } 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 248 "omplexer.ll"
{ return DYNAMIC_ALLOCATORS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 249 "omplexer.ll"
{ return SEQ_CST; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 250 "omplexer.ll"
{ return ACQ_REL; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 251 "omplexer.ll"
{ return RELAXED; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 252 "omplexer.ll"
{ return TARGET; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 253 "omplexer.ll"
{ return DATA; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 254 "omplexer.ll"
{ yy_push_state(DEVICE_STATE); return DEVICE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 255 "omplexer.ll"
{ return USE_DEVICE_PTR; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 256 "omplexer.ll"
{ return USE_DEVICE_ADDR; }  
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 257 "omplexer.ll"
{ return ENTER; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 258 "omplexer.ll"
{ return EXIT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 259 "omplexer.ll"
{ return IS_DEVICE_PTR; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 260 "omplexer.ll"
{ return HAS_DEVICE_ADDR; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 261 "omplexer.ll"
{ yy_push_state(DEFAULTMAP_STATE); return DEFAULTMAP; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 262 "omplexer.ll"
{ yy_push_state(UPDATE_STATE); return UPDATE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 264 "omplexer.ll"
{ yy_push_state(TO_STATE); return TO; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 265 "omplexer.ll"
{ yy_push_state(FROM_STATE); return FROM; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 266 "omplexer.ll"
{ yy_push_state(USES_ALLOCATORS_STATE); return USES_ALLOCATORS; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 267 "omplexer.ll"
{ return LINK; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 268 "omplexer.ll"
{ yy_push_state(DEVICE_TYPE_STATE); return DEVICE_TYPE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 269 "omplexer.ll"
{ yy_push_state(MAP_STATE); return MAP; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 270 "omplexer.ll"
{ parenthesis_global_count = 0; yy_push_state(EXPR_STATE); return EXT_; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 271 "omplexer.ll"
{ return BARRIER; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 272 "omplexer.ll"
{ return TASKWAIT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 273 "omplexer.ll"
{ yy_push_state(TASK_REDUCTION_STATE); return TASK_REDUCTION; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 274 "omplexer.ll"
{ return FLUSH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 275 "omplexer.ll"
{ return RELEASE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 276 "omplexer.ll"
{ return ACQUIRE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 277 "omplexer.ll"
{ return ATOMIC; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 278 "omplexer.ll"
{ return READ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 279 "omplexer.ll"
{ return WRITE; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 280 "omplexer.ll"
{ return CAPTURE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 281 "omplexer.ll"
{ return HINT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 282 "omplexer.ll"
{ return CRITICAL; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 283 "omplexer.ll"
{ return DEPOBJ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 284 "omplexer.ll"
{ return DESTROY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 285 "omplexer.ll"
{ return THREADS; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 287 "omplexer.ll"
{ return CLUSTER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 288 "omplexer.ll"
{ return TASK_ASYNC; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 289 "omplexer.ll"
{ yy_push_state(ALLOC_STATE); return ALLOC; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 290 "omplexer.ll"
{ yy_push_state(BROAD_STATE); return BROAD; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 291 "omplexer.ll"
{ yy_push_state(SCATTER_STATE); return SCATTER; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 292 "omplexer.ll"
{ yy_push_state(GATHER_STATE); return GATHER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 293 "omplexer.ll"
{ yy_push_state(ALLGATHER_STATE); return ALLGATHER; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 294 "omplexer.ll"
{ yy_push_state(HALO_STATE); return HALO; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 295 "omplexer.ll"
{ yy_push_state(REDUCTION_STATE); return ALLREDUCTION; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 297 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 298 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 299 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 300 "omplexer.ll"
{ yy_pop_state(); return '}'; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 301 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 302 "omplexer.ll"
{ ; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 304 "omplexer.ll"
{ ; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 307 "omplexer.ll"
{ ; }
	YY_BREAK
case 155:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 309 "omplexer.ll"
{ return DEFAULT_MEM_ALLOC; }
	YY_BREAK
case 156:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 23;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 310 "omplexer.ll"
{ return LARGE_CAP_MEM_ALLOC; }
	YY_BREAK
case 157:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 311 "omplexer.ll"
{ return CONST_MEM_ALLOC; }
	YY_BREAK
case 158:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 312 "omplexer.ll"
{ return HIGH_BW_MEM_ALLOC; }
	YY_BREAK
case 159:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 313 "omplexer.ll"
{ return LOW_LAT_MEM_ALLOC; }
	YY_BREAK
case 160:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 314 "omplexer.ll"
{ return CGROUP_MEM_ALLOC; }
	YY_BREAK
case 161:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 315 "omplexer.ll"
{ return PTEAM_MEM_ALLOC; }
	YY_BREAK
case 162:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 316 "omplexer.ll"
{ return THREAD_MEM_ALLOC; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 317 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 318 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 319 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 320 "omplexer.ll"
{ ; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 321 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 323 "omplexer.ll"
{ return PARALLEL; }
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 324 "omplexer.ll"
{ return SIMD; }
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 325 "omplexer.ll"
{ return TASK; }
	YY_BREAK
case 171:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 326 "omplexer.ll"
{ return TASKLOOP; }
	YY_BREAK
case 172:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 327 "omplexer.ll"
{ return CANCEL; }
	YY_BREAK
case 173:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 328 "omplexer.ll"
{ return TARGET; }
	YY_BREAK
case 174:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 329 "omplexer.ll"
{ return DATA; }
	YY_BREAK
case 175:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 330 "omplexer.ll"
{ return ENTER; }
	YY_BREAK
case 176:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 331 "omplexer.ll"
{ return EXIT; }
	YY_BREAK
case 177:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 332 "omplexer.ll"
{ return UPDATE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 333 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 334 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 335 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 336 "omplexer.ll"
{ ; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 337 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 340 "omplexer.ll"
{ return MASTER; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 341 "omplexer.ll"
{ return CLOSE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 342 "omplexer.ll"
{ return SPREAD; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 343 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 344 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 345 "omplexer.ll"
{ ; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 346 "omplexer.ll"
{ return -1; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 348 "omplexer.ll"
{ return SHARED; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 349 "omplexer.ll"
{ return NONE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 350 "omplexer.ll"
{ return FIRSTPRIVATE; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 351 "omplexer.ll"
{ return PRIVATE; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 352 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 353 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 354 "omplexer.ll"
{ ; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 355 "omplexer.ll"
{ yy_push_state(INITIAL); unput(yytext[0]); } /* So far, only for default in metadirective meaning that a new directive is coming up. */
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 357 "omplexer.ll"
{ return CONCURRENT; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 358 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 359 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 360 "omplexer.ll"
{ ; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 361 "omplexer.ll"
{ yy_push_state(INITIAL); }
	YY_BREAK
case 203:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 363 "omplexer.ll"
{ return MODIFIER_INSCAN; }
	YY_BREAK
case 204:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 364 "omplexer.ll"
{ return MODIFIER_TASK; }
	YY_BREAK
case 205:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 365 "omplexer.ll"
{ return MODIFIER_DEFAULT; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 366 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 367 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 368 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 369 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 370 "omplexer.ll"
{ return '+'; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 371 "omplexer.ll"
{ return '-'; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 372 "omplexer.ll"
{ return '*'; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 373 "omplexer.ll"
{ return '&'; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 374 "omplexer.ll"
{ return '|'; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 375 "omplexer.ll"
{ return '^'; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 376 "omplexer.ll"
{ return LOGAND; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 377 "omplexer.ll"
{ return LOGOR; }
	YY_BREAK
case 218:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 378 "omplexer.ll"
{ return MIN; }
	YY_BREAK
case 219:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 379 "omplexer.ll"
{ return MAX; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 380 "omplexer.ll"
{ ; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 381 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 383 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return '('; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 384 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 385 "omplexer.ll"
{ ; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 387 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return '('; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 388 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 389 "omplexer.ll"
{ ; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 391 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 392 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 393 "omplexer.ll"
{ ; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 394 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 396 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 397 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 398 "omplexer.ll"
{ ; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 399 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 401 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 402 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 403 "omplexer.ll"
{ ; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 404 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 406 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 407 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 408 "omplexer.ll"
{ ; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 409 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 411 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 412 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 413 "omplexer.ll"
{ ; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 414 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 248:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 416 "omplexer.ll"
{ return MODIFIER_CONDITIONAL; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 417 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 418 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 419 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 420 "omplexer.ll"
{ ; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 421 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 423 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 424 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 256:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 425 "omplexer.ll"
{ return MODOFIER_VAL; }
	YY_BREAK
case 257:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 426 "omplexer.ll"
{ return MODOFIER_REF; }
	YY_BREAK
case 258:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 427 "omplexer.ll"
{ return MODOFIER_UVAL; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 428 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 429 "omplexer.ll"
{ ; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 430 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 433 "omplexer.ll"
{ return MODIFIER_MONOTONIC; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 434 "omplexer.ll"
{ return MODIFIER_NONMONOTONIC; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 435 "omplexer.ll"
{ return MODIFIER_SIMD; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 436 "omplexer.ll"
{ return STATIC; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 437 "omplexer.ll"
{ return DYNAMIC; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 438 "omplexer.ll"
{ return GUIDED; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 439 "omplexer.ll"
{ return AUTO; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 440 "omplexer.ll"
{ return RUNTIME; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 441 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 442 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 443 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 444 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 445 "omplexer.ll"
{ ; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 446 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 448 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 449 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 450 "omplexer.ll"
{ ; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 451 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 453 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return '('; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 454 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 455 "omplexer.ll"
{ ; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 457 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 458 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 459 "omplexer.ll"
{ ; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 460 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 462 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 463 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 464 "omplexer.ll"
{ ; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 465 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 467 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 468 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 469 "omplexer.ll"
{ ; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 470 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 472 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 473 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 474 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 475 "omplexer.ll"
{ ; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 476 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 300:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 478 "omplexer.ll"
{return STATIC; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 479 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 480 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 481 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 482 "omplexer.ll"
{ ; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 483 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 485 "omplexer.ll"
{ return TEAMS; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 486 "omplexer.ll"
{ return PARALLEL; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 487 "omplexer.ll"
{ return THREAD; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 488 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 489 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 490 "omplexer.ll"
{ ; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 491 "omplexer.ll"
{ return -1; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 493 "omplexer.ll"
{ return DEFAULT_MEM_ALLOC; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 494 "omplexer.ll"
{ return LARGE_CAP_MEM_ALLOC; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 495 "omplexer.ll"
{ return CONST_MEM_ALLOC; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 496 "omplexer.ll"
{ return HIGH_BW_MEM_ALLOC; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 497 "omplexer.ll"
{ return LOW_LAT_MEM_ALLOC; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 498 "omplexer.ll"
{ return CGROUP_MEM_ALLOC; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 499 "omplexer.ll"
{ return PTEAM_MEM_ALLOC; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 500 "omplexer.ll"
{ return THREAD_MEM_ALLOC; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 501 "omplexer.ll"
{ ; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 502 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 503 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 504 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 506 "omplexer.ll"
{ return OMP_PRIV; }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 507 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 508 "omplexer.ll"
{ ; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 509 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 510 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 511 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 513 "omplexer.ll"
{ return IDENTIFIER_DEFAULT; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 514 "omplexer.ll"
{ yy_push_state(ID_EXPR_STATE); return ':'; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 515 "omplexer.ll"
{ ; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 516 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 517 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 518 "omplexer.ll"
{ yy_push_state(ID_EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 520 "omplexer.ll"
{ current_char = yytext[0];
                                            switch (current_char) {
                                                case '(': {
                                                    parenthesis_local_count++;
                                                    parenthesis_global_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ')': {
                                                    parenthesis_local_count--;
                                                    parenthesis_global_count--;
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput(')');
                                                            parenthesis_local_count = 0;
                                                            parenthesis_global_count = 1;
                                                            bracket_count = 0;
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ' ': {
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                default: {
                                                    if (current_char != ' ' || parenthesis_local_count != 0) {
                                                        current_string.append(1, current_char);
                                                    }
                                                }
                                            }
                                        }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 563 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 564 "omplexer.ll"
{ yy_push_state(INITIAL); return ':'; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 565 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 566 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 567 "omplexer.ll"
{ yy_push_state(INITIAL); return '{'; } /* now parsrsing enters to pass a full construct, directive, condition, etc */
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 568 "omplexer.ll"
{ return '}'; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 569 "omplexer.ll"
{ ; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 570 "omplexer.ll"
{ return USER; }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 571 "omplexer.ll"
{ return CONSTRUCT; }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 572 "omplexer.ll"
{ return DEVICE; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 573 "omplexer.ll"
{ yy_push_state(IMPLEMENTATION_STATE); return IMPLEMENTATION; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 574 "omplexer.ll"
{ ; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 575 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 577 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 578 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 579 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 580 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 581 "omplexer.ll"
{ brace_count++; return '{'; }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 582 "omplexer.ll"
{ yy_pop_state(); return '}'; }
	YY_BREAK
case 357:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 583 "omplexer.ll"
{ yy_push_state(VENDOR_STATE); return VENDOR; }
	YY_BREAK
case 358:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 584 "omplexer.ll"
{ yy_push_state(EXTENSION_STATE); return EXTENSION; }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 585 "omplexer.ll"
{ ; }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 586 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 588 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 589 "omplexer.ll"
{ yy_push_state(INITIAL); return ':'; }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 590 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 591 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 592 "omplexer.ll"
{ yy_push_state(INITIAL); return '{'; } /* now parsing enters to pass a full construct, directive, condition, etc */
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 593 "omplexer.ll"
{ return '}'; }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 594 "omplexer.ll"
{ return USER; }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 595 "omplexer.ll"
{ return CONSTRUCT; }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 596 "omplexer.ll"
{ return DEVICE; }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 597 "omplexer.ll"
{ yy_push_state(IMPLEMENTATION_STATE); return IMPLEMENTATION; }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 598 "omplexer.ll"
{ ; }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 599 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 373:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 601 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 602 "omplexer.ll"
{ parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 603 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 604 "omplexer.ll"
{ ; }
	YY_BREAK
case 377:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 605 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 606 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 379:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 608 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 609 "omplexer.ll"
{ parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 610 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 611 "omplexer.ll"
{ ; }
	YY_BREAK
case 383:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 612 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 613 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 615 "omplexer.ll"
{ yy_push_state(EXPR_STATE); parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 616 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 617 "omplexer.ll"
{ yy_pop_state(); parenthesis_global_count = 1; return ':'; }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 618 "omplexer.ll"
{ ; }
	YY_BREAK
case 389:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 620 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 621 "omplexer.ll"
{ parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 622 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 623 "omplexer.ll"
{ ; }
	YY_BREAK
case 393:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 624 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 625 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 627 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 628 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 629 "omplexer.ll"
{ ; }
	YY_BREAK
case 398:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 630 "omplexer.ll"
{ return AMD; }
	YY_BREAK
case 399:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 631 "omplexer.ll"
{ return ARM; }
	YY_BREAK
case 400:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 632 "omplexer.ll"
{ return BSC; }
	YY_BREAK
case 401:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 633 "omplexer.ll"
{ return CRAY; }
	YY_BREAK
case 402:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 634 "omplexer.ll"
{ return FUJITSU; }
	YY_BREAK
case 403:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 635 "omplexer.ll"
{ return GNU; }
	YY_BREAK
case 404:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 636 "omplexer.ll"
{ return IBM; }
	YY_BREAK
case 405:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 637 "omplexer.ll"
{ return INTEL; }
	YY_BREAK
case 406:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 638 "omplexer.ll"
{ return LLVM; }
	YY_BREAK
case 407:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 639 "omplexer.ll"
{ return PGI; }
	YY_BREAK
case 408:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 640 "omplexer.ll"
{ return TI; }
	YY_BREAK
case 409:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 641 "omplexer.ll"
{ return UNKNOWN; }
	YY_BREAK
case 410:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 642 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 644 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 645 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 646 "omplexer.ll"
{ ; }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 647 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 649 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 650 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 651 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 652 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 653 "omplexer.ll"
{ return '+'; }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 654 "omplexer.ll"
{ return '-'; }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 655 "omplexer.ll"
{ return '*'; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 656 "omplexer.ll"
{ return '&'; }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 657 "omplexer.ll"
{ return '|'; }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 658 "omplexer.ll"
{ return '^'; }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 659 "omplexer.ll"
{ return LOGAND; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 660 "omplexer.ll"
{ return LOGOR; }
	YY_BREAK
case 427:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 661 "omplexer.ll"
{ return MIN; }
	YY_BREAK
case 428:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 662 "omplexer.ll"
{ return MAX; }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 663 "omplexer.ll"
{ ; }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 664 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 666 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 667 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 668 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 669 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 670 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return ':'; }
	YY_BREAK
case 436:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 671 "omplexer.ll"
{ current_string.clear(); yy_push_state(DEPEND_ITERATOR_STATE);return MODIFIER_ITERATOR; }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 673 "omplexer.ll"
{ return IN; }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 674 "omplexer.ll"
{ return OUT; }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 675 "omplexer.ll"
{ return INOUT; }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 676 "omplexer.ll"
{ return MUTEXINOUTSET; }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 677 "omplexer.ll"
{ return DEPOBJ; }
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 678 "omplexer.ll"
{ return SOURCE; }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 679 "omplexer.ll"
{ return SINK; }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 680 "omplexer.ll"
{ ; }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 681 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 683 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 684 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 685 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 686 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 687 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 688 "omplexer.ll"
{ ; }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 689 "omplexer.ll"
{ yy_push_state(DEPEND_EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 691 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 692 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(')'); return EXPR_STRING; }
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 693 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(','); return EXPR_STRING; } 
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 694 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); return EXPR_STRING; }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 695 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput('='); return EXPR_STRING; }   
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 696 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(':'); return EXPR_STRING; }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 697 "omplexer.ll"
{ current_string += yytext[0]; }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 699 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 700 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 701 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 702 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 464:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 703 "omplexer.ll"
{ current_string.clear(); yy_push_state(AFFINITY_ITERATOR_STATE);return MODIFIER_ITERATOR; }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 704 "omplexer.ll"
{ ; }
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 705 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 707 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 708 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(')'); return EXPR_STRING; }
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 709 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); return EXPR_STRING; }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 710 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(','); return EXPR_STRING; }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 711 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput('='); return EXPR_STRING; } 
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 712 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(':'); return EXPR_STRING; }
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 713 "omplexer.ll"
{ current_string += yytext[0]; }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 715 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 716 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 717 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 718 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 719 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 720 "omplexer.ll"
{ ; }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 721 "omplexer.ll"
{ yy_push_state(AFFINITY_EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 723 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 724 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 725 "omplexer.ll"
{ ; }
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 726 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 728 "omplexer.ll"
{ return SEQ_CST; }
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 729 "omplexer.ll"
{ return ACQ_REL; }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 730 "omplexer.ll"
{ return RELAXED; }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 731 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 732 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 733 "omplexer.ll"
{ ; }
	YY_BREAK
case 491:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 735 "omplexer.ll"
{ return ANCESTOR; }
	YY_BREAK
case 492:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 736 "omplexer.ll"
{ return DEVICE_NUM; }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 737 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 738 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 739 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 740 "omplexer.ll"
{ ; }
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 741 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 498:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 743 "omplexer.ll"
{ return BEHAVIOR_ALLOC; }
	YY_BREAK
case 499:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 744 "omplexer.ll"
{ return BEHAVIOR_TO; }
	YY_BREAK
case 500:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 745 "omplexer.ll"
{ return BEHAVIOR_FROM; }
	YY_BREAK
case 501:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 746 "omplexer.ll"
{ return BEHAVIOR_TOFROM; }
	YY_BREAK
case 502:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 747 "omplexer.ll"
{ return BEHAVIOR_FIRSTPRIVATE; }
	YY_BREAK
case 503:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 748 "omplexer.ll"
{ return BEHAVIOR_NONE; }
	YY_BREAK
case 504:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 749 "omplexer.ll"
{ return BEHAVIOR_DEFAULT; }
	YY_BREAK
case 505:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 750 "omplexer.ll"
{ return CATEGORY_SCALAR; }
	YY_BREAK
case 506:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 751 "omplexer.ll"
{ return CATEGORY_AGGREGATE; }
	YY_BREAK
case 507:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 752 "omplexer.ll"
{ return CATEGORY_POINTER; }
	YY_BREAK
case 508:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 753 "omplexer.ll"
{ return CATEGORY_ALLOCATABLE; }
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 754 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 755 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 756 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 757 "omplexer.ll"
{ ; }
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 759 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 760 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 761 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 762 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 517:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 763 "omplexer.ll"
{ current_string.clear(); yy_push_state(TO_MAPPER_STATE);return TO_MAPPER; }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 764 "omplexer.ll"
{ ; }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 765 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 768 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 769 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 770 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 772 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 773 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 774 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 775 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 527:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 776 "omplexer.ll"
{ current_string.clear(); yy_push_state(FROM_MAPPER_STATE);return FROM_MAPPER; }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 777 "omplexer.ll"
{ ; }
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 778 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 780 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 781 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 782 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 784 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 785 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 535:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 786 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 787 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 537:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 788 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return DEFAULT_MEM_ALLOC; }
	YY_BREAK
case 538:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 23;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 789 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return LARGE_CAP_MEM_ALLOC; }
	YY_BREAK
case 539:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 790 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return CONST_MEM_ALLOC; }
	YY_BREAK
case 540:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 791 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return HIGH_BW_MEM_ALLOC; }
	YY_BREAK
case 541:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 792 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return LOW_LAT_MEM_ALLOC; }
	YY_BREAK
case 542:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 793 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return CGROUP_MEM_ALLOC; }
	YY_BREAK
case 543:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 794 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return PTEAM_MEM_ALLOC; }
	YY_BREAK
case 544:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 795 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return THREAD_MEM_ALLOC; }
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 796 "omplexer.ll"
{ ; }
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 797 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 799 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 800 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(')'); return EXPR_STRING; }
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 801 "omplexer.ll"
{ current_string += yytext[0]; }
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 804 "omplexer.ll"
{ return HOST; }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 805 "omplexer.ll"
{ return NOHOST; }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 806 "omplexer.ll"
{ return ANY; }
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 807 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 808 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 809 "omplexer.ll"
{ ; }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 810 "omplexer.ll"
{ yy_push_state(INITIAL); unput(yytext[0]); } 
	YY_BREAK
case 557:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 812 "omplexer.ll"
{ return MAP_MODIFIER_ALWAYS; }
	YY_BREAK
case 558:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 813 "omplexer.ll"
{ return MAP_MODIFIER_CLOSE; }
	YY_BREAK
case 559:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 814 "omplexer.ll"
{ current_string.clear(); yy_push_state(MAP_MAPPER_STATE);return MAP_MODIFIER_MAPPER; }
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 815 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 816 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 817 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 818 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 564:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 819 "omplexer.ll"
{ return MAP_TYPE_TO; }
	YY_BREAK
case 565:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 820 "omplexer.ll"
{ return MAP_TYPE_FROM; }
	YY_BREAK
case 566:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 821 "omplexer.ll"
{ return MAP_TYPE_TOFROM; }
	YY_BREAK
case 567:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 822 "omplexer.ll"
{ return MAP_TYPE_ALLOC; }
	YY_BREAK
case 568:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 823 "omplexer.ll"
{ return MAP_TYPE_RELEASE; }
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 824 "omplexer.ll"
{ return MAP_TYPE_DELETE; }
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 825 "omplexer.ll"
{ ; }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 826 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 828 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 829 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 830 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 832 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 833 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 834 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 835 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 836 "omplexer.ll"
{ return '+'; }
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 837 "omplexer.ll"
{ return '-'; }
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 838 "omplexer.ll"
{ return '*'; }
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 839 "omplexer.ll"
{ return '&'; }
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 840 "omplexer.ll"
{ return '|'; }
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 841 "omplexer.ll"
{ return '^'; }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 842 "omplexer.ll"
{ return LOGAND; }
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 843 "omplexer.ll"
{ return LOGOR; }
	YY_BREAK
case 587:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 844 "omplexer.ll"
{ return MIN; }
	YY_BREAK
case 588:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 845 "omplexer.ll"
{ return MAX; }
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 846 "omplexer.ll"
{ ; }
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 847 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 849 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 850 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 851 "omplexer.ll"
{ return SOURCE; }
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 852 "omplexer.ll"
{ return IN; }
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 853 "omplexer.ll"
{ return OUT; }
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 854 "omplexer.ll"
{ return INOUT; }
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 855 "omplexer.ll"
{ return MUTEXINOUTSET; }
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 856 "omplexer.ll"
{ return DEPOBJ; }
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 857 "omplexer.ll"
{ return SINK; }
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 858 "omplexer.ll"
{ ; }
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 859 "omplexer.ll"
{ yy_pop_state(); unput(yytext[0]); }
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 861 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 603:
YY_RULE_SETUP
#line 862 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 863 "omplexer.ll"
{ ; }
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 864 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 866 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 867 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 868 "omplexer.ll"
{ ; }
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 869 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 871 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 872 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 612:
YY_RULE_SETUP
#line 873 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 874 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 875 "omplexer.ll"
{ ; }
	YY_BREAK
case 615:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 876 "omplexer.ll"
{ return CHUNK; }
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 877 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 617:
YY_RULE_SETUP
#line 879 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 880 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 881 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 882 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 883 "omplexer.ll"
{ ; }
	YY_BREAK
case 622:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 884 "omplexer.ll"
{return CHUNK; }
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 885 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 887 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 888 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 626:
YY_RULE_SETUP
#line 889 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 890 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 891 "omplexer.ll"
{ ; }
	YY_BREAK
case 629:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 892 "omplexer.ll"
{return CHUNK; }
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 893 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 895 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 896 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 633:
YY_RULE_SETUP
#line 897 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 634:
YY_RULE_SETUP
#line 898 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 635:
YY_RULE_SETUP
#line 899 "omplexer.ll"
{ ; }
	YY_BREAK
case 636:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 900 "omplexer.ll"
{return CHUNK; }
	YY_BREAK
case 637:
YY_RULE_SETUP
#line 901 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 905 "omplexer.ll"
{ current_char = yytext[0];
                                            switch (current_char) {
                                                case '\n': {
                                                    break;
                                                }
                                                case '(': {
                                                    parenthesis_local_count++;
                                                    parenthesis_global_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ')': {
                                                    parenthesis_local_count--;
                                                    parenthesis_global_count--;
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput(')');
                                                            parenthesis_local_count = 0;
                                                            parenthesis_global_count = 1;
                                                            bracket_count = 0;
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ',': {
                                                    if (current_string.size() == 0) {
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return ',';
                                                    }
                                                    else if (parenthesis_local_count == 0) {
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        unput(',');
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case '[': {
                                                    bracket_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ']': {
                                                    bracket_count--;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case '{': {
                                                    brace_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case '}': {
                                                    brace_count--;
                                                    if (brace_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput('}');
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            unput('}');
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ':': {
                                                    if (current_string.size() == 0) {
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return ':';
                                                    }
                                                    else if (bracket_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        unput(':');
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    }
                                                    break;
                                                }
                                                case ' ': {
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    };
                                                    break;
                                                }
                                                default: {
                                                    if (current_char != ' ' || parenthesis_local_count != 0) {
                                                        current_string.append(1, current_char);
                                                    }
                                                }
                                            }
                                        }
	YY_BREAK
case 639:
YY_RULE_SETUP
#line 1036 "omplexer.ll"
{ current_char = yytext[0];
                                            switch (current_char) {
                                                case '(': {
                                                    parenthesis_local_count++;
                                                    parenthesis_global_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ')': {
                                                    parenthesis_local_count--;
                                                    parenthesis_global_count--;
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput(')');
                                                            parenthesis_local_count = 0;
                                                            parenthesis_global_count = 1;
                                                            bracket_count = 0;
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ':': {
                                                    if (current_string.size() == 0) {
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return ':';
                                                    }
                                                    else if (bracket_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        unput(':');
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    }
                                                    break;
                                                }
                                                case ' ': {
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    }
                                                    break;
                                                }
                                                default: {
                                                    if (current_char != ' ' || parenthesis_local_count != 0) {
                                                        current_string.append(1, current_char);
                                                    }
                                                }
                                            }
                                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(EXPR_STATE):
case YY_STATE_EOF(ALLOCATE_STATE):
case YY_STATE_EOF(DEFAULT_STATE):
case YY_STATE_EOF(IF_STATE):
case YY_STATE_EOF(PROC_BIND_STATE):
case YY_STATE_EOF(REDUCTION_STATE):
case YY_STATE_EOF(LASTPRIVATE_STATE):
case YY_STATE_EOF(LINEAR_STATE):
case YY_STATE_EOF(SCHEDULE_STATE):
case YY_STATE_EOF(COLLAPSE_STATE):
case YY_STATE_EOF(ORDERED_STATE):
case YY_STATE_EOF(ALIGNED_STATE):
case YY_STATE_EOF(DIST_SCHEDULE_STATE):
case YY_STATE_EOF(BIND_STATE):
case YY_STATE_EOF(ALLOCATOR_STATE):
case YY_STATE_EOF(INITIALIZER_STATE):
case YY_STATE_EOF(MAPPER_STATE):
case YY_STATE_EOF(TYPE_STR_STATE):
case YY_STATE_EOF(WHEN_STATE):
case YY_STATE_EOF(MATCH_STATE):
case YY_STATE_EOF(ISA_STATE):
case YY_STATE_EOF(SCORE_STATE):
case YY_STATE_EOF(CONDITION_STATE):
case YY_STATE_EOF(VENDOR_STATE):
case YY_STATE_EOF(ARCH_STATE):
case YY_STATE_EOF(EXTENSION_STATE):
case YY_STATE_EOF(IN_REDUCTION_STATE):
case YY_STATE_EOF(DEPEND_STATE):
case YY_STATE_EOF(AFFINITY_STATE):
case YY_STATE_EOF(AFFINITY_EXPR_STATE):
case YY_STATE_EOF(AFFINITY_ITERATOR_STATE):
case YY_STATE_EOF(FINAL_STATE):
case YY_STATE_EOF(ATOMIC_DEFAULT_MEM_ORDER_STATE):
case YY_STATE_EOF(DEVICE_STATE):
case YY_STATE_EOF(DEFAULTMAP_STATE):
case YY_STATE_EOF(DEPEND_ITERATOR_STATE):
case YY_STATE_EOF(DEPEND_EXPR_STATE):
case YY_STATE_EOF(TO_STATE):
case YY_STATE_EOF(TO_MAPPER_STATE):
case YY_STATE_EOF(FROM_STATE):
case YY_STATE_EOF(FROM_MAPPER_STATE):
case YY_STATE_EOF(USES_ALLOCATORS_STATE):
case YY_STATE_EOF(ALLOC_EXPR_STATE):
case YY_STATE_EOF(DEVICE_TYPE_STATE):
case YY_STATE_EOF(MAP_STATE):
case YY_STATE_EOF(MAP_MAPPER_STATE):
case YY_STATE_EOF(TASK_REDUCTION_STATE):
case YY_STATE_EOF(IMPLEMENTATION_STATE):
case YY_STATE_EOF(UPDATE_STATE):
case YY_STATE_EOF(PRIVATE_STATE):
case YY_STATE_EOF(FIRSTPRIVATE_STATE):
case YY_STATE_EOF(SIMDLEN_STATE):
case YY_STATE_EOF(SAFELEN_STATE):
case YY_STATE_EOF(NONTEMPORAL_STATE):
case YY_STATE_EOF(SIMD_STATE):
case YY_STATE_EOF(THREADPRIVATE_STATE):
case YY_STATE_EOF(SHARED_STATE):
case YY_STATE_EOF(COPYIN_STATE):
case YY_STATE_EOF(COPYPRIVATE_STATE):
case YY_STATE_EOF(ORDER_STATE):
case YY_STATE_EOF(ID_EXPR_STATE):
case YY_STATE_EOF(ALLOC_STATE):
case YY_STATE_EOF(BROAD_STATE):
case YY_STATE_EOF(SCATTER_STATE):
case YY_STATE_EOF(GATHER_STATE):
case YY_STATE_EOF(ALLGATHER_STATE):
case YY_STATE_EOF(HALO_STATE):
case YY_STATE_EOF(ALLREDUCTION_STATE):
#line 1112 "omplexer.ll"
{ if (current_string.size() != 0) {
                      openmp_lval.stype = strdup(current_string.c_str());
                      current_string.clear();
                      parenthesis_local_count = 0;
                      parenthesis_global_count = 1;
                      bracket_count = 0;
                      return EXPR_STRING;
                  }
                  else {
                      return 0;
                  };
                }
	YY_BREAK
case 640:
YY_RULE_SETUP
#line 1125 "omplexer.ll"
{return (EXPRESSION); }
	YY_BREAK
case 641:
YY_RULE_SETUP
#line 1127 "omplexer.ll"
;
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 1128 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 643:
YY_RULE_SETUP
#line 1130 "omplexer.ll"
ECHO;
	YY_BREAK
#line 6613 "omplexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2597 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2597 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2596);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1130 "omplexer.ll"



/* yy_push_state can't be called outside of this file, provide a wrapper */
extern void openmp_parse_expr() {
        yy_push_state(EXPR_STATE);
}

/* entry point invoked by callers to start scanning for a string */
extern void openmp_lexer_init(const char* str) {
  ompparserinput = str;
  /* We have openmp_ suffix for all flex functions */
  openmp_restart(openmp_in);
}


/* Standalone ompparser */
void start_lexer(const char* input) {
    yy_scan_string(input);
}

void end_lexer(void) {
    // If the lexer exited due to some error, the condition stack could be nonempty.
    // In this case, it has to be reset to the initial state manually, where yy_start_stack_ptr == 0.
    while (yy_start_stack_ptr > 0) {
        yy_pop_state();
    };
    yy_delete_buffer(YY_CURRENT_BUFFER);
}


