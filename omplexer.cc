#line 2 "omplexer.cc"

#line 4 "omplexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer openmp__create_buffer
#define yy_delete_buffer openmp__delete_buffer
#define yy_scan_buffer openmp__scan_buffer
#define yy_scan_string openmp__scan_string
#define yy_scan_bytes openmp__scan_bytes
#define yy_init_buffer openmp__init_buffer
#define yy_flush_buffer openmp__flush_buffer
#define yy_load_buffer_state openmp__load_buffer_state
#define yy_switch_to_buffer openmp__switch_to_buffer
#define yypush_buffer_state openmp_push_buffer_state
#define yypop_buffer_state openmp_pop_buffer_state
#define yyensure_buffer_stack openmp_ensure_buffer_stack
#define yy_flex_debug openmp__flex_debug
#define yyin openmp_in
#define yyleng openmp_leng
#define yylex openmp_lex
#define yylineno openmp_lineno
#define yyout openmp_out
#define yyrestart openmp_restart
#define yytext openmp_text
#define yywrap openmp_wrap
#define yyalloc openmp_alloc
#define yyrealloc openmp_realloc
#define yyfree openmp_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define openmp__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer openmp__create_buffer
#endif

#ifdef yy_delete_buffer
#define openmp__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer openmp__delete_buffer
#endif

#ifdef yy_scan_buffer
#define openmp__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer openmp__scan_buffer
#endif

#ifdef yy_scan_string
#define openmp__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string openmp__scan_string
#endif

#ifdef yy_scan_bytes
#define openmp__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes openmp__scan_bytes
#endif

#ifdef yy_init_buffer
#define openmp__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer openmp__init_buffer
#endif

#ifdef yy_flush_buffer
#define openmp__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer openmp__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define openmp__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state openmp__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define openmp__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer openmp__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define openmp_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state openmp_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define openmp_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state openmp_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define openmp_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack openmp_ensure_buffer_stack
#endif

#ifdef yylex
#define openmp_lex_ALREADY_DEFINED
#else
#define yylex openmp_lex
#endif

#ifdef yyrestart
#define openmp_restart_ALREADY_DEFINED
#else
#define yyrestart openmp_restart
#endif

#ifdef yylex_init
#define openmp_lex_init_ALREADY_DEFINED
#else
#define yylex_init openmp_lex_init
#endif

#ifdef yylex_init_extra
#define openmp_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra openmp_lex_init_extra
#endif

#ifdef yylex_destroy
#define openmp_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy openmp_lex_destroy
#endif

#ifdef yyget_debug
#define openmp_get_debug_ALREADY_DEFINED
#else
#define yyget_debug openmp_get_debug
#endif

#ifdef yyset_debug
#define openmp_set_debug_ALREADY_DEFINED
#else
#define yyset_debug openmp_set_debug
#endif

#ifdef yyget_extra
#define openmp_get_extra_ALREADY_DEFINED
#else
#define yyget_extra openmp_get_extra
#endif

#ifdef yyset_extra
#define openmp_set_extra_ALREADY_DEFINED
#else
#define yyset_extra openmp_set_extra
#endif

#ifdef yyget_in
#define openmp_get_in_ALREADY_DEFINED
#else
#define yyget_in openmp_get_in
#endif

#ifdef yyset_in
#define openmp_set_in_ALREADY_DEFINED
#else
#define yyset_in openmp_set_in
#endif

#ifdef yyget_out
#define openmp_get_out_ALREADY_DEFINED
#else
#define yyget_out openmp_get_out
#endif

#ifdef yyset_out
#define openmp_set_out_ALREADY_DEFINED
#else
#define yyset_out openmp_set_out
#endif

#ifdef yyget_leng
#define openmp_get_leng_ALREADY_DEFINED
#else
#define yyget_leng openmp_get_leng
#endif

#ifdef yyget_text
#define openmp_get_text_ALREADY_DEFINED
#else
#define yyget_text openmp_get_text
#endif

#ifdef yyget_lineno
#define openmp_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno openmp_get_lineno
#endif

#ifdef yyset_lineno
#define openmp_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno openmp_set_lineno
#endif

#ifdef yywrap
#define openmp_wrap_ALREADY_DEFINED
#else
#define yywrap openmp_wrap
#endif

#ifdef yyalloc
#define openmp_alloc_ALREADY_DEFINED
#else
#define yyalloc openmp_alloc
#endif

#ifdef yyrealloc
#define openmp_realloc_ALREADY_DEFINED
#else
#define yyrealloc openmp_realloc
#endif

#ifdef yyfree
#define openmp_free_ALREADY_DEFINED
#else
#define yyfree openmp_free
#endif

#ifdef yytext
#define openmp_text_ALREADY_DEFINED
#else
#define yytext openmp_text
#endif

#ifdef yyleng
#define openmp_leng_ALREADY_DEFINED
#else
#define yyleng openmp_leng
#endif

#ifdef yyin
#define openmp_in_ALREADY_DEFINED
#else
#define yyin openmp_in
#endif

#ifdef yyout
#define openmp_out_ALREADY_DEFINED
#else
#define yyout openmp_out
#endif

#ifdef yy_flex_debug
#define openmp__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug openmp__flex_debug
#endif

#ifdef yylineno
#define openmp_lineno_ALREADY_DEFINED
#else
#define yylineno openmp_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 643
#define YY_END_OF_BUFFER 644
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2595] =
    {   0,
      641,  641,    0,    0,  166,  166,  196,  196,  181,  181,
      188,  188,  220,  220,  252,  252,  260,  260,  274,  274,
      278,  278,  282,  282,  298,  298,  304,  304,  311,  311,
      321,  321,  327,  327,  333,  333,    0,    0,  349,  349,
      371,  371,  376,  376,  388,  388,  392,  392,  397,  397,
      382,  382,  413,  413,  429,  429,  444,  444,  465,  465,
        0,    0,  479,  479,  483,  483,  490,  490,  496,  496,
      512,  512,  451,  451,    0,    0,  518,  518,    0,    0,
      528,  528,    0,    0,  545,  545,    0,    0,  555,  555,
      570,  570,    0,    0,  589,  589,  359,  359,  600,  600,

      230,  230,  234,  234,  285,  285,  289,  289,  293,  293,
      224,  224,  227,  227,  238,  238,  246,  246,  242,  242,
      201,  201,    0,    0,  604,  604,  608,  608,  621,  621,
      628,  628,  635,  635,  614,  614,  644,  642,  154,  641,
      642,  642,  147,  148,  151,  153,  149,  152,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  150,
      638,  643,  167,  166,  163,  164,  165,  167,  197,  196,
      194,  195,  197,  197,  197,  197,  182,  181,  178,  179,
      180,  182,  182,  182,  182,  182,  182,  182,  189,  188,

      186,  187,  189,  189,  189,  221,  220,  213,  206,  207,
      212,  210,  208,  211,  209,  215,  221,  221,  221,  221,
      214,  253,  252,  249,  250,  251,  253,  261,  260,  254,
      255,  259,  261,  261,  261,  275,  274,  272,  273,  270,
      271,  275,  275,  275,  275,  275,  275,  275,  279,  278,
      276,  277,  282,  280,  281,  299,  298,  295,  297,  296,
      305,  304,  301,  303,  302,  305,  312,  311,  309,  310,
      312,  312,  324,  321,  322,  323,  324,  330,  327,  328,
      329,  326,  330,  336,  333,  334,  335,  332,  336,  337,
      350,  349,  338,  340,  344,  339,  341,  350,  350,  350,

      350,  342,  343,  372,  371,  361,  363,  362,  364,  372,
      372,  372,  372,  365,  366,  378,  376,  374,  375,  378,
      388,  385,  386,  387,  394,  392,  390,  391,  394,  397,
      395,  396,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  384,  382,  380,  381,  384,  414,  413,
      411,  412,  430,  429,  422,  415,  416,  421,  419,  417,
      420,  418,  424,  430,  423,  445,  444,  431,  432,  433,
      435,  434,  445,  445,  445,  445,  445,  466,  465,  460,
      461,  462,  463,  466,  473,  469,  467,  468,  470,  472,
      471,  480,  479,  474,  478,  477,  476,  475,  484,  483,

      481,  482,  490,  488,  489,  643,  643,  643,  497,  496,
      493,  494,  495,  497,  497,  512,  509,  510,  511,  643,
      643,  643,  643,  643,  643,  643,  452,  451,  446,  450,
      448,  449,  447,  459,  456,  453,  454,  455,  458,  457,
      519,  518,  513,  514,  515,  516,  519,  522,  520,  521,
      529,  528,  523,  524,  525,  526,  529,  532,  530,  531,
      546,  545,  533,  536,  534,  546,  549,  547,  548,  556,
      555,  553,  554,  556,  556,  556,  571,  570,  560,  561,
      562,  563,  571,  571,  571,  571,  571,  571,  571,  574,
      572,  573,  590,  589,  582,  575,  576,  581,  579,  577,

      580,  578,  584,  590,  583,  360,  359,  351,  353,  352,
      354,  360,  360,  355,  356,  601,  600,  591,  592,  601,
      601,  601,  601,  601,  231,  230,  228,  229,  235,  234,
      232,  233,  286,  285,  283,  284,  290,  289,  287,  288,
      294,  293,  291,  292,  224,  222,  223,  227,  225,  226,
      239,  238,  236,  237,  247,  246,  244,  245,  243,  242,
      240,  241,  202,  201,  199,  200,  202,  639,  605,  604,
      602,  603,  609,  608,  606,  607,  623,  621,  617,  618,
      619,  620,  623,  630,  628,  624,  625,  626,  627,  630,
      637,  635,  631,  632,  633,  634,  637,  616,  614,  610,

      611,  612,  613,  616,  641,    0,    0,  153,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  116,    0,    0,    0,
        0,    0,    0,    0,    0,  166,    0,  196,    0,    0,
        0,    0,  181,    0,    0,    0,    0,    0,    0,    0,
        0,  188,    0,    0,    0,  220,  216,    0,    0,    0,

        0,    0,  217,  252,    0,  260,    0,    0,    0,  274,
        0,    0,    0,    0,    0,    0,    0,    0,  278,  282,
      298,  304,    0,  311,    0,    0,    0,  321,    0,  327,
        0,  333,    0,  349,    0,    0,    0,    0,  371,    0,
        0,    0,    0,  376,    0,    0,  388,  385,  392,    0,
        0,  397,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  382,    0,    0,  413,  429,
      425,    0,    0,  426,  444,    0,  437,    0,    0,    0,
        0,    0,  465,    0,    0,  468,  467,  479,  483,  490,
        0,    0,    0,  496,    0,    0,  512,    0,    0,    0,

        0,    0,    0,    0,    0,  499,  451,    0,  454,  453,
      518,    0,  528,    0,  545,    0,  535,    0,  555,    0,
        0,    0,  570,    0,    0,    0,    0,    0,    0,    0,
      589,  585,    0,    0,  586,  359,    0,    0,  600,    0,
      594,    0,    0,    0,    0,  230,  234,  285,  289,  293,
      224,  227,  238,  246,  242,  201,    0,  604,  608,  621,
        0,  628,    0,  635,    0,  614,    0,    0,    0,    0,
        0,    0,    0,   75,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   76,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   69,    0,    0,

        0,    0,    0,    0,    0,    0,   27,    0,    0,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   79,    0,    0,    0,    0,  121,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    3,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  257,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  408,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  438,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  499,    0,    0,    0,    0,  552,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  564,
        0,    0,    0,    0,    0,    0,    0,    0,  595,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   80,    0,    0,   48,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      111,  640,  122,    0,    0,    0,    0,   78,  117,    0,
        0,  145,    0,  133,   73,    0,    0,    0,    0,    0,
       72,    0,    0,  119,   47,    0,    0,    0,    0,    0,
        0,    0,   18,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  130,    0,    0,    0,    0,    0,    0,
       49,    0,    0,    0,    0,    0,    0,   10,    0,    0,
        0,    6,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   65,    0,    0,    0,    0,  191,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  219,    0,  218,    0,    0,  257,
      258,    0,  256,  268,    0,    0,    0,    0,    0,  264,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  345,    0,    0,    0,  367,    0,    0,    0,    0,
        0,  398,    0,  399,    0,  400,    0,    0,    0,  403,
        0,  404,    0,    0,    0,  407,    0,    0,    0,    0,
        0,  428,    0,  427,    0,    0,    0,    0,  443,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      500,  503,    0,    0,    0,    0,    0,    0,  550,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  588,
        0,  587,    0,    0,    0,    0,    0,  599,    0,    0,
        0,    0,    0,    0,    1,    0,    0,    0,    0,   40,
        0,  140,    0,    0,    0,  141,    0,    0,   23,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  110,    0,    0,   83,    0,
      126,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
        0,    0,   36,    0,   63,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   70,    0,    0,    0,
        0,    9,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   25,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  131,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  174,    0,    0,    0,    0,    0,
      169,    0,    0,  170,    0,    0,  184,    0,    0,    0,
        0,    0,  204,    0,  258,    0,    0,    0,    0,    0,
        0,    0,    0,  306,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  401,    0,    0,    0,  406,    0,

        0,    0,    0,    0,  439,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  498,    0,    0,  500,  503,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  565,    0,    0,
        0,    0,    0,    0,  596,    0,    0,    0,  622,  629,
      636,  615,    0,    0,    0,    0,    0,    0,    0,    0,
      129,    0,   56,    0,    0,    0,    0,   20,    0,    0,
        0,    0,   87,  135,    0,   90,  107,    0,    0,    0,
        0,    0,    0,  143,    0,    0,    0,    0,    0,    0,
        0,    0,   30,   68,   26,    0,    0,    0,   74,    0,

        0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       17,    0,   54,   24,  105,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   84,  115,    0,    0,    0,   81,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  190,    0,    0,    0,    0,    0,    0,    0,    0,
      183,  185,    0,    0,    0,    0,  267,    0,    0,    0,
      265,  300,    0,  308,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  347,    0,    0,  369,    0,
        0,    0,  377,    0,    0,  393,    0,    0,  405,    0,

      410,    0,    0,    0,  383,  441,    0,    0,  442,    0,
        0,    0,    0,    0,    0,    0,  498,    0,    0,    0,
        0,  505,  501,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  551,    0,  567,    0,    0,  558,  569,
        0,    0,    0,    0,    0,  598,    0,  593,    0,  622,
      629,  636,  615,    2,  103,  128,    0,   39,    0,    0,
        0,    0,  123,    0,  132,  138,    0,    0,    0,    0,
       41,   14,  136,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,   34,    0,    0,   15,

        0,    0,  104,  127,    0,    0,   37,  142,    0,   53,
      102,    8,    0,    0,    0,    0,    0,    0,    0,    0,
      137,    0,   42,    0,    0,   64,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  193,    0,  172,    0,
        0,    0,    0,  173,    0,    0,  177,    0,    0,  203,
        0,  266,    0,    0,  269,  300,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  331,    0,    0,    0,
        0,    0,  373,    0,  389,    0,    0,    0,  379,    0,
        0,    0,  486,  487,  485,    0,    0,    0,    0,  504,
        0,  507,  505,  501,    0,  517,    0,  527,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  557,    0,  559,
        0,    0,  566,    0,    0,  357,    0,    0,   89,    0,
       22,    0,    0,    0,    0,   32,    0,    0,  134,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   33,    4,   88,    0,    0,   96,    0,
       31,   52,    0,    0,    0,   91,  124,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  176,    0,    0,    0,  205,    0,
        0,    0,  307,    0,    0,    0,    0,    0,    0,    0,

        0,  325,    0,    0,    0,    0,    0,  402,    0,  409,
        0,    0,    0,    0,    0,    0,    0,  504,    0,  507,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  568,
        0,    0,    0,  144,   59,    0,    0,    0,   71,    0,
        0,    0,    0,    0,    0,   51,   82,    0,   93,    0,
        0,   50,    0,    0,    0,   85,    0,    0,    0,   94,
       12,    0,   21,   19,    0,    0,    0,   58,   92,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  175,    0,  168,    0,  171,
        0,  262,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  346,    0,  368,    0,    0,  436,    0,    0,  464,
        0,  491,    0,  506,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  114,    0,    0,   45,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  139,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  506,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      358,    0,  198,    0,    0,    0,   55,  120,    0,    0,

        0,    0,    0,   67,    0,   29,    0,   38,   44,   11,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  492,  508,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  146,    0,   62,    0,    0,   16,    0,
       86,    0,    0,    0,    0,   13,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      192,    0,  248,  263,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  508,  502,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   46,    0,    0,
      112,    5,    0,    0,   61,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  440,  502,
        0,    0,    0,    0,    0,    0,    0,    0,  597,    0,
        0,    0,    0,  125,    0,   60,    0,    0,    0,  108,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  348,  370,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  113,
       97,   98,    0,  109,  118,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  101,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  315,    0,    0,    0,    0,
      319,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      318,    0,    0,    0,    0,  320,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  157,    0,
        0,    0,    0,    0,  161,    0,  313,  316,    0,  317,
        0,    0,  539,    0,    0,    0,    0,    0,  543,    0,
        0,   99,    0,  160,    0,    0,    0,    0,    0,  162,
        0,    0,  542,    0,    0,    0,    0,    0,  544,    0,
        0,  155,    0,  158,    0,    0,  159,  314,    0,  537,
        0,  540,    0,    0,  541,    0,    0,    0,  100,    0,
      156,    0,  538,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    1,    5,    6,    1,    7,    1,    8,
        9,   10,   11,   12,   13,    1,   14,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   15,    1,    1,
       16,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   17,    1,   18,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[49] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    1,    3,
        1,    1,    3,    3,    1,    1,    1,    3,    1,    1,
        1,    1,    3,    1,    3,    1,    3,    1,    3,    3,
        1,    1,    3,    1,    1,    3,    1,    3
    } ;

static const flex_int16_t yy_base[2658] =
    {   0,
        0,    0, 3297, 3296,   47,   49,   82,  119,  156,  195,
       57,   65,  234,  280,   90,  116,  326,  366,  406,  443,
       67,   69,   93,  101,  127,  131,  164,  212,  147,  166,
      204,  220,  262,  297,  307,  330, 3295, 3294,  480,  527,
      574,  621,  223,  266,  184,  334,  348,  352,  667,    0,
      356,  374,  181,  277,  706,  752,  798,  835,  376,  408,
      425,  445,  462,  482,  315,  390,  393,  496,  498,  538,
      871,    0,  554,  576,  591,  623,  639,  650,  139,  251,
      671,  720,  312,  338,  734,  769,  515,  523,  578,  607,
      909,  947,  536,  563,  985, 1031, 1077, 1124, 1171, 1208,

      610,  682,  731,  742,  771,  780,  783,  809,  820,  831,
      105,  416,  459,  506,  846,  857,  868,  879,  881,  890,
      905,  917, 3293, 3292,  934,  949,  972,  974,  999, 1007,
     1045, 1053, 1088, 1135, 1173, 1175, 3293, 3300, 3300, 3289,
     3285, 3255, 3300, 3300, 3300,    0, 3300, 3300,  765,  123,
      993,  676,   20,  629,  352,   60,  269, 3261,  422,   62,
       66,   79,  517, 3264, 1049,  920,  362,  157,  221, 3300,
     3300, 3300, 3300, 3284, 3300, 3300, 3300, 3254, 3300, 3282,
     3300, 3300, 3256, 3249, 3245, 3254, 3300, 3277, 3300, 3300,
     3300, 3259, 3258,  120, 3257, 3248, 3255, 3239, 3300, 3270,

     3300, 3300, 3241, 3251, 3235, 3300, 3266, 3261, 3300, 3300,
     3300, 3300, 3300, 3300, 3300, 3300, 3243, 3233,  117, 3245,
     3217, 3300, 3260, 3300, 3300, 3300, 3228, 3300, 3258, 3300,
     3300, 3300, 3236, 3218, 3238, 3300, 3254, 3300, 3300, 3300,
     3300, 3216, 3211, 3214, 3219, 3218, 3211,  172, 3300, 3247,
     3300, 3300, 3246, 3300, 3300, 3300, 3245, 3300, 3300, 3300,
     3300, 3244, 3300, 3300, 3300, 3207, 3300, 3242, 3300, 3300,
     3224,   99, 3300, 3240, 3300, 3300, 3210, 3300, 3238, 3300,
     3300, 3300, 3208, 3300, 3236, 3300, 3300, 3300, 3214, 3300,
     3300, 3234, 3300, 3300, 3300, 3300, 3300, 3202, 3211, 3202,

     3195, 3300, 3300, 3300, 3229, 3300, 3300, 3300, 3300, 3197,
     3206, 3197, 3190, 3300, 3300, 3300, 3224, 3188, 3300, 3203,
     3221, 3220, 3300, 3300, 3300, 3219, 3183, 3300, 3198, 3216,
     3300, 3300,  219, 3198, 3180, 3176, 3182,  206, 3183, 3187,
     3190, 3183, 3177, 3300, 3206, 3170, 3300, 3185, 3300, 3203,
     3300, 3300, 3300, 3202, 3197, 3300, 3300, 3300, 3300, 3300,
     3300, 3300, 3300,  142, 3156, 3300, 3199, 3300, 3300, 3300,
     3300, 3300, 3177,  440, 3160, 3159,  459, 3300, 3195, 3300,
     3300, 3300, 3300, 3158, 3300,  565, 3193, 3300, 3300, 3300,
     3300, 3300, 3192, 3300, 3300, 3300, 3300, 3300, 3300, 3191,

     3300, 3300, 3190, 3300, 3300, 3170, 3167, 3166, 3300, 3186,
     3300, 3300, 3300, 3155, 3163, 3183, 3300, 3300, 3300,  241,
     3161,  334, 3150, 3149, 3160, 3147, 3300, 3177, 3300, 3300,
     3300, 3300, 3300, 3300,  592, 3176, 3300, 3300, 3300, 3300,
     3300, 3175, 3300, 3300, 3300, 3300, 3157, 3300, 3300, 3300,
     3300, 3173, 3300, 3300, 3300, 3300, 3155, 3300, 3300, 3300,
     3300, 3171, 3300,  647, 3300, 3141, 3300, 3300, 3300, 3300,
     3169, 3300, 3300, 3138, 3136, 3135, 3300, 3165, 3300, 3300,
     3300, 3300, 3136, 3135, 3141, 3127, 3143, 3138, 3127, 3300,
     3300, 3300, 3300, 3157, 3152, 3300, 3300, 3300, 3300, 3300,

     3300, 3300, 3300,  188, 3111, 3300, 3154, 3300, 3300, 3300,
     3300, 3113, 3131, 3300, 3300, 3300, 3151, 3300, 3300, 3129,
     3119, 3111, 3110,  644, 3300, 3146, 3300, 3300, 3300, 3145,
     3300, 3300, 3300, 3144, 3300, 3300, 3300, 3143, 3300, 3300,
     3300, 3142, 3300, 3300, 3141, 3300, 3300, 3140, 3300, 3300,
     3300, 3139, 3300, 3300, 3300, 3138, 3300, 3300, 3300, 3137,
     3300, 3300, 3300, 3136, 3300, 3300, 3104, 3300, 3300, 3134,
     3300, 3300, 3300, 3133, 3300, 3300, 3300, 3132, 3300, 3300,
     3300, 3300, 3107, 3300, 3130, 3300, 3300, 3300, 3300, 3105,
     3300, 3128, 3300, 3300, 3300, 3300, 3103, 3300, 3126, 3300,

     3300, 3300, 3300, 3101, 3124, 3092, 3088,    0, 3088, 3098,
      157, 3078, 3099, 3086, 3082, 3085, 3083,  477,  691,  666,
     3076, 3087, 3075, 1070, 3075, 3300, 3079,  313, 1059,  264,
     3071, 3073, 3083, 3074, 3068, 3066, 3085,   23, 3071, 3065,
     3300, 1085,  257, 3069, 3063, 3067, 3065,  770,  710, 1089,
     3066, 3062, 3073, 3058, 3066,  741, 1122, 3068,  841,  289,
     3072,  527, 3054,  608, 3070, 3052, 3300,  483, 3065, 3063,
     3049, 3052, 3060, 3046, 3054, 3078, 3045, 3076, 3041, 3044,
     3048, 3055, 3071, 3040, 3033, 3032, 3042, 3032, 3036,  674,
     3044, 3063, 3031, 3026, 3026, 3059, 3300, 3036, 3022, 3016,

     3025, 3019, 3300, 3053, 3022, 3051, 3028, 3032, 3020, 3047,
     3010, 3015, 3019, 3013, 3012, 3011, 3011, 3022, 3038, 3037,
     3036, 3035, 3017, 3033, 2998, 3014, 2996, 3029, 2996, 3027,
     2994, 3025, 3002, 3023, 2992, 2983, 2988, 2998, 3018, 2987,
     2978, 2983, 2993, 3013, 2993, 2980, 3010, 3009, 3008, 2988,
     2975, 3005, 2984, 2974, 2967, 2984, 2974, 2962, 2969, 2961,
     2958, 2970, 2963,  816, 2966, 2992, 2972, 2959, 2989, 2988,
     3300, 2947, 2956, 3300, 2985, 2952, 2952, 2961, 2945, 2944,
     2949, 2941, 2977, 2955,  832, 3300, 2975, 2974, 2973, 2972,
     2938, 2942, 2936, 2968, 2948, 2928, 2965, 2941, 2935, 2940,

     2927, 2929, 2929, 2933, 2940,  323, 2956,  843, 3300, 2955,
     2954, 2921, 2952, 2919, 2950,  853, 3300, 2917, 2948, 2906,
     2911, 2921, 2944,  586, 2912, 2914, 2910, 2908, 2911,  913,
     2938, 3300, 2897, 2906, 3300, 2935, 2898, 2903, 2932, 2899,
     2899, 2893, 2892, 2897, 2889, 2925, 2924, 2923, 2922, 2921,
     2920, 2919, 2918, 2917, 2916, 2915, 2884, 2913, 2912, 2911,
     2873, 2909, 2871, 2907, 2869, 2905, 2867, 2874, 2885,  244,
     2876, 2877,  790, 3300, 2875, 2869, 2863, 2876, 2878, 2875,
     2857, 2857, 2856, 2862, 2869, 2847, 3300, 2851, 2869, 2857,
     2867,  346, 2847, 2865, 2856, 2844, 2862, 3300, 2857, 2849,

     2840, 2841,  796, 2857, 2838, 2837, 3300, 2854, 2841, 2845,
     3300, 2843, 2836, 2850, 2829, 2828, 2829, 2828, 2833, 2824,
     2839, 3300, 2838, 2821,  848, 2824, 2823, 2818, 2834, 2829,
     2834, 2816, 2818,  702, 2823, 2830, 2830, 3300, 2824, 2827,
     2813,  823, 2823, 2821, 2803,  528, 2802, 2817, 2816,  862,
     2815, 2801, 2798, 2817, 2798, 2811, 2807, 2808, 2805, 2800,
     2797, 2804, 2802, 2798, 2805,  738, 2796, 2800, 2789, 2791,
     2781, 2800, 2780, 2793, 2775, 2778, 2792, 2793, 2788, 2772,
     2790, 2786, 2782, 2776, 2600, 2581, 2578, 2592, 2594, 2590,
      618,  882,  102,  138,  206,  209,  897,  310,  353,  382,

      388,  403,  410,  436,  433,  447,  499,  495,  540,  585,
      589,  635,  630,  649,  650,  657,  689,  702,  717,  719,
      724,  729,  759,  757,  957,  962,  982,  751,  769, 1003,
     1017,  807,  810, 1022,  808, 1042, 3300,  820,  868,  866,
      920,  930,  881,  882,  893,  929, 3300,  931,  926,  927,
      949,  953,  959,  965,  962,  967,  971,  998,  985, 1003,
     1012, 1004, 1019, 1049, 1021, 1024, 1029, 1047, 3300, 1031,
     1038, 1040, 1062, 1045, 1064, 1067, 1067, 1088, 1114, 3300,
     1077, 1131, 1136, 1095, 1097, 1087, 1084, 1106, 3300, 1105,
     1104, 1127, 1119, 1121, 1122, 1123, 1124, 1134, 1124, 1134,

     1131, 1133, 1147, 1146, 1145, 3300, 1143, 1158, 3300, 1166,
     1167, 1152, 1169, 1157, 1178, 1172, 1173, 1174, 3300, 1184,
     1166, 1174, 1191, 1176, 1192, 1193, 1200, 1186, 1183, 1181,
     3300, 3300, 3300, 1189, 1192, 1185, 1198, 3300, 3300, 1202,
     1194, 3300, 1205, 3300, 3300, 1205, 1210, 1192, 1205, 1210,
     3300, 1200, 1218, 3300, 3300, 1215, 1217, 1216, 1220, 1222,
     1213, 1210, 3300, 1225, 1217, 1223, 1213, 1216, 1223, 1216,
     1219, 1237, 1239, 3300, 1237, 1217, 1241, 1234, 1226, 1233,
     3300, 1226, 1243, 1243, 1240, 1247, 1246, 1268, 1241, 1253,
     1250, 1256, 1239, 1258, 1251, 1256, 1242, 1260, 1265, 1266,

     1254, 3300, 1251, 1266, 1270, 1252, 3300, 1274, 1271, 1272,
     1299, 1266, 1301, 1275, 1304, 1284, 1307, 1272, 1288, 1289,
     1295, 1276, 1297, 1315, 3300, 1317, 3300, 1322, 1293, 1320,
     1323, 1325, 3300, 3300, 1295, 1305, 1292, 1301, 1308, 3300,
     1309, 1311, 1309, 1303, 1322, 1321, 1310, 1306, 1308, 1327,
     1326, 3300, 1312, 1331, 1330, 3300, 1318, 1333, 1321, 1335,
     1358, 3300, 1359, 3300, 1360, 3300, 1361, 1326, 1363, 3300,
     1368, 3300, 1342, 1371, 1372, 3300, 1352, 1344, 1342, 1358,
     1380, 3300, 1381, 3300, 1364, 1347, 1367, 1345, 3300, 1367,
     1370, 1354, 1349, 1371, 1356, 1375, 1374, 1377, 1360, 1362,

     1399, 1400, 1365, 1385, 1372, 1383, 1384, 1387, 3300, 1373,
     1390, 1369, 1391, 1377, 1414, 1395, 1400, 1387, 1420, 3300,
     1421, 3300, 1392, 1393, 1407, 1391, 1388, 3300, 1410, 1393,
     1404, 1407, 1408, 1409, 3300, 1408, 1417, 1405, 1415, 1420,
     1406, 1426, 1424, 1426, 1425, 3300, 1419, 1414, 3300, 1428,
     1418, 1415, 1422, 1419, 1435, 1421, 1428, 1437, 1432, 1428,
     1436, 1440, 1427, 1438, 1439, 3300, 1430, 1431, 3300, 1435,
     3300, 1434, 1434, 1449, 1451, 1442, 1438, 1457, 1437, 1442,
     1443, 1444, 1445, 3300, 1463, 1456, 1445, 1447, 1455, 1467,
     1450, 1470, 1467, 1461, 3300, 1465, 1456, 1475, 1459, 1475,

     1462, 1464, 1464, 1479, 1480, 1465, 3300, 1472, 1469, 1485,
     1506, 3300, 1486, 1487, 1489, 1474, 1495, 1479, 1483, 1498,
     1491, 3300, 1497, 1497, 1485, 1500, 1500, 1501, 1506, 1494,
     1491, 1502, 3300, 1504, 1507, 1505, 1514, 1496, 1509, 1502,
     1500, 1517, 1510, 1539, 3300, 1540, 1541, 1525, 1515, 1544,
     3300, 1510, 1547, 3300, 1517, 1528, 3300, 1516, 1532, 1525,
     1524, 1555, 3300, 1521, 1558, 1537, 1543, 1534, 1536, 1538,
     1549, 1550, 1542, 3300, 1551, 1549, 1552, 1549, 1558, 1540,
     1553, 1544, 1551, 1547, 1561, 1554, 1550, 1564, 1557, 1566,
     1588, 1569, 1591, 1592, 3300, 1559, 1595, 1597, 3300, 1599,

     1561, 1581, 1605, 1580, 3300, 1571, 1583, 1588, 1575, 1591,
     1592, 1579, 1579, 1595, 1594, 1618, 1591, 1588, 1621, 1622,
     1602, 1590, 1596, 1592, 1593, 1605, 1608, 1605, 1614, 1596,
     1609, 1598, 1637, 1603, 1639, 1619, 1641, 3300, 1608, 1608,
     1615, 1611, 1613, 1624, 3300, 1626, 1631, 1620, 1655, 1656,
     1657, 1658, 1642, 1632, 1640, 1626, 1643, 1640, 1629, 1629,
     1651, 1634, 1641, 1649, 1637, 1637, 1648, 3300, 1649, 1658,
     1655, 1641, 3300, 3300, 1637, 3300, 1663, 1661, 1663, 1663,
     1658, 1659, 1651, 3300, 1661, 1649, 1651, 1670, 1665, 1663,
     1667, 1668, 3300, 3300, 3300, 1676, 1661, 1664, 3300, 1665,

     1664, 3300, 1664, 1683, 1667, 1682, 1682, 1668, 1684, 1681,
     1682, 1688, 1688, 1689, 1690, 1682, 1679, 1686, 1685, 1680,
     3300, 1687, 3300, 3300, 3300, 1683, 1698, 1689, 1690, 1697,
     1702, 1708, 1705, 1697, 3300, 3300, 1689, 1700, 1693, 3300,
     1713, 1697, 1702, 1711, 1711, 1701, 1697, 1716, 1704, 1705,
     1720, 3300, 1742, 1744, 1728, 1710, 1726, 1748, 1718, 1750,
     3300, 3300, 1715, 1752, 1728, 1736, 3300, 1726, 1726, 1737,
     3300, 1759, 1739, 3300, 1729, 1735, 1744, 1744, 1734, 1730,
     1749, 1737, 1747, 1737, 1737, 3300, 1754, 1739, 3300, 1756,
     1778, 1779, 3300, 1780, 1781, 3300, 1745, 1787, 3300, 1789,

     3300, 1758, 1790, 1791, 3300, 3300, 1761, 1767, 3300, 1767,
     1771, 1780, 1765, 1771, 1787, 1787, 1805, 1770, 1771, 1774,
     1775, 1810, 1811, 1812, 1813, 1780, 1785, 1794, 1796, 1786,
     1782, 1801, 1789, 3300, 1824, 3300, 1825, 1826, 3300, 3300,
     1827, 1807, 1829, 1805, 1833, 3300, 1801, 3300, 1803, 1839,
     1840, 1842, 1843, 3300, 3300, 3300, 1803, 3300, 1824, 1825,
     1828, 1828, 3300, 1832, 3300, 3300, 1829, 1820, 1814, 1825,
     3300, 1825, 3300, 1819, 1833, 1821, 1843, 1822, 1830, 1837,
     1821, 1839, 1846, 1842, 1829, 1843, 1850, 1832, 1843, 1851,
     3300, 1842, 1857, 1848, 1847, 1856, 1878, 1851, 1839, 3300,

     1851, 1851, 3300, 3300, 1849, 1869, 3300, 3300, 1865, 1852,
     3300, 3300, 1847, 1869, 1853, 1859, 1856, 1865, 1866, 1861,
     3300, 1880, 3300, 1872, 1870, 3300, 1865, 1869, 1866, 1885,
     1879, 1881, 1889, 1889, 1886, 1883, 3300, 1909, 3300, 1874,
     1894, 1884, 1913, 3300, 1882, 1915, 3300, 1916, 1917, 3300,
     1887, 3300, 1894, 1884, 3300, 1922, 1895, 1893, 1893, 1912,
     1906, 1908, 1916, 1916, 1913, 1897, 3300, 1917, 1907, 1919,
     1909, 1940, 3300, 1941, 3300, 1942, 1943, 1947, 3300, 1910,
     1919, 1917, 3300, 3300, 3300, 1919, 1924, 1919, 1939, 1957,
     1933, 1959, 1960, 1961, 1962, 3300, 1963, 3300, 1933, 1930,

     1949, 1945, 1947, 1955, 1955, 1952, 1974, 3300, 1975, 3300,
     1976, 1977, 3300, 1947, 1979, 3300, 1950, 1961, 3300, 1951,
     3300, 1952, 1951, 1969, 1955, 3300, 1962, 1976, 3300, 1977,
     1954, 1975, 1961, 1981, 1978, 1970, 1963, 1981, 1984, 1968,
     3300, 1984, 1964, 1986, 1991, 1988, 1991, 1977, 1982, 1978,
     1979, 1998, 2016, 3300, 3300, 3300, 1997, 1988, 3300, 1988,
     3300, 3300, 1990, 1985, 1991, 3300, 3300, 2004, 2000, 2001,
     2010, 2009, 1998, 2009, 1994, 1996, 1996, 2018, 2014, 2008,
     2008, 2021, 2001, 2023, 3300, 2041, 2042, 2043, 3300, 2014,
     2027, 2016, 3300, 2011, 2013, 2013, 2035, 2034, 2028, 2028,

     2041, 3300, 2023, 2024, 2025, 2026, 2063, 3300, 2064, 3300,
     2066, 2028, 2067, 2068, 2036, 2053, 2057, 2076, 2039, 2078,
     2042, 2045, 2045, 2067, 2063, 2057, 2057, 2070, 2088, 3300,
     2059, 2053, 2061, 3300, 3300, 2067, 2071, 2069, 3300, 2059,
     2064, 2065, 2078, 2078, 2073, 3300, 3300, 2085, 3300, 2082,
     2079, 3300, 2084, 2090, 2071, 3300, 2072, 2092, 2091, 3300,
     3300, 2091, 3300, 3300, 2090, 2094, 2095, 3300, 3300, 2086,
     2078, 2097, 2094, 2098, 2101, 3300, 2089, 2106, 2095, 2106,
     2109, 2109, 2111, 2108, 2112, 3300, 2130, 3300, 2131, 3300,
     2115, 3300, 2103, 2102, 2119, 2108, 2119, 2122, 2122, 2124,

     2121, 3300, 2127, 3300, 2128, 2146, 3300, 2111, 2148, 3300,
     2149, 3300, 2121, 2152, 2126, 2138, 2124, 2141, 2130, 2141,
     2144, 2145, 2147, 2144, 2165, 2130, 2131, 2137, 2152, 2140,
     2151, 3300, 2152, 2137, 3300, 2147, 2140, 2161, 2147, 2145,
     2148, 2160, 2157, 2155, 2160, 2150, 2164, 3300, 2151, 2163,
     2172, 2170, 2174, 2176, 2176, 2178, 2166, 2160, 2158, 2179,
     2163, 2171, 2185, 2166, 2175, 2179, 2189, 2177, 2171, 2169,
     2190, 2174, 2182, 2196, 2177, 2178, 2180, 2216, 2217, 2197,
     2183, 2204, 2192, 2186, 2184, 2205, 2189, 2197, 2211, 2229,
     3300, 2195, 3300, 2201, 2195, 2203, 3300, 3300, 2207, 2205,

     2216, 2221, 2209, 3300, 2204, 3300, 2203, 3300, 3300, 3300,
     2214, 2218, 2208, 2209, 2212, 2213, 2231, 2213, 2221, 2230,
     2236, 2237, 2237, 2239, 2235, 2228, 2237, 2259, 2241, 2232,
     2241, 2248, 2249, 2249, 2251, 2247, 2240, 2245, 2247, 2252,
     2274, 3300, 2275, 2255, 2248, 2257, 2263, 2264, 2264, 2266,
     2262, 2255, 2264, 3300, 2259, 3300, 2267, 2270, 3300, 2270,
     3300, 2257, 2271, 2262, 2263, 3300, 2274, 2275, 2276, 2278,
     2263, 2269, 2280, 2273, 2274, 2275, 2273, 2277, 2278, 2287,
     3300, 2309, 3300, 3300, 2289, 2282, 2283, 2284, 2282, 2286,
     2287, 2296, 2287, 2288, 2284, 2322, 2323, 2303, 2296, 2297,

     2298, 2296, 2300, 2301, 2310, 2296, 2297, 3300, 2317, 2315,
     3300, 3300, 2319, 2307, 2338, 2304, 2320, 2321, 2308, 2310,
     2316, 2330, 2326, 2327, 2333, 2329, 2335, 2323, 2324, 2338,
     2334, 2335, 2341, 2337, 2343, 2331, 2331, 2332, 3300, 2363,
     2335, 2349, 2345, 2346, 2352, 2348, 2354, 2342, 3300, 2356,
     2337, 2340, 2355, 3300, 2376, 3300, 2342, 2362, 2345, 3300,
     2345, 2366, 2366, 2355, 2356, 2357, 2358, 2371, 2373, 2374,
     2374, 2363, 2364, 2365, 2366, 2379, 2381, 3300, 3300, 2382,
     2382, 2371, 2372, 2373, 2374, 2387, 2389, 2377, 2376, 3300,
     3300, 3300, 2379, 3300, 3300, 2392, 2382, 2395, 2396, 2392,

     2398, 2387, 2399, 2400, 2390, 2403, 2404, 2400, 2406, 2395,
     2407, 2408, 2398, 2411, 2412, 2408, 2414, 2403, 2415, 2412,
     2400, 2414, 2408, 2409, 2421, 2422, 2411, 2424, 2414, 2415,
     2416, 2417, 2429, 2430, 2419, 2432, 2422, 2423, 2424, 2425,
     2437, 2438, 2427, 2440, 2430, 2431, 2431, 2426, 2433, 2435,
     2433, 2437, 2438, 2451, 2440, 2438, 2442, 2443, 2441, 2445,
     2446, 2459, 2448, 2446, 2450, 2451, 2449, 2453, 2454, 2467,
     2456, 2454, 2458, 2471, 3300, 2457, 2458, 2471, 2463, 2464,
     2476, 2466, 2476, 2465, 2478, 3300, 2467, 2468, 2472, 2470,
     3300, 2483, 2472, 2485, 2477, 2478, 2490, 2480, 2490, 2479,

     2480, 2478, 2494, 2514, 2484, 2485, 2489, 2487, 2519, 2501,
     3300, 2502, 2503, 2495, 2505, 3300, 2506, 2527, 2497, 2498,
     2502, 2502, 2534, 2516, 2502, 2496, 2538, 2540, 3300, 2522,
     2523, 2515, 2525, 2545, 3300, 2546, 3300, 3300, 2516, 3300,
     2548, 2549, 3300, 2532, 2536, 2528, 2540, 2560, 3300, 2561,
     2542, 3300, 2563, 3300, 2564, 2567, 2537, 2569, 2570, 3300,
     2552, 2572, 3300, 2573, 2580, 2543, 2583, 2584, 3300, 2565,
     2587, 3300, 2590, 3300, 2572, 2592, 3300, 3300, 2593, 3300,
     2595, 3300, 2575, 2596, 3300, 2563, 2603, 2605, 3300, 2606,
     3300, 2607, 3300, 3300, 2621, 2624, 2627, 2630, 2633, 2636,

     2639, 2642, 2645, 2648, 2651, 2654, 2657, 2660, 2663, 2666,
     2669, 2672, 2675, 2678, 2681, 2684, 2687, 2690, 2693, 2696,
     2699, 2702, 2705, 2708, 2711, 2714, 2717, 2720, 2723, 2726,
     2729, 2732, 2735, 2738, 2741, 2744, 2747, 2750, 2753, 2756,
     2759, 2762, 2765, 2768, 2771, 2774, 2777, 2780, 2783, 2786,
     2789, 2792, 2795, 2798, 2801, 2804, 2608
    } ;

static const flex_int16_t yy_def[2658] =
    {   0,
     2594,    1, 2595, 2595, 2596, 2596, 2597, 2597, 2598, 2598,
     2599, 2599, 2600, 2600, 2601, 2601, 2602, 2602, 2603, 2603,
     2604, 2604, 2605, 2605, 2606, 2606, 2607, 2607, 2608, 2608,
     2609, 2609, 2610, 2610, 2611, 2611, 2612, 2612, 2613, 2613,
     2614, 2614, 2615, 2615, 2605, 2605, 2616, 2616, 2605,   49,
     2617, 2617, 2618, 2618, 2619, 2619, 2620, 2620, 2621, 2621,
     2622, 2622, 2623, 2623, 2624, 2624, 2605, 2605, 2625, 2625,
     2605,   71, 2626, 2626, 2627, 2627, 2628, 2628, 2629, 2629,
     2630, 2630, 2631, 2631, 2632, 2632, 2633, 2633, 2634, 2634,
     2635, 2635, 2636, 2636, 2637, 2637, 2638, 2638, 2639, 2639,

     2640, 2640, 2641, 2641, 2642, 2642, 2643, 2643, 2644, 2644,
     2605, 2605, 2605, 2605, 2645, 2645, 2646, 2646, 2647, 2647,
     2648, 2648, 2649, 2649, 2650, 2650, 2651, 2651, 2652, 2652,
     2653, 2653, 2654, 2654, 2655, 2655, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2656, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2656, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2657, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2657, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594,    0, 2594, 2594, 2594, 2594, 2594, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594
    } ;

static const flex_int16_t yy_nxt[3349] =
    {   0,
      138,  139,  140,  141,  142,  138,  138,  143,  144,  141,
      138,  145,  138,  146,  147,  138,  148,  138,  138,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  138,  158,
      159,  160,  161,  162,  163,  138,  164,  165,  166,  167,
      168,  169,  138,  138,  138,  138,  138,  170,  172,  174,
      172,  174,  628,  913,  175,  176,  175,  176,  172,  200,
      914,  177,  629,  177,  201,  202,  172,  200,  172,  250,
      172,  250,  201,  202,  251,  252,  251,  252,  203,  638,
      178,  648,  178,  172,  180,  649,  203,  639,  204,  181,
      182,  172,  223,  640,  205,  253,  204,  224,  225,  650,

      254,  255,  205,  253,  226,  651,  183,  545,  254,  255,
      652,  227,  546,  547,  184,  653,  185,  172,  223,  186,
      172,  180,  726,  224,  225,  727,  181,  182,  172,  257,
      226, 1228,  172,  257,  258,  259,  700,  227,  258,  259,
      172,  260,  615,  183,  701,  260,  449,  450,  172,  268,
      616,  184,  686,  185,  269,  270,  186,  172,  188,  617,
     1229,  772,  687,  189,  190,  172,  262,  172,  268,  773,
      191,  263,  264,  269,  270,  265,  671,  192,  193,  194,
      672,  271,  172,  350,  872,  272,  321,  873,  351,  352,
      195,  322,  323,  196,  197,  198,  172,  188,  324,  717,

      271,  266,  189,  190,  272,  172,  274,  833, 1230,  191,
      718,  275,  276,  172,  262,  834,  192,  193,  194,  263,
      264,  172,  274,  265,  172,  317,  759,  275,  276,  195,
      318,  319,  196,  197,  198,  172,  207,  277,  760, 1231,
      208,  209,  210,  211,  212,  213,  214,  673,  215,  266,
      753,  216,  172,  277,  674,  754,  217,  675,  449,  450,
      320,  218, 1099,  172,  279,  219,  798,  172,  317,  280,
      281,  799,  220,  318,  319,  921,  922,  282,  172,  350,
      221,  172,  207, 1100,  351,  352,  208,  209,  210,  211,
      212,  213,  214,  641,  215,  283,  904,  216,  172,  279,

      905,  642,  217,  320,  280,  281,  643,  218,  172,  285,
      953,  219,  282,  172,  286,  287,  172,  400,  220,  459,
      460,  288,  401,  402,  954, 1064,  221,  172,  229,  289,
      283,  172,  285,  230,  231,  898,  321,  286,  287,  172,
      232,  322,  323, 1234,  288,  459,  460, 1065,  324,  172,
      326,  899,  289,  172,  326,  327,  328,  172,  345,  327,
      328,  801,  233,  346,  347,  234,  235,  172,  229, 1122,
      802,  635, 1235,  230,  231,  172,  345,  172,  379, 1123,
      232,  346,  347,  380,  381,  329,  636,  382,  637,  329,
      383,  172,  400,  348,  668,  403,  669,  401,  402,  670,

      404,  405,  233,  384, 1236,  234,  235,  172,  237,  172,
      379,  348,  406,  238,  239,  380,  381,  240,  545,  382,
      241, 1237,  383,  546,  547,  242,  172,  386,  243,  407,
      408,  244,  387,  388, 1238,  384,  389,  245,  246,  390,
      391,  645,  247,  248,  172,  237,  172,  386, 1239,  646,
      238,  239,  387,  388,  240,  647,  389,  241, 1240,  390,
      391,  548,  242,  172,  393,  243,  549,  550,  244,  394,
      395, 1241,  777,  396,  245,  246,  397,  398,  778,  247,
      248,  172,  292,  172,  393, 1242,  781,  293,  294,  394,
      395,  295,  782,  396,  296,  297,  397,  398,  403,  172,

      410,  298,  299,  404,  405,  411,  412,  300,  548,  880,
      963,  881,  413,  549,  550,  406,  172,  414, 1243,  301,
      415,  964,  468,  469,  172,  302, 1244,  303,  172,  292,
      468,  469,  407,  408,  293,  294,  654,  172,  295,  172,
      410,  296,  297,  491,  492,  411,  412, 1176,  298,  299,
      655, 1177,  413,  656,  300,  172,  428,  414,  956,  957,
      415,  429,  430, 1245,  172,  431,  301,  785,  432,  433,
      491,  492,  302,  786,  303,  172,  305,  172,  428,  172,
      471,  306,  307,  429,  430,  472,  473,  431,  308,  309,
      432,  433,  172,  435,  808,  310,  311,  474,  436,  437,

      809,  312,  438, 1246,  475,  439,  440, 1247,  172,  471,
      476,  172,  526,  313,  472,  473, 1072,  527,  528,  314,
     1224,  315,  172,  305,  172,  435,  474, 1073,  306,  307,
      436,  437, 1225,  475,  438,  308,  309,  439,  440,  476,
      172,  442,  310,  311,  959,  960,  443,  444,  312,  816,
      445,  172,  442,  446, 1248,  817,  630,  443,  444,  631,
      313,  445,  632,  633,  446,  634,  314, 1249,  315,  330,
      447,  844,  172,  452,  331,  332, 1250,  845,  453,  454,
     1251,  447,  455,  172,  526,  456,  333,  334,  335,  527,
      528,  336,  337, 1252,  338,  623,  884,  339,  885,  624,

      886,  340,  457,  625,  341,  342,  343,  172,  354,  626,
      983,  984,  355,  356,  357,  358,  359,  360,  361,  627,
      362,  172,  452,  363,  882, 1163, 1253,  453,  454, 1254,
      883,  455,  172,  530,  456,  172,  462,  364,  531,  532,
     1164,  463,  464,  172,  530,  465,  930, 1255,  931,  531,
      532,  457,  365,  172,  354, 1256, 1198, 1257,  355,  356,
      357,  358,  359,  360,  361, 1258,  362,  466,  942,  363,
      172,  462,  172,  534,  943, 1199,  463,  464,  535,  536,
      465,  172,  534,  364,  172,  538,  609,  535,  536,  610,
      539,  540, 1259, 1260, 1267,  611, 1268,  612,  365,  172,

      367,  613,  466,  614,  927,  368,  369,  928,  929,  370,
      172,  538,  371,  372, 1133, 1103,  539,  540, 1036, 1134,
      373,  172,  542, 1104, 1037,  374, 1105,  543,  544,  375,
     1273,  376,  172,  542,  785,  377,  172,  367,  543,  544,
      786, 1274,  368,  369, 1277,  808,  370,  172,  552,  371,
      372,  809, 1278,  553,  554,  816, 1171,  373,  172,  552,
      950,  817,  374, 1172,  553,  554,  375,  951,  376,  172,
      556, 1153,  377,  416,  952,  557,  558, 1154,  417,  418,
      172,  556,  172,  560, 1226,  419,  557,  558,  561,  562,
      420,  172,  560,  421, 1181,  422, 1227,  561,  562, 1232,

     1182, 1279, 1280,  423, 1233,  424,  172,  564,  425,  426,
      172,  478,  565,  566, 1285, 1079,  479,  480,  172,  564,
      481, 1286, 1281,  482,  565,  566,  567, 1080,  483, 1287,
      484,  485, 1283,  486, 1282,  172,  570, 1081,  567,  664,
      487,  571,  572,  665, 1284,  488,  666,  489,  172,  478,
      172,  570, 1288,  667,  479,  480,  571,  572,  481, 1261,
     1289,  482, 1290, 1291, 1263, 1262,  483, 1292,  484,  485,
     1264,  486, 1293,  172,  574,  172,  574, 1294,  487,  575,
      576,  575,  576,  488, 1265,  489,  172,  494, 1295, 1296,
     1266,  495,  496,  497,  498,  499,  500,  501,  606,  502,

      172,  578,  503, 1297, 1298, 1269,  579,  580,  172,  578,
      581, 1270,  618,  582,  579,  580,  504, 1299,  581, 1271,
      583,  582, 1300,  619, 1275, 1272,  620,  621,  583,  622,
     1276,  505,  172,  494, 1301, 1302, 1303,  495,  496,  497,
      498,  499,  500,  501, 1036,  502,  172,  585,  503, 1304,
     1037, 1064,  586,  587,  172,  585,  588, 1305, 1306,  589,
      586,  587,  504, 1307,  588, 1308,  590,  589,  658, 1309,
      659, 1310,  660, 1311,  590,  661,  662,  505,  172,  507,
      900, 1312, 1313,  663,  508,  509,  901, 1314,  510,  172,
      592,  890,  511,  902,  891,  593,  594,  903, 1315,  595,

      512, 1316,  596,  917,  892,  918,  919,  893,  894,  597,
      895, 1317,  920, 1318,  932,  933, 1079,  513, 1323, 1324,
     1325,  934,  514, 1326,  515,  172,  507,  935, 1080, 1327,
      936,  508,  509, 1319, 1328,  510,  172,  592, 1321,  511,
     1329,  944,  593,  594,  945, 1320,  595,  512, 1330,  596,
     1322, 1331,  946, 1332, 1333, 1334,  597,  947, 1335, 1336,
     1337, 1338,  948, 1339,  513, 1340, 1341, 1342, 1343,  514,
     1344,  515,  172,  517,  172,  599,  172,  599,  518,  519,
      600,  601,  600,  601,  602, 1345,  602,  603, 1346,  603,
     1347, 1348, 1349,  520,  604, 1350,  604, 1351,  521, 1352,

     1353, 1355,  522, 1356,  523, 1357, 1358, 1354,  524,  172,
      517, 1359, 1360, 1361, 1362,  518,  519, 1365, 1363, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
      520, 1377, 1378, 1379, 1380,  521, 1364, 1381, 1382,  522,
     1383,  523, 1384, 1385, 1386,  524, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1414, 1415, 1416, 1417, 1412, 1422, 1423, 1424, 1426,
     1427, 1418, 1428, 1429, 1425, 1430, 1419, 1431, 1432, 1433,
     1440, 1434, 1435, 1441, 1442, 1443, 1436, 1420, 1413, 1421,

     1437, 1444, 1446, 1447, 1438, 1449, 1450, 1452, 1439, 1453,
     1456, 1457, 1458, 1445, 1459, 1460, 1461, 1224, 1451, 1226,
     1464, 1454, 1230, 1448, 1462, 1465, 1466, 1232, 1467, 1225,
     1468, 1227, 1233, 1463, 1469, 1470, 1471, 1455, 1472, 1473,
     1474, 1475, 1476, 1477, 1482, 1483, 1484, 1478, 1485, 1486,
     1487, 1479, 1488, 1489, 1490, 1480, 1491, 1492, 1493, 1481,
     1261, 1263, 1265, 1494, 1496, 1269, 1262, 1264, 1266, 1495,
     1271, 1270, 1497, 1498, 1275, 1500, 1272, 1501, 1502, 1499,
     1276, 1503, 1281, 1283, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1282, 1284, 1514, 1515, 1516, 1517,

     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
     1532, 1533, 1534, 1528, 1535, 1536, 1537, 1529, 1539, 1540,
     1541, 1530, 1319, 1321, 1542, 1531, 1543, 1544, 1538, 1545,
     1546, 1547, 1548, 1549, 1320, 1322, 1550, 1551, 1552, 1553,
     1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
     1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
     1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1606, 1607, 1608, 1604, 1609, 1610, 1605, 1611, 1612, 1613,

     1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1411, 1622,
     1623, 1624, 1625, 1412, 1626, 1628, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
     1644, 1627, 1645, 1646, 1648, 1649, 1650, 1643, 1651, 1652,
     1653, 1444, 1654, 1447, 1656, 1657, 1450, 1647, 1658, 1453,
     1659, 1660, 1661, 1445, 1662, 1663, 1664, 1462, 1451, 1665,
     1465, 1454, 1655, 1448, 1666, 1667, 1463, 1668, 1669, 1670,
     1671, 1672, 1673, 1674, 1675, 1677, 1678, 1679, 1681, 1682,
     1683, 1684, 1676, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
     1692, 1680, 1694, 1695, 1494, 1693, 1697, 1698, 1696, 1498,

     1495, 1700, 1702, 1699, 1703, 1499, 1701, 1704, 1706, 1707,
     1708, 1709, 1705, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
     1717, 1719, 1720, 1519, 1520, 1721, 1722, 1723, 1724, 1725,
     1726, 1728, 1729, 1730, 1732, 1733, 1734, 1718, 1727, 1735,
     1737, 1738, 1740, 1537, 1741, 1742, 1743, 1731, 1744, 1745,
     1739, 1736, 1746, 1747, 1748, 1538, 1749, 1750, 1751, 1752,
     1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
     1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
     1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
     1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,

     1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
     1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
     1813, 1814, 1815, 1816, 1817, 1818, 1819, 1822, 1823, 1824,
     1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
     1835, 1836, 1820, 1837, 1838, 1821, 1654, 1840, 1841, 1842,
     1843, 1845, 1846, 1848, 1849, 1851, 1839, 1852, 1853, 1854,
     1855, 1856, 1857, 1850, 1847, 1858, 1655, 1859, 1860, 1861,
     1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
     1872, 1692, 1874, 1695, 1876, 1873, 1693, 1875, 1696, 1698,
     1877, 1700, 1878, 1704, 1880, 1699, 1701, 1879, 1705, 1881,

     1882, 1883, 1884, 1885, 1886, 1887, 1888, 1717, 1889, 1890,
     1891, 1892, 1893, 1894, 1895, 1897, 1899, 1900, 1901, 1896,
     1898, 1902, 1903, 1904, 1905, 1906, 1735, 1907, 1738, 1909,
     1911, 1912, 1914, 1917, 1910, 1915, 1908, 1739, 1736, 1918,
     1916, 1750, 1751, 1913, 1752, 1753, 1919, 1920, 1921, 1923,
     1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1922, 1932,
     1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
     1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
     1953, 1955, 1956, 1957, 1958, 1954, 1959, 1960, 1961, 1962,
     1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,

     1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
     1983, 1838, 1984, 1985, 1986, 1843, 1987, 1846, 1988, 1849,
     1990, 1991, 1992, 1839, 1856, 1993, 1994, 1989, 1850, 1847,
     1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
     2005, 2006, 1872, 1874, 2007, 2009, 2011, 1873, 1875, 1878,
     2008, 2010, 2012, 2013, 1879, 2014, 2015, 2016, 2017, 2018,
     2019, 2020, 1893, 1894, 1895, 1897, 2021, 2022, 2023, 1896,
     1898, 2024, 2025, 2026, 2027, 2028, 1907, 1909, 2029, 1912,
     2031, 1915, 1910, 2032, 2033, 1908, 1916, 2034, 2035, 2036,
     2030, 1913, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,

     2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
     2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 1953, 2063,
     2064, 2065, 2066, 1954, 2067, 2068, 2069, 2070, 2071, 2072,
     2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
     2084, 2085, 2086, 2087, 2089, 1988, 2091, 2073, 2092, 2093,
     2094, 2095, 2096, 2097, 1989, 2088, 2090, 2098, 2099, 2100,
     2101, 2102, 2103, 2104, 2105, 2007, 2009, 2108, 2106, 2109,
     2111, 2008, 2010, 2107, 2110, 2113, 2114, 2115, 2018, 2116,
     2020, 2117, 2112, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
     2029, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,

     2134, 2135, 2030, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
     2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
     2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
     2163, 2164, 2087, 2089, 2165, 2166, 2167, 2168, 2169, 2170,
     2171, 2172, 2173, 2174, 2088, 2090, 2175, 2176, 2106, 2177,
     2109, 2111, 2178, 2107, 2179, 2110, 2180, 2181, 2182, 2183,
     2184, 2185, 2186, 2112, 2187, 2188, 2189, 2190, 2192, 2193,
     2194, 2195, 2191, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
     2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
     2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,

     2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232,
     2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2179,
     2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
     2242, 2190, 2253, 2254, 2255, 2256, 2191, 2257, 2258, 2259,
     2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269,
     2270, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280,
     2281, 2282, 2284, 2285, 2286, 2271, 2287, 2288, 2289, 2290,
     2291, 2292, 2293, 2283, 2294, 2295, 2241, 2296, 2297, 2298,
     2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2242, 2307,
     2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317,

     2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327,
     2328, 2282, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336,
     2337, 2338, 2339, 2283, 2296, 2340, 2341, 2342, 2343, 2344,
     2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354,
     2355, 2357, 2358, 2359, 2360, 2356, 2361, 2362, 2363, 2364,
     2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374,
     2375, 2376, 2377, 2378, 2379, 2340, 2380, 2381, 2382, 2383,
     2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2355, 2392,
     2393, 2394, 2395, 2356, 2396, 2397, 2398, 2399, 2400, 2401,
     2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411,

     2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421,
     2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431,
     2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441,
     2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451,
     2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461,
     2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471,
     2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481,
     2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491,
     2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501,
     2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511,

     2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521,
     2522, 2523, 2524, 2525, 2526, 2527, 2528, 2530, 2531, 2532,
     2533, 2534, 2536, 2537, 2538, 2539, 2540, 2541, 2529, 2542,
     2544, 2545, 2546, 2535, 2543, 2547, 2548, 2550, 2551, 2552,
     2553, 2549, 2528, 2555, 2556, 2557, 2558, 2534, 2559, 2561,
     2562, 2542, 2554, 2564, 2529, 2563, 2543, 2565, 2566, 2535,
     2560, 2567, 2548, 2568, 2570, 2553, 2571, 2549, 2569, 2573,
     2575, 2576, 2559, 2578, 2562, 2579, 2583, 2554, 2572, 2563,
     2580, 2574, 2581, 2577, 2560, 2584, 2568, 2582, 2586, 2571,
     2585, 2569, 2573, 2587, 2576, 2579, 2588, 2581, 2584, 2589,

     2580, 2572, 2582, 2585, 2574, 2590, 2577, 2592, 2590, 2592,
     1844, 1223, 2593, 1222, 2593, 1221, 1220, 2591, 1219, 1218,
     2591,  171,  171,  171,  173,  173,  173,  179,  179,  179,
      187,  187,  187,  199,  199,  199,  206,  206,  206,  222,
      222,  222,  228,  228,  228,  236,  236,  236,  249,  249,
      249,  172,  172,  172,  256,  256,  256,  261,  261,  261,
      267,  267,  267,  273,  273,  273,  278,  278,  278,  284,
      284,  284,  290,  290,  290,  291,  291,  291,  304,  304,
      304,  316,  316,  316,  325,  325,  325,  344,  344,  344,
      349,  349,  349,  353,  353,  353,  366,  366,  366,  378,

      378,  378,  385,  385,  385,  392,  392,  392,  399,  399,
      399,  409,  409,  409,  427,  427,  427,  434,  434,  434,
      441,  441,  441,  448,  448,  448,  451,  451,  451,  458,
      458,  458,  461,  461,  461,  467,  467,  467,  470,  470,
      470,  477,  477,  477,  490,  490,  490,  493,  493,  493,
      506,  506,  506,  516,  516,  516,  525,  525,  525,  529,
      529,  529,  533,  533,  533,  537,  537,  537,  541,  541,
      541,  551,  551,  551,  555,  555,  555,  559,  559,  559,
      563,  563,  563,  568,  568,  568,  569,  569,  569,  573,
      573,  573,  577,  577,  577,  584,  584,  584,  591,  591,

      591,  598,  598,  598,  608, 1217,  608, 1216, 1215, 1214,
     1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204,
     1203, 1202, 1201, 1200, 1197, 1196, 1195, 1194, 1193, 1192,
     1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1180,
     1179, 1178, 1175, 1174, 1173, 1170, 1169, 1168, 1167, 1166,
     1165, 1162, 1161, 1160, 1159, 1158, 1157, 1156, 1155, 1152,
     1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142,
     1141, 1140, 1139, 1138, 1137, 1136, 1135, 1132, 1131, 1130,
     1129, 1128, 1127, 1126, 1125, 1124, 1121, 1120, 1119, 1118,
     1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108,

     1107, 1106, 1102, 1101, 1098, 1097, 1096,  866, 1095,  864,
     1094,  862, 1093,  860,  859,  858, 1092,  856,  855,  854,
      853,  852,  851,  850,  849,  848,  847,  846, 1091, 1090,
     1089, 1088, 1087, 1086,  839, 1085, 1084,  836, 1083, 1082,
      831, 1078, 1077, 1076, 1075, 1074,  823, 1071, 1070, 1069,
      819, 1068,  815, 1067,  813, 1066,  811,  810,  807, 1063,
     1062, 1061, 1060, 1059, 1058, 1057, 1056,  797, 1055, 1054,
      794, 1053, 1052, 1051,  790,  789,  788,  787, 1050,  783,
     1049, 1048, 1047, 1046, 1045, 1044, 1043,  775, 1042, 1041,
      770,  769, 1040, 1039,  766, 1038, 1035, 1034, 1033, 1032,

     1031, 1030, 1029, 1028, 1027, 1026, 1025,  752, 1024, 1023,
      749,  748,  747, 1022, 1021,  744, 1020, 1019, 1018, 1017,
      739, 1016, 1015, 1014, 1013,  734, 1012,  732, 1011,  730,
     1010,  728, 1009, 1008, 1007,  724, 1006,  722,  721,  720,
      719, 1005, 1004, 1003, 1002, 1001, 1000,  999,  998,  710,
      997,  996,  995,  706,  994,  704,  993,  992,  991,  990,
      989,  696,  988,  987,  986,  692,  985,  982,  981,  980,
      979,  978,  977,  683,  976,  975,  974,  973,  678,  972,
      676,  971,  970,  969,  968,  967,  966,  965,  962,  961,
      958,  955,  949,  941,  940,  939,  938,  937,  926,  925,

      924,  923,  916,  915,  912,  911,  910,  909,  908,  907,
      906,  897,  896,  889,  888,  887,  879,  878,  877,  876,
      875,  874,  871,  870,  869,  868,  605,  867,  866,  865,
      864,  863,  862,  861,  860,  859,  858,  857,  856,  855,
      854,  853,  852,  851,  850,  849,  848,  847,  846,  843,
      842,  841,  840,  839,  838,  837,  836,  835,  832,  831,
      830,  829,  828,  827,  826,  825,  824,  823,  822,  821,
      820,  819,  818,  815,  814,  813,  812,  811,  810,  807,
      806,  805,  804,  803,  800,  797,  796,  795,  794,  793,
      792,  791,  790,  789,  788,  787,  784,  783,  780,  779,

      776,  775,  774,  771,  770,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  758,  757,  756,  755,  752,  751,
      750,  749,  748,  747,  746,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  725,  724,  723,  722,  721,  720,  719,
      716,  715,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  699,  698,  697,  696,  695,
      694,  693,  692,  691,  690,  689,  688,  685,  684,  683,
      682,  681,  680,  679,  678,  677,  676,  657,  644,  607,
      606,  605, 2594,  172,  172,  172,  172,  172,  172,  137,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594
    } ;

static const flex_int16_t yy_chk[3349] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        6,    6,  153,  638,    5,    5,    6,    6,   11,   11,
      638,    5,  153,    6,   11,   11,   12,   12,   21,   21,
       22,   22,   12,   12,   21,   21,   22,   22,   11,  156,
        5,  160,    6,    7,    7,  160,   12,  156,   11,    7,
        7,   15,   15,  156,   11,   23,   12,   15,   15,  161,

       23,   23,   12,   24,   15,  161,    7,  111,   24,   24,
      162,   15,  111,  111,    7,  162,    7,   16,   16,    7,
        8,    8,  272,   16,   16,  272,    8,    8,   25,   25,
       16,  993,   26,   26,   25,   25,  219,   16,   26,   26,
       79,   25,  150,    8,  219,   26,   79,   79,   29,   29,
      150,    8,  194,    8,   29,   29,    8,    9,    9,  150,
      994,  364,  194,    9,    9,   27,   27,   30,   30,  364,
        9,   27,   27,   30,   30,   27,  168,    9,    9,    9,
      168,   29,   53,   53,  611,   29,   45,  611,   53,   53,
        9,   45,   45,    9,    9,    9,   10,   10,   45,  248,

       30,   27,   10,   10,   30,   31,   31,  504,  995,   10,
      248,   31,   31,   28,   28,  504,   10,   10,   10,   28,
       28,   32,   32,   28,   43,   43,  338,   32,   32,   10,
       43,   43,   10,   10,   10,   13,   13,   31,  338,  996,
       13,   13,   13,   13,   13,   13,   13,  169,   13,   28,
      333,   13,   80,   32,  169,  333,   13,  169,   80,   80,
       43,   13,  870,   33,   33,   13,  420,   44,   44,   33,
       33,  420,   13,   44,   44,  643,  643,   33,   54,   54,
       13,   14,   14,  870,   54,   54,   14,   14,   14,   14,
       14,   14,   14,  157,   14,   33,  630,   14,   34,   34,

      630,  157,   14,   44,   34,   34,  157,   14,   35,   35,
      660,   14,   34,   83,   35,   35,   65,   65,   14,   83,
       83,   35,   65,   65,  660,  806,   14,   17,   17,   35,
       34,   36,   36,   17,   17,  628,   46,   36,   36,   84,
       17,   46,   46,  998,   36,   84,   84,  806,   46,   47,
       47,  628,   36,   48,   48,   47,   47,   51,   51,   48,
       48,  422,   17,   51,   51,   17,   17,   18,   18,  892,
      422,  155,  999,   18,   18,   52,   52,   59,   59,  892,
       18,   52,   52,   59,   59,   47,  155,   59,  155,   48,
       59,   66,   66,   51,  167,   67,  167,   66,   66,  167,

       67,   67,   18,   59, 1000,   18,   18,   19,   19,   60,
       60,   52,   67,   19,   19,   60,   60,   19,  112,   60,
       19, 1001,   60,  112,  112,   19,   61,   61,   19,   67,
       67,   19,   61,   61, 1002,   60,   61,   19,   19,   61,
       61,  159,   19,   19,   20,   20,   62,   62, 1003,  159,
       20,   20,   62,   62,   20,  159,   62,   20, 1004,   62,
       62,  113,   20,   63,   63,   20,  113,  113,   20,   63,
       63, 1005,  374,   63,   20,   20,   63,   63,  374,   20,
       20,   39,   39,   64,   64, 1006,  377,   39,   39,   64,
       64,   39,  377,   64,   39,   39,   64,   64,   68,   69,

       69,   39,   39,   68,   68,   69,   69,   39,  114,  618,
      668,  618,   69,  114,  114,   68,   87,   69, 1007,   39,
       69,  668,   87,   87,   88,   39, 1008,   39,   40,   40,
       88,   88,   68,   68,   40,   40,  163,   93,   40,   70,
       70,   40,   40,   93,   93,   70,   70,  946,   40,   40,
      163,  946,   70,  163,   40,   73,   73,   70,  662,  662,
       70,   73,   73, 1009,   94,   73,   40,  386,   73,   73,
       94,   94,   40,  386,   40,   41,   41,   74,   74,   89,
       89,   41,   41,   74,   74,   89,   89,   74,   41,   41,
       74,   74,   75,   75,  435,   41,   41,   89,   75,   75,

      435,   41,   75, 1010,   89,   75,   75, 1011,   90,   90,
       89,  101,  101,   41,   90,   90,  824,  101,  101,   41,
      991,   41,   42,   42,   76,   76,   90,  824,   42,   42,
       76,   76,  991,   90,   76,   42,   42,   76,   76,   90,
       77,   77,   42,   42,  664,  664,   77,   77,   42,  464,
       77,   78,   78,   77, 1012,  464,  154,   78,   78,  154,
       42,   78,  154,  154,   78,  154,   42, 1013,   42,   49,
       77,  524,   81,   81,   49,   49, 1014,  524,   81,   81,
     1015,   78,   81,  102,  102,   81,   49,   49,   49,  102,
      102,   49,   49, 1016,   49,  152,  620,   49,  620,  152,

      620,   49,   81,  152,   49,   49,   49,   55,   55,  152,
      690,  690,   55,   55,   55,   55,   55,   55,   55,  152,
       55,   82,   82,   55,  619,  934, 1017,   82,   82, 1018,
      619,   82,  103,  103,   82,   85,   85,   55,  103,  103,
      934,   85,   85,  104,  104,   85,  649, 1019,  649,  104,
      104,   82,   55,   56,   56, 1020,  966, 1021,   56,   56,
       56,   56,   56,   56,   56, 1022,   56,   85,  656,   56,
       86,   86,  105,  105,  656,  966,   86,   86,  105,  105,
       86,  106,  106,   56,  107,  107,  149,  106,  106,  149,
      107,  107, 1023, 1024, 1028,  149, 1029,  149,   56,   57,

       57,  149,   86,  149,  648,   57,   57,  648,  648,   57,
      108,  108,   57,   57,  903,  873,  108,  108,  764,  903,
       57,  109,  109,  873,  764,   57,  873,  109,  109,   57,
     1032,   57,  110,  110,  785,   57,   58,   58,  110,  110,
      785, 1033,   58,   58, 1035,  808,   58,  115,  115,   58,
       58,  808, 1038,  115,  115,  816,  942,   58,  116,  116,
      659,  816,   58,  942,  116,  116,   58,  659,   58,  117,
      117,  925,   58,   71,  659,  117,  117,  925,   71,   71,
      118,  118,  119,  119,  992,   71,  118,  118,  119,  119,
       71,  120,  120,   71,  950,   71,  992,  120,  120,  997,

      950, 1039, 1040,   71,  997,   71,  121,  121,   71,   71,
       91,   91,  121,  121, 1043,  830,   91,   91,  122,  122,
       91, 1044, 1041,   91,  122,  122,  121,  830,   91, 1045,
       91,   91, 1042,   91, 1041,  125,  125,  830,  122,  166,
       91,  125,  125,  166, 1042,   91,  166,   91,   92,   92,
      126,  126, 1046,  166,   92,   92,  126,  126,   92, 1025,
     1048,   92, 1049, 1050, 1026, 1025,   92, 1051,   92,   92,
     1026,   92, 1052,  127,  127,  128,  128, 1053,   92,  127,
      127,  128,  128,   92, 1027,   92,   95,   95, 1054, 1055,
     1027,   95,   95,   95,   95,   95,   95,   95,  151,   95,

      129,  129,   95, 1056, 1057, 1030,  129,  129,  130,  130,
      129, 1030,  151,  129,  130,  130,   95, 1058,  130, 1031,
      129,  130, 1059,  151, 1034, 1031,  151,  151,  130,  151,
     1034,   95,   96,   96, 1060, 1061, 1062,   96,   96,   96,
       96,   96,   96,   96, 1036,   96,  131,  131,   96, 1063,
     1036, 1064,  131,  131,  132,  132,  131, 1065, 1066,  131,
      132,  132,   96, 1067,  132, 1068,  131,  132,  165, 1070,
      165, 1071,  165, 1072,  132,  165,  165,   96,   97,   97,
      629, 1073, 1074,  165,   97,   97,  629, 1075,   97,  133,
      133,  624,   97,  629,  624,  133,  133,  629, 1076,  133,

       97, 1077,  133,  642,  624,  642,  642,  624,  624,  133,
      624, 1078,  642, 1081,  650,  650, 1079,   97, 1084, 1085,
     1086,  650,   97, 1087,   97,   98,   98,  650, 1079, 1088,
      650,   98,   98, 1082, 1090,   98,  134,  134, 1083,   98,
     1091,  657,  134,  134,  657, 1082,  134,   98, 1092,  134,
     1083, 1093,  657, 1094, 1095, 1096,  134,  657, 1097, 1098,
     1099, 1100,  657, 1101,   98, 1102, 1103, 1104, 1105,   98,
     1107,   98,   99,   99,  135,  135,  136,  136,   99,   99,
      135,  135,  136,  136,  135, 1108,  136,  135, 1110,  136,
     1111, 1112, 1113,   99,  135, 1114,  136, 1115,   99, 1116,

     1117, 1118,   99, 1120,   99, 1121, 1122, 1117,   99,  100,
      100, 1123, 1124, 1125, 1126,  100,  100, 1128, 1127, 1129,
     1130, 1134, 1135, 1136, 1137, 1140, 1141, 1143, 1146, 1147,
      100, 1148, 1149, 1150, 1152,  100, 1127, 1153, 1156,  100,
     1157,  100, 1158, 1159, 1160,  100, 1161, 1162, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176,
     1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187,
     1188, 1189, 1190, 1191, 1192, 1188, 1193, 1194, 1195, 1196,
     1197, 1192, 1198, 1199, 1195, 1200, 1192, 1201, 1203, 1204,
     1206, 1205, 1205, 1208, 1209, 1210, 1205, 1192, 1188, 1192,

     1205, 1211, 1212, 1213, 1205, 1214, 1215, 1216, 1205, 1217,
     1218, 1219, 1220, 1211, 1221, 1222, 1223, 1224, 1215, 1226,
     1229, 1217, 1230, 1213, 1228, 1231, 1235, 1232, 1236, 1224,
     1237, 1226, 1232, 1228, 1238, 1239, 1241, 1217, 1242, 1243,
     1244, 1245, 1246, 1246, 1247, 1248, 1249, 1246, 1250, 1251,
     1253, 1246, 1254, 1255, 1257, 1246, 1258, 1259, 1260, 1246,
     1261, 1263, 1265, 1267, 1268, 1269, 1261, 1263, 1265, 1267,
     1271, 1269, 1273, 1274, 1275, 1277, 1271, 1278, 1279, 1274,
     1275, 1280, 1281, 1283, 1285, 1286, 1287, 1288, 1290, 1291,
     1292, 1293, 1294, 1295, 1281, 1283, 1296, 1297, 1298, 1299,

     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1308,
     1310, 1311, 1312, 1308, 1313, 1314, 1315, 1308, 1316, 1317,
     1318, 1308, 1319, 1321, 1323, 1308, 1324, 1325, 1315, 1326,
     1327, 1329, 1330, 1331, 1319, 1321, 1332, 1333, 1334, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347,
     1348, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
     1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368, 1370,
     1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
     1382, 1383, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
     1393, 1394, 1396, 1392, 1397, 1398, 1392, 1399, 1400, 1401,

     1402, 1403, 1404, 1405, 1406, 1408, 1409, 1410, 1411, 1413,
     1414, 1415, 1416, 1411, 1417, 1418, 1419, 1420, 1421, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1434,
     1435, 1417, 1436, 1437, 1438, 1439, 1440, 1434, 1441, 1442,
     1443, 1444, 1446, 1447, 1448, 1449, 1450, 1437, 1452, 1453,
     1455, 1456, 1458, 1444, 1459, 1460, 1461, 1462, 1450, 1464,
     1465, 1453, 1446, 1447, 1466, 1467, 1462, 1468, 1469, 1470,
     1471, 1472, 1473, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
     1482, 1483, 1476, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
     1491, 1479, 1492, 1493, 1494, 1491, 1496, 1497, 1493, 1498,

     1494, 1500, 1501, 1497, 1502, 1498, 1500, 1503, 1504, 1506,
     1507, 1508, 1503, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1532, 1516, 1526, 1533,
     1534, 1535, 1536, 1537, 1539, 1540, 1541, 1529, 1542, 1543,
     1535, 1533, 1544, 1546, 1547, 1537, 1548, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
     1562, 1563, 1564, 1565, 1566, 1567, 1569, 1570, 1571, 1572,
     1575, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1596, 1597, 1598, 1600,

     1601, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1622,
     1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1637,
     1638, 1639, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
     1649, 1650, 1632, 1651, 1653, 1632, 1654, 1655, 1656, 1657,
     1658, 1659, 1660, 1663, 1664, 1665, 1653, 1666, 1668, 1669,
     1670, 1672, 1673, 1664, 1660, 1675, 1654, 1676, 1677, 1678,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1687, 1688, 1690,
     1691, 1692, 1694, 1695, 1697, 1691, 1692, 1694, 1695, 1698,
     1702, 1700, 1703, 1704, 1707, 1698, 1700, 1703, 1704, 1708,

     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
     1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1724,
     1725, 1729, 1730, 1731, 1732, 1733, 1735, 1737, 1738, 1741,
     1742, 1743, 1744, 1747, 1741, 1745, 1737, 1738, 1735, 1749,
     1745, 1750, 1751, 1743, 1752, 1753, 1757, 1759, 1760, 1761,
     1762, 1764, 1767, 1768, 1769, 1770, 1772, 1774, 1760, 1775,
     1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1787, 1788, 1789, 1790, 1792, 1793, 1794, 1795, 1796,
     1797, 1798, 1799, 1801, 1802, 1797, 1805, 1806, 1809, 1810,
     1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1822, 1824,

     1825, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
     1836, 1838, 1840, 1841, 1842, 1843, 1845, 1846, 1848, 1849,
     1851, 1853, 1854, 1838, 1856, 1857, 1858, 1848, 1849, 1846,
     1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1868, 1869,
     1870, 1871, 1872, 1874, 1876, 1877, 1880, 1872, 1874, 1878,
     1876, 1877, 1881, 1882, 1878, 1886, 1887, 1888, 1889, 1890,
     1891, 1892, 1893, 1894, 1895, 1897, 1899, 1900, 1901, 1895,
     1897, 1902, 1903, 1904, 1905, 1906, 1907, 1909, 1911, 1912,
     1914, 1915, 1909, 1917, 1918, 1907, 1915, 1920, 1922, 1923,
     1911, 1912, 1924, 1925, 1927, 1928, 1930, 1931, 1932, 1933,

     1934, 1935, 1936, 1937, 1938, 1939, 1940, 1942, 1943, 1944,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1957,
     1958, 1960, 1963, 1953, 1964, 1965, 1968, 1969, 1970, 1971,
     1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
     1982, 1983, 1984, 1986, 1987, 1988, 1990, 1971, 1991, 1992,
     1994, 1995, 1996, 1997, 1988, 1986, 1987, 1998, 1999, 2000,
     2001, 2003, 2004, 2005, 2006, 2007, 2009, 2012, 2011, 2013,
     2014, 2007, 2009, 2011, 2013, 2015, 2016, 2017, 2018, 2019,
     2020, 2021, 2014, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
     2029, 2031, 2032, 2033, 2036, 2037, 2038, 2040, 2041, 2042,

     2043, 2044, 2029, 2045, 2048, 2050, 2051, 2053, 2054, 2055,
     2057, 2058, 2059, 2062, 2065, 2066, 2067, 2070, 2071, 2072,
     2073, 2074, 2075, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
     2084, 2085, 2087, 2089, 2091, 2093, 2094, 2095, 2096, 2097,
     2098, 2099, 2100, 2101, 2087, 2089, 2103, 2105, 2106, 2108,
     2109, 2111, 2113, 2106, 2114, 2109, 2115, 2116, 2117, 2118,
     2119, 2120, 2121, 2111, 2122, 2123, 2124, 2125, 2126, 2127,
     2128, 2129, 2125, 2130, 2131, 2133, 2134, 2136, 2137, 2138,
     2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2149,
     2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,

     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
     2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179,
     2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
     2178, 2190, 2192, 2194, 2195, 2196, 2190, 2199, 2200, 2201,
     2202, 2203, 2205, 2207, 2211, 2212, 2213, 2214, 2215, 2216,
     2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
     2227, 2228, 2229, 2230, 2231, 2217, 2232, 2233, 2234, 2235,
     2236, 2237, 2238, 2228, 2239, 2240, 2241, 2243, 2244, 2245,
     2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2241, 2255,
     2257, 2258, 2260, 2262, 2263, 2264, 2265, 2267, 2268, 2269,

     2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279,
     2280, 2282, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292,
     2293, 2294, 2295, 2282, 2296, 2297, 2298, 2299, 2300, 2301,
     2302, 2303, 2304, 2305, 2306, 2307, 2309, 2310, 2313, 2314,
     2315, 2316, 2317, 2318, 2319, 2315, 2320, 2321, 2322, 2323,
     2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333,
     2334, 2335, 2336, 2337, 2338, 2340, 2341, 2342, 2343, 2344,
     2345, 2346, 2347, 2348, 2350, 2351, 2352, 2353, 2355, 2357,
     2358, 2359, 2361, 2355, 2362, 2363, 2364, 2365, 2366, 2367,
     2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377,

     2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389,
     2393, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404,
     2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414,
     2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424,
     2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434,
     2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444,
     2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454,
     2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464,
     2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474,
     2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485,

     2487, 2488, 2489, 2490, 2492, 2493, 2494, 2495, 2496, 2497,
     2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507,
     2508, 2509, 2510, 2512, 2513, 2514, 2515, 2517, 2504, 2518,
     2519, 2520, 2521, 2509, 2518, 2522, 2523, 2524, 2525, 2526,
     2527, 2523, 2528, 2530, 2531, 2532, 2533, 2534, 2536, 2539,
     2541, 2542, 2527, 2544, 2528, 2541, 2542, 2545, 2546, 2534,
     2536, 2547, 2548, 2550, 2551, 2553, 2555, 2548, 2550, 2556,
     2557, 2558, 2559, 2561, 2562, 2564, 2566, 2553, 2555, 2562,
     2564, 2556, 2565, 2558, 2559, 2567, 2568, 2565, 2570, 2571,
     2567, 2568, 2573, 2575, 2576, 2579, 2583, 2581, 2584, 2586,

     2579, 2571, 2581, 2584, 2573, 2587, 2576, 2588, 2590, 2592,
     2657,  990, 2588,  989, 2592,  988,  987, 2587,  986,  985,
     2590, 2595, 2595, 2595, 2596, 2596, 2596, 2597, 2597, 2597,
     2598, 2598, 2598, 2599, 2599, 2599, 2600, 2600, 2600, 2601,
     2601, 2601, 2602, 2602, 2602, 2603, 2603, 2603, 2604, 2604,
     2604, 2605, 2605, 2605, 2606, 2606, 2606, 2607, 2607, 2607,
     2608, 2608, 2608, 2609, 2609, 2609, 2610, 2610, 2610, 2611,
     2611, 2611, 2612, 2612, 2612, 2613, 2613, 2613, 2614, 2614,
     2614, 2615, 2615, 2615, 2616, 2616, 2616, 2617, 2617, 2617,
     2618, 2618, 2618, 2619, 2619, 2619, 2620, 2620, 2620, 2621,

     2621, 2621, 2622, 2622, 2622, 2623, 2623, 2623, 2624, 2624,
     2624, 2625, 2625, 2625, 2626, 2626, 2626, 2627, 2627, 2627,
     2628, 2628, 2628, 2629, 2629, 2629, 2630, 2630, 2630, 2631,
     2631, 2631, 2632, 2632, 2632, 2633, 2633, 2633, 2634, 2634,
     2634, 2635, 2635, 2635, 2636, 2636, 2636, 2637, 2637, 2637,
     2638, 2638, 2638, 2639, 2639, 2639, 2640, 2640, 2640, 2641,
     2641, 2641, 2642, 2642, 2642, 2643, 2643, 2643, 2644, 2644,
     2644, 2645, 2645, 2645, 2646, 2646, 2646, 2647, 2647, 2647,
     2648, 2648, 2648, 2649, 2649, 2649, 2650, 2650, 2650, 2651,
     2651, 2651, 2652, 2652, 2652, 2653, 2653, 2653, 2654, 2654,

     2654, 2655, 2655, 2655, 2656,  984, 2656,  983,  982,  981,
      980,  979,  978,  977,  976,  975,  974,  973,  972,  971,
      970,  969,  968,  967,  965,  964,  963,  962,  961,  960,
      959,  958,  957,  956,  955,  954,  953,  952,  951,  949,
      948,  947,  945,  944,  943,  941,  940,  939,  937,  936,
      935,  933,  932,  931,  930,  929,  928,  927,  926,  924,
      923,  921,  920,  919,  918,  917,  916,  915,  914,  913,
      912,  910,  909,  908,  906,  905,  904,  902,  901,  900,
      899,  897,  896,  895,  894,  893,  891,  890,  889,  888,
      886,  885,  884,  883,  882,  881,  880,  879,  878,  877,

      876,  875,  872,  871,  869,  868,  867,  866,  865,  864,
      863,  862,  861,  860,  859,  858,  857,  856,  855,  854,
      853,  852,  851,  850,  849,  848,  847,  846,  845,  844,
      843,  842,  841,  840,  839,  838,  837,  836,  834,  833,
      831,  829,  828,  827,  826,  825,  823,  822,  821,  820,
      819,  818,  815,  814,  813,  812,  811,  810,  807,  805,
      804,  803,  802,  801,  800,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  790,  789,  788,  787,  784,  783,
      782,  781,  780,  779,  778,  777,  776,  775,  773,  772,
      770,  769,  768,  767,  766,  765,  763,  762,  761,  760,

      759,  758,  757,  756,  755,  754,  753,  752,  751,  750,
      749,  748,  747,  746,  745,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  702,  701,  700,  699,
      698,  696,  695,  694,  693,  692,  691,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  666,  665,
      663,  661,  658,  655,  654,  653,  652,  651,  647,  646,

      645,  644,  640,  639,  637,  636,  635,  634,  633,  632,
      631,  627,  625,  623,  622,  621,  617,  616,  615,  614,
      613,  612,  610,  609,  607,  606,  605,  604,  599,  597,
      592,  590,  585,  583,  578,  574,  570,  567,  564,  560,
      556,  552,  548,  545,  542,  538,  534,  530,  526,  523,
      522,  521,  520,  517,  513,  512,  507,  505,  495,  494,
      489,  488,  487,  486,  485,  484,  483,  478,  476,  475,
      474,  471,  466,  462,  457,  452,  447,  442,  436,  428,
      426,  425,  424,  423,  421,  416,  415,  414,  410,  408,
      407,  406,  403,  400,  393,  387,  384,  379,  376,  375,

      373,  367,  365,  355,  354,  350,  348,  346,  345,  343,
      342,  341,  340,  339,  337,  336,  335,  334,  330,  329,
      327,  326,  322,  321,  320,  318,  317,  313,  312,  311,
      310,  305,  301,  300,  299,  298,  292,  289,  285,  283,
      279,  277,  274,  271,  268,  266,  262,  257,  253,  250,
      247,  246,  245,  244,  243,  242,  237,  235,  234,  233,
      229,  227,  223,  221,  220,  218,  217,  208,  207,  205,
      204,  203,  200,  198,  197,  196,  195,  193,  192,  188,
      186,  185,  184,  183,  180,  178,  174,  164,  158,  142,
      141,  140,  137,  124,  123,   38,   37,    4,    3, 2594,

     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "omplexer.ll"
/*
 * Copyright (c) 2018-2020, High Performance Computing Architecture and System
 * research laboratory at University of North Carolina at Charlotte (HPCAS@UNCC)
 * and Lawrence Livermore National Security, LLC.
 *
 * SPDX-License-Identifier: (BSD-3-Clause)
 */



































































#line 83 "omplexer.ll"

/* DQ (12/10/2016): This is a technique to suppress warnings in generated code that we want to be an error elsewhere in ROSE. 
   See https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html for more detail.
 */
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
#pragma GCC diagnostic ignored "-Wsign-compare"
#endif

/* lex requires me to use extern "C" here */
extern "C" int openmp_wrap() { return 1; }

extern int openmp_lex();
extern void * (*exprParse)(const char*);

#include <stdio.h>
#include <string>
#include <string.h>
#include <fstream>
#include "ompparser.hh"

extern std::ofstream logFile;

/* Moved from Makefile.am to the source file to work with --with-pch 
Liao 12/10/2009 */
#define YY_NO_TOP_STATE
#define YY_NO_POP_STATE

static const char* ompparserinput = NULL;
static std::string current_string;
static int parenthesis_local_count=0, parenthesis_global_count = 1, bracket_count;
static int brace_count = 0;
static char current_char;

/* Liao 6/11/2010,
OpenMP does not preclude the use of clause names as regular variable names.
For example, num_threads could be a clause name or a variable in the variable list.

We introduce a flag to indicate the context: within a variable list like (a,y,y) or outside of it
  We check '(' or ')' to set it to true or false as parsing proceed */
extern bool b_within_variable_list ; /* = false; */

/* pass user specified string to buf, indicate the size using 'result', 
   and shift the current position pointer of user input afterwards 
   to prepare next round of token recognition!!
*/
#define YY_INPUT(buf, result, max_size) { \
                if (*ompparserinput == '\0') result = 0; \
                else { strncpy(buf, ompparserinput, max_size); \
                        buf[max_size] = 0; \
                        result = strlen(buf); \
                        ompparserinput += result; \
                } \
                }

#line 2435 "omplexer.cc"
#line 2436 "omplexer.cc"

#define INITIAL 0
#define EXPR_STATE 1
#define ALLOCATE_STATE 2
#define DEFAULT_STATE 3
#define IF_STATE 4
#define PROC_BIND_STATE 5
#define REDUCTION_STATE 6
#define LASTPRIVATE_STATE 7
#define LINEAR_STATE 8
#define SCHEDULE_STATE 9
#define COLLAPSE_STATE 10
#define ORDERED_STATE 11
#define ALIGNED_STATE 12
#define DIST_SCHEDULE_STATE 13
#define BIND_STATE 14
#define ALLOCATOR_STATE 15
#define INITIALIZER_STATE 16
#define MAPPER_STATE 17
#define TYPE_STR_STATE 18
#define WHEN_STATE 19
#define MATCH_STATE 20
#define ISA_STATE 21
#define SCORE_STATE 22
#define CONDITION_STATE 23
#define VENDOR_STATE 24
#define ARCH_STATE 25
#define EXTENSION_STATE 26
#define IN_REDUCTION_STATE 27
#define DEPEND_STATE 28
#define AFFINITY_STATE 29
#define AFFINITY_EXPR_STATE 30
#define AFFINITY_ITERATOR_STATE 31
#define FINAL_STATE 32
#define ATOMIC_DEFAULT_MEM_ORDER_STATE 33
#define DEVICE_STATE 34
#define DEFAULTMAP_STATE 35
#define DEPEND_ITERATOR_STATE 36
#define DEPEND_EXPR_STATE 37
#define TO_STATE 38
#define TO_MAPPER_STATE 39
#define FROM_STATE 40
#define FROM_MAPPER_STATE 41
#define USES_ALLOCATORS_STATE 42
#define ALLOC_EXPR_STATE 43
#define DEVICE_TYPE_STATE 44
#define MAP_STATE 45
#define MAP_MAPPER_STATE 46
#define TASK_REDUCTION_STATE 47
#define IMPLEMENTATION_STATE 48
#define UPDATE_STATE 49
#define PRIVATE_STATE 50
#define FIRSTPRIVATE_STATE 51
#define SIMDLEN_STATE 52
#define SAFELEN_STATE 53
#define NONTEMPORAL_STATE 54
#define SIMD_STATE 55
#define THREADPRIVATE_STATE 56
#define SHARED_STATE 57
#define COPYIN_STATE 58
#define COPYPRIVATE_STATE 59
#define ORDER_STATE 60
#define ID_EXPR_STATE 61
#define ALLOC_STATE 62
#define BROAD_STATE 63
#define SCATTER_STATE 64
#define GATHER_STATE 65
#define ALLGATHER_STATE 66
#define HALO_STATE 67

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 143 "omplexer.ll"


#line 2731 "omplexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2595 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3300 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 145 "omplexer.ll"
{ ; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 146 "omplexer.ll"
{ ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 147 "omplexer.ll"
{ ; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 148 "omplexer.ll"
{ return PARALLEL; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 149 "omplexer.ll"
{ return METADIRECTIVE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 150 "omplexer.ll"
{ return TASK; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 151 "omplexer.ll"
{ yy_push_state(IF_STATE); return IF; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 152 "omplexer.ll"
{ yy_push_state(SIMDLEN_STATE); return SIMDLEN; }
	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 153 "omplexer.ll"
{ yy_push_state(SIMD_STATE); return SIMD; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 154 "omplexer.ll"
{ return SIMD; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 155 "omplexer.ll"
{ return NUM_THREADS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 156 "omplexer.ll"
{ return NUM_TEAMS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 157 "omplexer.ll"
{ return THREAD_LIMIT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 158 "omplexer.ll"
{ yy_push_state(DEFAULT_STATE); return DEFAULT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 159 "omplexer.ll"
{ yy_push_state(PRIVATE_STATE); return PRIVATE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 160 "omplexer.ll"
{ yy_push_state(FIRSTPRIVATE_STATE); return FIRSTPRIVATE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 161 "omplexer.ll"
{ yy_push_state(SHARED_STATE); return SHARED; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 162 "omplexer.ll"
{ return NONE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 163 "omplexer.ll"
{ yy_push_state(REDUCTION_STATE); logFile << "ENCUENTRA REDUCTION\n"; return REDUCTION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 164 "omplexer.ll"
{ yy_push_state(COPYIN_STATE); return COPYIN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 165 "omplexer.ll"
{ yy_push_state(PROC_BIND_STATE); return PROC_BIND; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 166 "omplexer.ll"
{ yy_push_state(ALLOCATE_STATE); return ALLOCATE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 167 "omplexer.ll"
{ return CLOSE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 168 "omplexer.ll"
{ return SPREAD; } /* master should already be recognized */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 169 "omplexer.ll"
{ return TEAMS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 170 "omplexer.ll"
{ return MASTER; } /*YAYING */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 171 "omplexer.ll"
{ return FOR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 172 "omplexer.ll"
{ return DO; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 173 "omplexer.ll"
{ yy_push_state(LASTPRIVATE_STATE); return LASTPRIVATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 174 "omplexer.ll"
{ yy_push_state(LINEAR_STATE); return LINEAR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 175 "omplexer.ll"
{ yy_push_state(SCHEDULE_STATE); return SCHEDULE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 176 "omplexer.ll"
{ yy_push_state(COLLAPSE_STATE); return COLLAPSE; }
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 177 "omplexer.ll"
{ yy_push_state(ORDERED_STATE); return ORDERED; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 178 "omplexer.ll"
{ return ORDERED; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 179 "omplexer.ll"
{ return NOWAIT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 180 "omplexer.ll"
{ yy_push_state(ORDER_STATE); return ORDER; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 181 "omplexer.ll"
{ yy_push_state(SAFELEN_STATE); return SAFELEN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 182 "omplexer.ll"
{ yy_push_state(NONTEMPORAL_STATE); return NONTEMPORAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 183 "omplexer.ll"
{ yy_push_state(ALIGNED_STATE); return ALIGNED; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 184 "omplexer.ll"
{ return ALIGN; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 185 "omplexer.ll"
{ return DECLARE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 186 "omplexer.ll"
{ return UNIFORM; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 187 "omplexer.ll"
{ return INBRANCH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 188 "omplexer.ll"
{ return NOTINBRANCH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 189 "omplexer.ll"
{ return DISTRIBUTE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 190 "omplexer.ll"
{ yy_push_state(DIST_SCHEDULE_STATE); return DIST_SCHEDULE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 191 "omplexer.ll"
{ return LOOP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 192 "omplexer.ll"
{ yy_push_state(BIND_STATE); return BIND; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 193 "omplexer.ll"
{ return SCAN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 194 "omplexer.ll"
{ return INCLUSIVE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 195 "omplexer.ll"
{ return EXCLUSIVE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 196 "omplexer.ll"
{ return SECTIONS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 197 "omplexer.ll"
{ return SECTION; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 198 "omplexer.ll"
{ return SINGLE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 199 "omplexer.ll"
{ yy_push_state(COPYPRIVATE_STATE); return COPYPRIVATE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 200 "omplexer.ll"
{ return CANCEL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 201 "omplexer.ll"
{ return WORKSHARE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 202 "omplexer.ll"
{ return TASKGROUP; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 203 "omplexer.ll"
{ yy_push_state(ALLOCATOR_STATE); return ALLOCATOR; }
	YY_BREAK
case 60:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 13;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 204 "omplexer.ll"
{ yy_push_state(THREADPRIVATE_STATE); return THREADPRIVATE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 205 "omplexer.ll"
{ return THREADPRIVATE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 206 "omplexer.ll"
{ return CANCELLATION; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 207 "omplexer.ll"
{ return POINT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 208 "omplexer.ll"
{ return VARIANT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 209 "omplexer.ll"
{ yy_push_state(WHEN_STATE); return WHEN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 210 "omplexer.ll"
{ yy_push_state(MATCH_STATE); return MATCH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 211 "omplexer.ll"
{ yy_push_state(INITIALIZER_STATE); return INITIALIZER; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 212 "omplexer.ll"
{ yy_push_state(MAPPER_STATE); return MAPPER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 214 "omplexer.ll"
{ return END; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 215 "omplexer.ll"
{ return SCORE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 216 "omplexer.ll"
{ yy_push_state(CONDITION_STATE); return CONDITION; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 217 "omplexer.ll"
{ return KIND; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 218 "omplexer.ll"
{ return HOST; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 219 "omplexer.ll"
{ return NOHOST; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 220 "omplexer.ll"
{ return ANY; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 221 "omplexer.ll"
{ return CPU; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 222 "omplexer.ll"
{ return GPU; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 223 "omplexer.ll"
{ return FPGA; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 224 "omplexer.ll"
{ yy_push_state(ISA_STATE); return ISA; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 225 "omplexer.ll"
{ yy_push_state(ARCH_STATE); return ARCH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 226 "omplexer.ll"
{ yy_push_state(VENDOR_STATE); return VENDOR; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 227 "omplexer.ll"
{ yy_push_state(EXTENSION_STATE); return EXTENSION; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 229 "omplexer.ll"
{ yy_push_state(FINAL_STATE); return FINAL; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 230 "omplexer.ll"
{ return UNTIED; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 231 "omplexer.ll"
{ return MERGEABLE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 232 "omplexer.ll"
{ yy_push_state(IN_REDUCTION_STATE); return IN_REDUCTION; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 233 "omplexer.ll"
{ yy_push_state(DEPEND_STATE); return DEPEND; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 234 "omplexer.ll"
{ return PRIORITY; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 235 "omplexer.ll"
{ yy_push_state(AFFINITY_STATE); return AFFINITY; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 236 "omplexer.ll"
{ return DETACH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 238 "omplexer.ll"
{ return TASKLOOP; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 239 "omplexer.ll"
{ return TASKYIELD; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 240 "omplexer.ll"
{ return GRAINSIZE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 241 "omplexer.ll"
{ return NUM_TASKS; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 242 "omplexer.ll"
{ return NOGROUP; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 244 "omplexer.ll"
{ return REQUIRES; } 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 245 "omplexer.ll"
{ return REVERSE_OFFLOAD; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 246 "omplexer.ll"
{ return UNIFIED_ADDRESS; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 247 "omplexer.ll"
{ return UNIFIED_SHARED_MEMORY; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 248 "omplexer.ll"
{ yy_push_state(ATOMIC_DEFAULT_MEM_ORDER_STATE); return ATOMIC_DEFAULT_MEM_ORDER; } 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 249 "omplexer.ll"
{ return DYNAMIC_ALLOCATORS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 250 "omplexer.ll"
{ return SEQ_CST; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 251 "omplexer.ll"
{ return ACQ_REL; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 252 "omplexer.ll"
{ return RELAXED; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 253 "omplexer.ll"
{ return TARGET; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 254 "omplexer.ll"
{ return DATA; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 255 "omplexer.ll"
{ yy_push_state(DEVICE_STATE); return DEVICE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 256 "omplexer.ll"
{ return USE_DEVICE_PTR; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 257 "omplexer.ll"
{ return USE_DEVICE_ADDR; }  
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 258 "omplexer.ll"
{ return ENTER; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 259 "omplexer.ll"
{ return EXIT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 260 "omplexer.ll"
{ return IS_DEVICE_PTR; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 261 "omplexer.ll"
{ return HAS_DEVICE_ADDR; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 262 "omplexer.ll"
{ yy_push_state(DEFAULTMAP_STATE); return DEFAULTMAP; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 263 "omplexer.ll"
{ yy_push_state(UPDATE_STATE); return UPDATE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 265 "omplexer.ll"
{ yy_push_state(TO_STATE); return TO; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 266 "omplexer.ll"
{ yy_push_state(FROM_STATE); return FROM; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 267 "omplexer.ll"
{ yy_push_state(USES_ALLOCATORS_STATE); return USES_ALLOCATORS; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 268 "omplexer.ll"
{ return LINK; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 269 "omplexer.ll"
{ yy_push_state(DEVICE_TYPE_STATE); return DEVICE_TYPE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 270 "omplexer.ll"
{ yy_push_state(MAP_STATE); return MAP; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 271 "omplexer.ll"
{ parenthesis_global_count = 0; yy_push_state(EXPR_STATE); return EXT_; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 272 "omplexer.ll"
{ return BARRIER; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 273 "omplexer.ll"
{ return TASKWAIT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 274 "omplexer.ll"
{ yy_push_state(TASK_REDUCTION_STATE); return TASK_REDUCTION; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 275 "omplexer.ll"
{ return FLUSH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 276 "omplexer.ll"
{ return RELEASE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 277 "omplexer.ll"
{ return ACQUIRE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 278 "omplexer.ll"
{ return ATOMIC; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 279 "omplexer.ll"
{ return READ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 280 "omplexer.ll"
{ return WRITE; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 281 "omplexer.ll"
{ return CAPTURE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 282 "omplexer.ll"
{ return HINT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 283 "omplexer.ll"
{ return CRITICAL; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 284 "omplexer.ll"
{ return DEPOBJ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 285 "omplexer.ll"
{ return DESTROY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 286 "omplexer.ll"
{ return THREADS; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 288 "omplexer.ll"
{ return CLUSTER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 289 "omplexer.ll"
{ return TASK_ASYNC; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 290 "omplexer.ll"
{ yy_push_state(ALLOC_STATE); return ALLOC; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 291 "omplexer.ll"
{ yy_push_state(BROAD_STATE); return BROAD; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 292 "omplexer.ll"
{ yy_push_state(SCATTER_STATE); return SCATTER; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 293 "omplexer.ll"
{ yy_push_state(GATHER_STATE); return GATHER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 294 "omplexer.ll"
{ yy_push_state(ALLGATHER_STATE); return ALLGATHER; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 295 "omplexer.ll"
{ yy_push_state(HALO_STATE); return HALO; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 296 "omplexer.ll"
{ yy_push_state(REDUCTION_STATE); return ALLREDUCTION; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 298 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 299 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 300 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 301 "omplexer.ll"
{ yy_pop_state(); return '}'; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 302 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 303 "omplexer.ll"
{ ; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 305 "omplexer.ll"
{ ; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 308 "omplexer.ll"
{ ; }
	YY_BREAK
case 155:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 310 "omplexer.ll"
{ return DEFAULT_MEM_ALLOC; }
	YY_BREAK
case 156:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 23;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 311 "omplexer.ll"
{ return LARGE_CAP_MEM_ALLOC; }
	YY_BREAK
case 157:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 312 "omplexer.ll"
{ return CONST_MEM_ALLOC; }
	YY_BREAK
case 158:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 313 "omplexer.ll"
{ return HIGH_BW_MEM_ALLOC; }
	YY_BREAK
case 159:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 314 "omplexer.ll"
{ return LOW_LAT_MEM_ALLOC; }
	YY_BREAK
case 160:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 315 "omplexer.ll"
{ return CGROUP_MEM_ALLOC; }
	YY_BREAK
case 161:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 316 "omplexer.ll"
{ return PTEAM_MEM_ALLOC; }
	YY_BREAK
case 162:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 317 "omplexer.ll"
{ return THREAD_MEM_ALLOC; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 318 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 319 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 320 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 321 "omplexer.ll"
{ ; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 322 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 324 "omplexer.ll"
{ return PARALLEL; }
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 325 "omplexer.ll"
{ return SIMD; }
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 326 "omplexer.ll"
{ return TASK; }
	YY_BREAK
case 171:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 327 "omplexer.ll"
{ return TASKLOOP; }
	YY_BREAK
case 172:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 328 "omplexer.ll"
{ return CANCEL; }
	YY_BREAK
case 173:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 329 "omplexer.ll"
{ return TARGET; }
	YY_BREAK
case 174:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 330 "omplexer.ll"
{ return DATA; }
	YY_BREAK
case 175:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 331 "omplexer.ll"
{ return ENTER; }
	YY_BREAK
case 176:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 332 "omplexer.ll"
{ return EXIT; }
	YY_BREAK
case 177:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 333 "omplexer.ll"
{ return UPDATE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 334 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 335 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 336 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 337 "omplexer.ll"
{ ; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 338 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 341 "omplexer.ll"
{ return MASTER; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 342 "omplexer.ll"
{ return CLOSE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 343 "omplexer.ll"
{ return SPREAD; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 344 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 345 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 346 "omplexer.ll"
{ ; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 347 "omplexer.ll"
{ return -1; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 349 "omplexer.ll"
{ return SHARED; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 350 "omplexer.ll"
{ return NONE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 351 "omplexer.ll"
{ return FIRSTPRIVATE; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 352 "omplexer.ll"
{ return PRIVATE; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 353 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 354 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 355 "omplexer.ll"
{ ; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 356 "omplexer.ll"
{ yy_push_state(INITIAL); unput(yytext[0]); } /* So far, only for default in metadirective meaning that a new directive is coming up. */
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 358 "omplexer.ll"
{ return CONCURRENT; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 359 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 360 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 361 "omplexer.ll"
{ ; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 362 "omplexer.ll"
{ yy_push_state(INITIAL); }
	YY_BREAK
case 203:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 364 "omplexer.ll"
{ return MODIFIER_INSCAN; }
	YY_BREAK
case 204:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 365 "omplexer.ll"
{ return MODIFIER_TASK; }
	YY_BREAK
case 205:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 366 "omplexer.ll"
{ return MODIFIER_DEFAULT; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 367 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 368 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 369 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 370 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 371 "omplexer.ll"
{ return '+'; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 372 "omplexer.ll"
{ return '-'; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 373 "omplexer.ll"
{ return '*'; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 374 "omplexer.ll"
{ return '&'; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 375 "omplexer.ll"
{ return '|'; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 376 "omplexer.ll"
{ return '^'; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 377 "omplexer.ll"
{ return LOGAND; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 378 "omplexer.ll"
{ return LOGOR; }
	YY_BREAK
case 218:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 379 "omplexer.ll"
{ return MIN; }
	YY_BREAK
case 219:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 380 "omplexer.ll"
{ return MAX; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 381 "omplexer.ll"
{ ; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 382 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 384 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return '('; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 385 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 386 "omplexer.ll"
{ ; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 388 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return '('; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 389 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 390 "omplexer.ll"
{ ; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 392 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 393 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 394 "omplexer.ll"
{ ; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 395 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 397 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 398 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 399 "omplexer.ll"
{ ; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 400 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 402 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 403 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 404 "omplexer.ll"
{ ; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 405 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 407 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 408 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 409 "omplexer.ll"
{ ; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 410 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 412 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 413 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 414 "omplexer.ll"
{ ; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 415 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 248:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 417 "omplexer.ll"
{ return MODIFIER_CONDITIONAL; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 418 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 419 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 420 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 421 "omplexer.ll"
{ ; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 422 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 424 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 425 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 256:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 426 "omplexer.ll"
{ return MODOFIER_VAL; }
	YY_BREAK
case 257:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 427 "omplexer.ll"
{ return MODOFIER_REF; }
	YY_BREAK
case 258:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 428 "omplexer.ll"
{ return MODOFIER_UVAL; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 429 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 430 "omplexer.ll"
{ ; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 431 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 434 "omplexer.ll"
{ return MODIFIER_MONOTONIC; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 435 "omplexer.ll"
{ return MODIFIER_NONMONOTONIC; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 436 "omplexer.ll"
{ return MODIFIER_SIMD; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 437 "omplexer.ll"
{ return STATIC; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 438 "omplexer.ll"
{ return DYNAMIC; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 439 "omplexer.ll"
{ return GUIDED; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 440 "omplexer.ll"
{ return AUTO; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 441 "omplexer.ll"
{ return RUNTIME; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 442 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 443 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 444 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 445 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 446 "omplexer.ll"
{ ; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 447 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 449 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 450 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 451 "omplexer.ll"
{ ; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 452 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 454 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return '('; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 455 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 456 "omplexer.ll"
{ ; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 458 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 459 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 460 "omplexer.ll"
{ ; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 461 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 463 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 464 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 465 "omplexer.ll"
{ ; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 466 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 468 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 469 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 470 "omplexer.ll"
{ ; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 471 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 473 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 474 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 475 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 476 "omplexer.ll"
{ ; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 477 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 300:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 479 "omplexer.ll"
{return STATIC; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 480 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 481 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 482 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 483 "omplexer.ll"
{ ; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 484 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 486 "omplexer.ll"
{ return TEAMS; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 487 "omplexer.ll"
{ return PARALLEL; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 488 "omplexer.ll"
{ return THREAD; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 489 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 490 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 491 "omplexer.ll"
{ ; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 492 "omplexer.ll"
{ return -1; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 494 "omplexer.ll"
{ return DEFAULT_MEM_ALLOC; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 495 "omplexer.ll"
{ return LARGE_CAP_MEM_ALLOC; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 496 "omplexer.ll"
{ return CONST_MEM_ALLOC; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 497 "omplexer.ll"
{ return HIGH_BW_MEM_ALLOC; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 498 "omplexer.ll"
{ return LOW_LAT_MEM_ALLOC; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 499 "omplexer.ll"
{ return CGROUP_MEM_ALLOC; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 500 "omplexer.ll"
{ return PTEAM_MEM_ALLOC; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 501 "omplexer.ll"
{ return THREAD_MEM_ALLOC; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 502 "omplexer.ll"
{ ; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 503 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 504 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 505 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 507 "omplexer.ll"
{ return OMP_PRIV; }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 508 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 509 "omplexer.ll"
{ ; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 510 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 511 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 512 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 514 "omplexer.ll"
{ return IDENTIFIER_DEFAULT; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 515 "omplexer.ll"
{ yy_push_state(ID_EXPR_STATE); return ':'; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 516 "omplexer.ll"
{ ; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 517 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 518 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 519 "omplexer.ll"
{ yy_push_state(ID_EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 521 "omplexer.ll"
{ current_char = yytext[0];
                                            switch (current_char) {
                                                case '(': {
                                                    parenthesis_local_count++;
                                                    parenthesis_global_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ')': {
                                                    parenthesis_local_count--;
                                                    parenthesis_global_count--;
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput(')');
                                                            parenthesis_local_count = 0;
                                                            parenthesis_global_count = 1;
                                                            bracket_count = 0;
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ' ': {
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                default: {
                                                    if (current_char != ' ' || parenthesis_local_count != 0) {
                                                        current_string.append(1, current_char);
                                                    }
                                                }
                                            }
                                        }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 564 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 565 "omplexer.ll"
{ yy_push_state(INITIAL); return ':'; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 566 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 567 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 568 "omplexer.ll"
{ yy_push_state(INITIAL); return '{'; } /* now parsrsing enters to pass a full construct, directive, condition, etc */
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 569 "omplexer.ll"
{ return '}'; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 570 "omplexer.ll"
{ ; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 571 "omplexer.ll"
{ return USER; }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 572 "omplexer.ll"
{ return CONSTRUCT; }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 573 "omplexer.ll"
{ return DEVICE; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 574 "omplexer.ll"
{ yy_push_state(IMPLEMENTATION_STATE); return IMPLEMENTATION; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 575 "omplexer.ll"
{ ; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 576 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 578 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 579 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 580 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 581 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 582 "omplexer.ll"
{ brace_count++; return '{'; }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 583 "omplexer.ll"
{ yy_pop_state(); return '}'; }
	YY_BREAK
case 357:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 584 "omplexer.ll"
{ yy_push_state(VENDOR_STATE); return VENDOR; }
	YY_BREAK
case 358:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 585 "omplexer.ll"
{ yy_push_state(EXTENSION_STATE); return EXTENSION; }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 586 "omplexer.ll"
{ ; }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 587 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 589 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 590 "omplexer.ll"
{ yy_push_state(INITIAL); return ':'; }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 591 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 592 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 593 "omplexer.ll"
{ yy_push_state(INITIAL); return '{'; } /* now parsing enters to pass a full construct, directive, condition, etc */
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 594 "omplexer.ll"
{ return '}'; }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 595 "omplexer.ll"
{ return USER; }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 596 "omplexer.ll"
{ return CONSTRUCT; }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 597 "omplexer.ll"
{ return DEVICE; }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 598 "omplexer.ll"
{ yy_push_state(IMPLEMENTATION_STATE); return IMPLEMENTATION; }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 599 "omplexer.ll"
{ ; }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 600 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 373:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 602 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 603 "omplexer.ll"
{ parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 604 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 605 "omplexer.ll"
{ ; }
	YY_BREAK
case 377:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 606 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 607 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 379:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 609 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 610 "omplexer.ll"
{ parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 611 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 612 "omplexer.ll"
{ ; }
	YY_BREAK
case 383:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 613 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 614 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 616 "omplexer.ll"
{ yy_push_state(EXPR_STATE); parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 617 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 618 "omplexer.ll"
{ yy_pop_state(); parenthesis_global_count = 1; return ':'; }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 619 "omplexer.ll"
{ ; }
	YY_BREAK
case 389:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 621 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 622 "omplexer.ll"
{ parenthesis_global_count = 1; return '('; }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 623 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 624 "omplexer.ll"
{ ; }
	YY_BREAK
case 393:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 625 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 626 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 628 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 629 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 630 "omplexer.ll"
{ ; }
	YY_BREAK
case 398:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 631 "omplexer.ll"
{ return AMD; }
	YY_BREAK
case 399:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 632 "omplexer.ll"
{ return ARM; }
	YY_BREAK
case 400:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 633 "omplexer.ll"
{ return BSC; }
	YY_BREAK
case 401:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 634 "omplexer.ll"
{ return CRAY; }
	YY_BREAK
case 402:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 635 "omplexer.ll"
{ return FUJITSU; }
	YY_BREAK
case 403:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 636 "omplexer.ll"
{ return GNU; }
	YY_BREAK
case 404:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 637 "omplexer.ll"
{ return IBM; }
	YY_BREAK
case 405:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 638 "omplexer.ll"
{ return INTEL; }
	YY_BREAK
case 406:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 639 "omplexer.ll"
{ return LLVM; }
	YY_BREAK
case 407:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 640 "omplexer.ll"
{ return PGI; }
	YY_BREAK
case 408:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 641 "omplexer.ll"
{ return TI; }
	YY_BREAK
case 409:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 642 "omplexer.ll"
{ return UNKNOWN; }
	YY_BREAK
case 410:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 643 "omplexer.ll"
{ yy_push_state(SCORE_STATE); return SCORE; }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 645 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 646 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 647 "omplexer.ll"
{ ; }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 648 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 650 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 651 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 652 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 653 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 654 "omplexer.ll"
{ return '+'; }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 655 "omplexer.ll"
{ return '-'; }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 656 "omplexer.ll"
{ return '*'; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 657 "omplexer.ll"
{ return '&'; }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 658 "omplexer.ll"
{ return '|'; }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 659 "omplexer.ll"
{ return '^'; }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 660 "omplexer.ll"
{ return LOGAND; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 661 "omplexer.ll"
{ return LOGOR; }
	YY_BREAK
case 427:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 662 "omplexer.ll"
{ return MIN; }
	YY_BREAK
case 428:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 663 "omplexer.ll"
{ return MAX; }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 664 "omplexer.ll"
{ ; }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 665 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 667 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 668 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 669 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 670 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 671 "omplexer.ll"
{ yy_push_state(EXPR_STATE); return ':'; }
	YY_BREAK
case 436:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 672 "omplexer.ll"
{ current_string.clear(); yy_push_state(DEPEND_ITERATOR_STATE);return MODIFIER_ITERATOR; }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 674 "omplexer.ll"
{ return IN; }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 675 "omplexer.ll"
{ return OUT; }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 676 "omplexer.ll"
{ return INOUT; }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 677 "omplexer.ll"
{ return MUTEXINOUTSET; }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 678 "omplexer.ll"
{ return DEPOBJ; }
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 679 "omplexer.ll"
{ return SOURCE; }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 680 "omplexer.ll"
{ return SINK; }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 681 "omplexer.ll"
{ ; }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 682 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 684 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 685 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 686 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 687 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 688 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 689 "omplexer.ll"
{ ; }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 690 "omplexer.ll"
{ yy_push_state(DEPEND_EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 692 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 693 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(')'); return EXPR_STRING; }
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 694 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(','); return EXPR_STRING; } 
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 695 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); return EXPR_STRING; }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 696 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput('='); return EXPR_STRING; }   
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 697 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(':'); return EXPR_STRING; }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 698 "omplexer.ll"
{ current_string += yytext[0]; }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 700 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 701 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 702 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 703 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 464:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 704 "omplexer.ll"
{ current_string.clear(); yy_push_state(AFFINITY_ITERATOR_STATE);return MODIFIER_ITERATOR; }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 705 "omplexer.ll"
{ ; }
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 706 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 708 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 709 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(')'); return EXPR_STRING; }
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 710 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); return EXPR_STRING; }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 711 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(','); return EXPR_STRING; }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 712 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput('='); return EXPR_STRING; } 
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 713 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(':'); return EXPR_STRING; }
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 714 "omplexer.ll"
{ current_string += yytext[0]; }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 716 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 717 "omplexer.ll"
{ return '='; }
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 718 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 719 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 720 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 721 "omplexer.ll"
{ ; }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 722 "omplexer.ll"
{ yy_push_state(AFFINITY_EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 724 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 725 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 726 "omplexer.ll"
{ ; }
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 727 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 729 "omplexer.ll"
{ return SEQ_CST; }
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 730 "omplexer.ll"
{ return ACQ_REL; }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 731 "omplexer.ll"
{ return RELAXED; }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 732 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 733 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 734 "omplexer.ll"
{ ; }
	YY_BREAK
case 491:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 736 "omplexer.ll"
{ return ANCESTOR; }
	YY_BREAK
case 492:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 737 "omplexer.ll"
{ return DEVICE_NUM; }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 738 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 739 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 740 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 741 "omplexer.ll"
{ ; }
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 742 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 498:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 744 "omplexer.ll"
{ return BEHAVIOR_ALLOC; }
	YY_BREAK
case 499:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 745 "omplexer.ll"
{ return BEHAVIOR_TO; }
	YY_BREAK
case 500:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 746 "omplexer.ll"
{ return BEHAVIOR_FROM; }
	YY_BREAK
case 501:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 747 "omplexer.ll"
{ return BEHAVIOR_TOFROM; }
	YY_BREAK
case 502:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 748 "omplexer.ll"
{ return BEHAVIOR_FIRSTPRIVATE; }
	YY_BREAK
case 503:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 749 "omplexer.ll"
{ return BEHAVIOR_NONE; }
	YY_BREAK
case 504:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 750 "omplexer.ll"
{ return BEHAVIOR_DEFAULT; }
	YY_BREAK
case 505:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 751 "omplexer.ll"
{ return CATEGORY_SCALAR; }
	YY_BREAK
case 506:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 752 "omplexer.ll"
{ return CATEGORY_AGGREGATE; }
	YY_BREAK
case 507:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 753 "omplexer.ll"
{ return CATEGORY_POINTER; }
	YY_BREAK
case 508:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 754 "omplexer.ll"
{ return CATEGORY_ALLOCATABLE; }
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 755 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 756 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 757 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 758 "omplexer.ll"
{ ; }
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 760 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 761 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 762 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 763 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 517:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 764 "omplexer.ll"
{ current_string.clear(); yy_push_state(TO_MAPPER_STATE);return TO_MAPPER; }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 765 "omplexer.ll"
{ ; }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 766 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 769 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 770 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 771 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 773 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 774 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 775 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 776 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 527:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 777 "omplexer.ll"
{ current_string.clear(); yy_push_state(FROM_MAPPER_STATE);return FROM_MAPPER; }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 778 "omplexer.ll"
{ ; }
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 779 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 781 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 782 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 783 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 785 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 786 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 535:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 787 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 788 "omplexer.ll"
{ return ')'; }
	YY_BREAK
case 537:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 789 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return DEFAULT_MEM_ALLOC; }
	YY_BREAK
case 538:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 23;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 790 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return LARGE_CAP_MEM_ALLOC; }
	YY_BREAK
case 539:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 791 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return CONST_MEM_ALLOC; }
	YY_BREAK
case 540:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 792 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return HIGH_BW_MEM_ALLOC; }
	YY_BREAK
case 541:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 21;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 793 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return LOW_LAT_MEM_ALLOC; }
	YY_BREAK
case 542:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 794 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return CGROUP_MEM_ALLOC; }
	YY_BREAK
case 543:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 795 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return PTEAM_MEM_ALLOC; }
	YY_BREAK
case 544:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 796 "omplexer.ll"
{ current_string.clear(); yy_push_state(ALLOC_EXPR_STATE);return THREAD_MEM_ALLOC; }
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 797 "omplexer.ll"
{ ; }
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 798 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 800 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 801 "omplexer.ll"
{ yy_pop_state(); openmp_lval.stype = strdup(current_string.c_str()); current_string.clear(); unput(')'); return EXPR_STRING; }
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 802 "omplexer.ll"
{ current_string += yytext[0]; }
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 805 "omplexer.ll"
{ return HOST; }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 806 "omplexer.ll"
{ return NOHOST; }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 807 "omplexer.ll"
{ return ANY; }
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 808 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 809 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 810 "omplexer.ll"
{ ; }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 811 "omplexer.ll"
{ yy_push_state(INITIAL); unput(yytext[0]); } 
	YY_BREAK
case 557:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 813 "omplexer.ll"
{ return MAP_MODIFIER_ALWAYS; }
	YY_BREAK
case 558:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 814 "omplexer.ll"
{ return MAP_MODIFIER_CLOSE; }
	YY_BREAK
case 559:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 815 "omplexer.ll"
{ current_string.clear(); yy_push_state(MAP_MAPPER_STATE);return MAP_MODIFIER_MAPPER; }
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 816 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 817 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 818 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 819 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 564:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 820 "omplexer.ll"
{ return MAP_TYPE_TO; }
	YY_BREAK
case 565:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 821 "omplexer.ll"
{ return MAP_TYPE_FROM; }
	YY_BREAK
case 566:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 822 "omplexer.ll"
{ return MAP_TYPE_TOFROM; }
	YY_BREAK
case 567:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 823 "omplexer.ll"
{ return MAP_TYPE_ALLOC; }
	YY_BREAK
case 568:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 824 "omplexer.ll"
{ return MAP_TYPE_RELEASE; }
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 825 "omplexer.ll"
{ return MAP_TYPE_DELETE; }
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 826 "omplexer.ll"
{ ; }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 827 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 829 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 830 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 831 "omplexer.ll"
{ yy_push_state(EXPR_STATE); unput(yytext[0]); }
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 833 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 834 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 835 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 836 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 837 "omplexer.ll"
{ return '+'; }
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 838 "omplexer.ll"
{ return '-'; }
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 839 "omplexer.ll"
{ return '*'; }
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 840 "omplexer.ll"
{ return '&'; }
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 841 "omplexer.ll"
{ return '|'; }
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 842 "omplexer.ll"
{ return '^'; }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 843 "omplexer.ll"
{ return LOGAND; }
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 844 "omplexer.ll"
{ return LOGOR; }
	YY_BREAK
case 587:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 845 "omplexer.ll"
{ return MIN; }
	YY_BREAK
case 588:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 846 "omplexer.ll"
{ return MAX; }
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 847 "omplexer.ll"
{ ; }
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 848 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 850 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 851 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 852 "omplexer.ll"
{ return SOURCE; }
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 853 "omplexer.ll"
{ return IN; }
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 854 "omplexer.ll"
{ return OUT; }
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 855 "omplexer.ll"
{ return INOUT; }
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 856 "omplexer.ll"
{ return MUTEXINOUTSET; }
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 857 "omplexer.ll"
{ return DEPOBJ; }
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 858 "omplexer.ll"
{ return SINK; }
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 859 "omplexer.ll"
{ ; }
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 860 "omplexer.ll"
{ yy_pop_state(); unput(yytext[0]); }
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 862 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 603:
YY_RULE_SETUP
#line 863 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 864 "omplexer.ll"
{ ; }
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 865 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 867 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 868 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 869 "omplexer.ll"
{ ; }
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 870 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 872 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 873 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 612:
YY_RULE_SETUP
#line 874 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 875 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 876 "omplexer.ll"
{ ; }
	YY_BREAK
case 615:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 877 "omplexer.ll"
{ return CHUNK; }
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 878 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 617:
YY_RULE_SETUP
#line 880 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 881 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 882 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 883 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 884 "omplexer.ll"
{ ; }
	YY_BREAK
case 622:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 885 "omplexer.ll"
{return CHUNK; }
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 886 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 888 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 889 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 626:
YY_RULE_SETUP
#line 890 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 891 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 892 "omplexer.ll"
{ ; }
	YY_BREAK
case 629:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 893 "omplexer.ll"
{return CHUNK; }
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 894 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 896 "omplexer.ll"
{ return '('; }
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 897 "omplexer.ll"
{ yy_pop_state(); return ')'; }
	YY_BREAK
case 633:
YY_RULE_SETUP
#line 898 "omplexer.ll"
{ return ','; }
	YY_BREAK
case 634:
YY_RULE_SETUP
#line 899 "omplexer.ll"
{ return ':'; }
	YY_BREAK
case 635:
YY_RULE_SETUP
#line 900 "omplexer.ll"
{ ; }
	YY_BREAK
case 636:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 901 "omplexer.ll"
{return CHUNK; }
	YY_BREAK
case 637:
YY_RULE_SETUP
#line 902 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 906 "omplexer.ll"
{ current_char = yytext[0];
                                            switch (current_char) {
                                                case '\n': {
                                                    break;
                                                }
                                                case '(': {
                                                    parenthesis_local_count++;
                                                    parenthesis_global_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ')': {
                                                    parenthesis_local_count--;
                                                    parenthesis_global_count--;
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput(')');
                                                            parenthesis_local_count = 0;
                                                            parenthesis_global_count = 1;
                                                            bracket_count = 0;
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ',': {
                                                    if (current_string.size() == 0) {
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return ',';
                                                    }
                                                    else if (parenthesis_local_count == 0) {
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        unput(',');
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case '[': {
                                                    bracket_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ']': {
                                                    bracket_count--;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case '{': {
                                                    brace_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case '}': {
                                                    brace_count--;
                                                    if (brace_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput('}');
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            unput('}');
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ':': {
                                                    if (current_string.size() == 0) {
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return ':';
                                                    }
                                                    else if (bracket_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        unput(':');
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    }
                                                    break;
                                                }
                                                case ' ': {
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    };
                                                    break;
                                                }
                                                default: {
                                                    if (current_char != ' ' || parenthesis_local_count != 0) {
                                                        current_string.append(1, current_char);
                                                    }
                                                }
                                            }
                                        }
	YY_BREAK
case 639:
YY_RULE_SETUP
#line 1037 "omplexer.ll"
{ current_char = yytext[0];
                                            switch (current_char) {
                                                case '(': {
                                                    parenthesis_local_count++;
                                                    parenthesis_global_count++;
                                                    current_string.append(1, current_char);
                                                    break;
                                                }
                                                case ')': {
                                                    parenthesis_local_count--;
                                                    parenthesis_global_count--;
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        if (current_string.size() != 0) {
                                                            openmp_lval.stype = strdup(current_string.c_str());
                                                            current_string.clear();
                                                            unput(')');
                                                            parenthesis_local_count = 0;
                                                            parenthesis_global_count = 1;
                                                            bracket_count = 0;
                                                            return EXPR_STRING;
                                                        }
                                                        else {
                                                            break;
                                                        };
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    };
                                                    break;
                                                }
                                                case ':': {
                                                    if (current_string.size() == 0) {
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return ':';
                                                    }
                                                    else if (bracket_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        unput(':');
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    }
                                                    break;
                                                }
                                                case ' ': {
                                                    if (parenthesis_global_count == 0) {
                                                        yy_pop_state();
                                                        openmp_lval.stype = strdup(current_string.c_str());
                                                        current_string.clear();
                                                        parenthesis_local_count = 0;
                                                        parenthesis_global_count = 1;
                                                        bracket_count = 0;
                                                        return EXPR_STRING;
                                                    }
                                                    else {
                                                        current_string.append(1, current_char);
                                                    }
                                                    break;
                                                }
                                                default: {
                                                    if (current_char != ' ' || parenthesis_local_count != 0) {
                                                        current_string.append(1, current_char);
                                                    }
                                                }
                                            }
                                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(EXPR_STATE):
case YY_STATE_EOF(ALLOCATE_STATE):
case YY_STATE_EOF(DEFAULT_STATE):
case YY_STATE_EOF(IF_STATE):
case YY_STATE_EOF(PROC_BIND_STATE):
case YY_STATE_EOF(REDUCTION_STATE):
case YY_STATE_EOF(LASTPRIVATE_STATE):
case YY_STATE_EOF(LINEAR_STATE):
case YY_STATE_EOF(SCHEDULE_STATE):
case YY_STATE_EOF(COLLAPSE_STATE):
case YY_STATE_EOF(ORDERED_STATE):
case YY_STATE_EOF(ALIGNED_STATE):
case YY_STATE_EOF(DIST_SCHEDULE_STATE):
case YY_STATE_EOF(BIND_STATE):
case YY_STATE_EOF(ALLOCATOR_STATE):
case YY_STATE_EOF(INITIALIZER_STATE):
case YY_STATE_EOF(MAPPER_STATE):
case YY_STATE_EOF(TYPE_STR_STATE):
case YY_STATE_EOF(WHEN_STATE):
case YY_STATE_EOF(MATCH_STATE):
case YY_STATE_EOF(ISA_STATE):
case YY_STATE_EOF(SCORE_STATE):
case YY_STATE_EOF(CONDITION_STATE):
case YY_STATE_EOF(VENDOR_STATE):
case YY_STATE_EOF(ARCH_STATE):
case YY_STATE_EOF(EXTENSION_STATE):
case YY_STATE_EOF(IN_REDUCTION_STATE):
case YY_STATE_EOF(DEPEND_STATE):
case YY_STATE_EOF(AFFINITY_STATE):
case YY_STATE_EOF(AFFINITY_EXPR_STATE):
case YY_STATE_EOF(AFFINITY_ITERATOR_STATE):
case YY_STATE_EOF(FINAL_STATE):
case YY_STATE_EOF(ATOMIC_DEFAULT_MEM_ORDER_STATE):
case YY_STATE_EOF(DEVICE_STATE):
case YY_STATE_EOF(DEFAULTMAP_STATE):
case YY_STATE_EOF(DEPEND_ITERATOR_STATE):
case YY_STATE_EOF(DEPEND_EXPR_STATE):
case YY_STATE_EOF(TO_STATE):
case YY_STATE_EOF(TO_MAPPER_STATE):
case YY_STATE_EOF(FROM_STATE):
case YY_STATE_EOF(FROM_MAPPER_STATE):
case YY_STATE_EOF(USES_ALLOCATORS_STATE):
case YY_STATE_EOF(ALLOC_EXPR_STATE):
case YY_STATE_EOF(DEVICE_TYPE_STATE):
case YY_STATE_EOF(MAP_STATE):
case YY_STATE_EOF(MAP_MAPPER_STATE):
case YY_STATE_EOF(TASK_REDUCTION_STATE):
case YY_STATE_EOF(IMPLEMENTATION_STATE):
case YY_STATE_EOF(UPDATE_STATE):
case YY_STATE_EOF(PRIVATE_STATE):
case YY_STATE_EOF(FIRSTPRIVATE_STATE):
case YY_STATE_EOF(SIMDLEN_STATE):
case YY_STATE_EOF(SAFELEN_STATE):
case YY_STATE_EOF(NONTEMPORAL_STATE):
case YY_STATE_EOF(SIMD_STATE):
case YY_STATE_EOF(THREADPRIVATE_STATE):
case YY_STATE_EOF(SHARED_STATE):
case YY_STATE_EOF(COPYIN_STATE):
case YY_STATE_EOF(COPYPRIVATE_STATE):
case YY_STATE_EOF(ORDER_STATE):
case YY_STATE_EOF(ID_EXPR_STATE):
case YY_STATE_EOF(ALLOC_STATE):
case YY_STATE_EOF(BROAD_STATE):
case YY_STATE_EOF(SCATTER_STATE):
case YY_STATE_EOF(GATHER_STATE):
case YY_STATE_EOF(ALLGATHER_STATE):
case YY_STATE_EOF(HALO_STATE):
#line 1113 "omplexer.ll"
{ if (current_string.size() != 0) {
                      openmp_lval.stype = strdup(current_string.c_str());
                      current_string.clear();
                      parenthesis_local_count = 0;
                      parenthesis_global_count = 1;
                      bracket_count = 0;
                      return EXPR_STRING;
                  }
                  else {
                      return 0;
                  };
                }
	YY_BREAK
case 640:
YY_RULE_SETUP
#line 1126 "omplexer.ll"
{return (EXPRESSION); }
	YY_BREAK
case 641:
YY_RULE_SETUP
#line 1128 "omplexer.ll"
;
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 1129 "omplexer.ll"
{ yy_push_state(EXPR_STATE); current_string = yytext[0]; }
	YY_BREAK
case 643:
YY_RULE_SETUP
#line 1131 "omplexer.ll"
ECHO;
	YY_BREAK
#line 6613 "omplexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2595 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2595 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2594);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1131 "omplexer.ll"



/* yy_push_state can't be called outside of this file, provide a wrapper */
extern void openmp_parse_expr() {
        yy_push_state(EXPR_STATE);
}

/* entry point invoked by callers to start scanning for a string */
extern void openmp_lexer_init(const char* str) {
  ompparserinput = str;
  /* We have openmp_ suffix for all flex functions */
  openmp_restart(openmp_in);
}


/* Standalone ompparser */
void start_lexer(const char* input) {
    yy_scan_string(input);
}

void end_lexer(void) {
    // If the lexer exited due to some error, the condition stack could be nonempty.
    // In this case, it has to be reset to the initial state manually, where yy_start_stack_ptr == 0.
    while (yy_start_stack_ptr > 0) {
        yy_pop_state();
    };
    yy_delete_buffer(YY_CURRENT_BUFFER);
}


